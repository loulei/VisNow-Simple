/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.geometries.gui;


import java.awt.Color;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import pl.edu.icm.visnow.geometries.parameters.FontParams;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class FontGUI extends javax.swing.JPanel
{
   
   FontParams params = new FontParams();
   protected String fontList;

   /**
    * Creates new form FontGUI
    */
   public FontGUI()
   {
      initComponents();
      colorEditor.setColor(Color.WHITE);
      typeButton.setInit(new String[]
      {
         "2d fonts", "3d fonts"
      }, null);
      brightnessEditor.setVisible(false);
   }

   public void setParams(FontParams params)
   {
      this.params = params;
   }

   public void setInitType(boolean threeDim)
   {
      typeButton.setState(threeDim ? 1 : 0);
   }
   
   public void setInitBrightness(float v)
   {
      brightnessEditor.setRGBMap();
      brightnessEditor.setBrightness(0);
      brightnessEditor.setVisible(true);
      colorEditor.setVisible(false);
   }
   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        boldBox = new javax.swing.JCheckBox();
        italicBox = new javax.swing.JCheckBox();
        qualitySlider = new javax.swing.JSlider();
        typeButton = new pl.edu.icm.visnow.gui.widgets.MultistateButton();
        colorEditor = new pl.edu.icm.visnow.gui.widgets.ColorEditor();
        fontCombo = new pl.edu.icm.visnow.gui.widgets.FontComboBox();
        brightnessEditor = new pl.edu.icm.visnow.datamaps.BrightnessEditor();
        sizeSlider = new pl.edu.icm.visnow.gui.widgets.ExtendedSlider();

        setLayout(new java.awt.GridBagLayout());

        boldBox.setText("bold");
        boldBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        add(boldBox, gridBagConstraints);

        italicBox.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        italicBox.setText("italic");
        italicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 6, 0);
        add(italicBox, gridBagConstraints);

        qualitySlider.setMaximum(80);
        qualitySlider.setMinimum(10);
        qualitySlider.setMinorTickSpacing(10);
        qualitySlider.setPaintTicks(true);
        qualitySlider.setValue(30);
        qualitySlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "3d label quality", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        qualitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qualitySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        add(qualitySlider, gridBagConstraints);

        typeButton.setText("multistateButton1");
        typeButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        typeButton.setMaximumSize(new java.awt.Dimension(154, 22));
        typeButton.setMinimumSize(new java.awt.Dimension(54, 22));
        typeButton.setPreferredSize(new java.awt.Dimension(54, 22));
        typeButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                typeButtonStateChanged(evt);
            }
        });
        typeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(typeButton, gridBagConstraints);

        colorEditor.setMinimumSize(new java.awt.Dimension(60, 22));
        colorEditor.setPreferredSize(new java.awt.Dimension(100, 22));
        colorEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colorEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 2);
        add(colorEditor, gridBagConstraints);

        fontCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fontComboItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(fontCombo, gridBagConstraints);

        brightnessEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnessEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(brightnessEditor, gridBagConstraints);

        sizeSlider.setShowingFields(false);
        sizeSlider.setSubmitOnAdjusting(false);
        sizeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Size (in % of window height)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        sizeSlider.setMax(3.0F);
        sizeSlider.setMin(0.0F);
        sizeSlider.addUserActionListener(new pl.edu.icm.visnow.gui.swingwrappers.UserActionListener() {
            public void valueChangedAction(java.util.EventObject evt) {
                sizeSliderValueChangedAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(sizeSlider, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void boldBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_boldBoxActionPerformed
   {//GEN-HEADEREND:event_boldBoxActionPerformed
      params.setBold(boldBox.isSelected());
   }//GEN-LAST:event_boldBoxActionPerformed

   private void italicBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_italicBoxActionPerformed
   {//GEN-HEADEREND:event_italicBoxActionPerformed
      params.setItalic(italicBox.isSelected());
   }//GEN-LAST:event_italicBoxActionPerformed

   private void qualitySliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_qualitySliderStateChanged
   {//GEN-HEADEREND:event_qualitySliderStateChanged
      if (!qualitySlider.getValueIsAdjusting())
         params.setPrecision(qualitySlider.getValue());
   }//GEN-LAST:event_qualitySliderStateChanged

   private void typeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_typeButtonActionPerformed
   {//GEN-HEADEREND:event_typeButtonActionPerformed
      qualitySlider.setEnabled(typeButton.getState() == 1);                                              
      params.setThreeDimensional(typeButton.getState() == 1);
   }//GEN-LAST:event_typeButtonActionPerformed

   private void colorEditorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_colorEditorStateChanged
   {//GEN-HEADEREND:event_colorEditorStateChanged
      if (!colorEditor.isAdjusting())
         params.setColor(colorEditor.getColor());
   }//GEN-LAST:event_colorEditorStateChanged

   private void fontComboItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_fontComboItemStateChanged
   {//GEN-HEADEREND:event_fontComboItemStateChanged
      params.setFontName((String)(fontCombo.getSelectedItem()));
   }//GEN-LAST:event_fontComboItemStateChanged

   private void typeButtonStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_typeButtonStateChanged
   {//GEN-HEADEREND:event_typeButtonStateChanged
      qualitySlider.setEnabled(typeButton.getState() == 1);                                              
      params.setThreeDimensional(typeButton.getState() == 1);      // TODO add your handling code here:
   }//GEN-LAST:event_typeButtonStateChanged

   private void brightnessEditorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_brightnessEditorStateChanged
   {//GEN-HEADEREND:event_brightnessEditorStateChanged
      if (!brightnessEditor.isAdjusting())
         params.setColorCorrection(brightnessEditor.getBrightness() + 1);
   }//GEN-LAST:event_brightnessEditorStateChanged

    private void sizeSliderValueChangedAction(java.util.EventObject evt) {//GEN-FIRST:event_sizeSliderValueChangedAction
         params.setSize(sizeSlider.getVal() / 100);
    }//GEN-LAST:event_sizeSliderValueChangedAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boldBox;
    private pl.edu.icm.visnow.datamaps.BrightnessEditor brightnessEditor;
    private pl.edu.icm.visnow.gui.widgets.ColorEditor colorEditor;
    private pl.edu.icm.visnow.gui.widgets.FontComboBox fontCombo;
    private javax.swing.JCheckBox italicBox;
    private javax.swing.JSlider qualitySlider;
    private pl.edu.icm.visnow.gui.widgets.ExtendedSlider sizeSlider;
    private pl.edu.icm.visnow.gui.widgets.MultistateButton typeButton;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
       VisNow.initLogging(true);       
       Locale.setDefault(VisNow.LOCALE);
       
       JFrame f = new JFrame();
       f.add(new FontGUI());
       f.pack();
       f.setLocation(400, 200);
       f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
       f.setVisible(true);        
    }
}
