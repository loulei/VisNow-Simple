/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.geometries.gui;

import java.awt.GridBagLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.geometries.objects.ColormapLegend;
import pl.edu.icm.visnow.geometries.parameters.ColormapLegendParameters;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class ColormapLegendGUI extends javax.swing.JPanel
{
   protected ColormapLegendParameters params = null;
   protected int direction = ColormapLegend.WEST;
   protected GridBagLayout stdLayout;
   /** Creates new form ColormapLegendGUI */
   public ColormapLegendGUI()
   {
      initComponents();
      lenPosSlider.setBottomValue(.08f);
      widthSlider.setBottomValue(.01f);
      legendPositionButton.setTexts(new String[]{"left", "bottom", "right", "top"});
      activateComponent(false);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        orientationGroup = new javax.swing.ButtonGroup();
        colorEditor = new pl.edu.icm.visnow.gui.widgets.ColorEditor();
        jLabel2 = new javax.swing.JLabel();
        fontSpinner = new javax.swing.JSpinner();
        legendDimensionsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lenPosSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider();
        jLabel5 = new javax.swing.JLabel();
        widthSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider();
        showLegendBox = new javax.swing.JCheckBox();
        legendPositionButton = new pl.edu.icm.visnow.gui.widgets.MultistateButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "legend", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        setName(""); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        colorEditor.setName("colorEditor"); // NOI18N
        colorEditor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colorEditorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 4);
        add(colorEditor, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("font");
        jLabel2.setName("jLabel2"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        add(jLabel2, gridBagConstraints);

        fontSpinner.setModel(new javax.swing.SpinnerNumberModel(14, 10, 40, 2));
        fontSpinner.setMinimumSize(new java.awt.Dimension(42, 18));
        fontSpinner.setName("fontSpinner"); // NOI18N
        fontSpinner.setPreferredSize(new java.awt.Dimension(42, 18));
        fontSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(fontSpinner, gridBagConstraints);

        legendDimensionsPanel.setName("legendDimensionsPanel"); // NOI18N
        legendDimensionsPanel.setOpaque(false);
        legendDimensionsPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("length/location");
        jLabel3.setName("jLabel3"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        legendDimensionsPanel.add(jLabel3, gridBagConstraints);

        lenPosSlider.setExtent(0.1F);
        lenPosSlider.setMaximum(1.0F);
        lenPosSlider.setMinimumSize(new java.awt.Dimension(60, 22));
        lenPosSlider.setName("lenPosSlider"); // NOI18N
        lenPosSlider.setPreferredSize(new java.awt.Dimension(200, 22));
        lenPosSlider.setTopValue(0.5F);
        lenPosSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lenPosSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        legendDimensionsPanel.add(lenPosSlider, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel5.setText("width/location");
        jLabel5.setName("jLabel5"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        legendDimensionsPanel.add(jLabel5, gridBagConstraints);

        widthSlider.setExtent(0.01F);
        widthSlider.setMaximum(0.2F);
        widthSlider.setMinimumSize(new java.awt.Dimension(60, 22));
        widthSlider.setName("widthSlider"); // NOI18N
        widthSlider.setPreferredSize(new java.awt.Dimension(200, 22));
        widthSlider.setTopValue(0.03F);
        widthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                widthSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        legendDimensionsPanel.add(widthSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(legendDimensionsPanel, gridBagConstraints);

        showLegendBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        showLegendBox.setText("show");
        showLegendBox.setName("showLegendBox"); // NOI18N
        showLegendBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLegendBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(showLegendBox, gridBagConstraints);

        legendPositionButton.setText("multistateButton1");
        legendPositionButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        legendPositionButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        legendPositionButton.setMaximumSize(new java.awt.Dimension(80, 23));
        legendPositionButton.setMinimumSize(new java.awt.Dimension(50, 23));
        legendPositionButton.setName("legendPositionButton"); // NOI18N
        legendPositionButton.setPreferredSize(new java.awt.Dimension(60, 23));
        legendPositionButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                legendPositionButtonStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 4);
        add(legendPositionButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void colorEditorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_colorEditorStateChanged
   {//GEN-HEADEREND:event_colorEditorStateChanged
      updateParams();
}//GEN-LAST:event_colorEditorStateChanged

   private void lenPosSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_lenPosSliderStateChanged
   {//GEN-HEADEREND:event_lenPosSliderStateChanged
      updateParams();
}//GEN-LAST:event_lenPosSliderStateChanged

private void widthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_widthSliderStateChanged
      updateParams();
}//GEN-LAST:event_widthSliderStateChanged

   private void fontSpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_fontSpinnerStateChanged
   {//GEN-HEADEREND:event_fontSpinnerStateChanged
      updateParams();
   }//GEN-LAST:event_fontSpinnerStateChanged

   private void legendPositionButtonStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_legendPositionButtonStateChanged
   {//GEN-HEADEREND:event_legendPositionButtonStateChanged
      updateParams();
   }//GEN-LAST:event_legendPositionButtonStateChanged

   private void showLegendBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showLegendBoxActionPerformed
   {//GEN-HEADEREND:event_showLegendBoxActionPerformed
      activateComponent(showLegendBox.isSelected());
      updateParams();
   }//GEN-LAST:event_showLegendBoxActionPerformed

   /**
    * Sets enabled/disabled all controls in this component excluding "show" button.
    * @param active 
    */
   private void activateComponent(boolean active) {
       legendPositionButton.setEnabled(active);
       jLabel2.setEnabled(active);
       fontSpinner.setEnabled(active);
       colorEditor.setEnabled(active);
       jLabel3.setEnabled(active);
       jLabel5.setEnabled(active);
       legendPositionButton.setEnabled(active);
       lenPosSlider.setEnabled(active);
       widthSlider.setEnabled(active);
   }

   /**
    * Sets enabled state on this widget.
    * 
    * @param enabled if false then all controls are set to disabled state 
    * if true then "show" checkBox is set to enabled state and all other components are set to enabled/disabled dependent on "show" selected state.
    */
    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        showLegendBox.setEnabled(enabled);
        activateComponent(showLegendBox.isSelected() && enabled);
    }
   
   private boolean fireFromHere = false;
   
   public void setParams(ColormapLegendParameters params)
   {
      this.params = params;
      params.addChangeListener(new ChangeListener() {

          @Override
          public void stateChanged(ChangeEvent e) {
              if(!fireFromHere) {
                  updateGUI();
              }
              
          }
      });
   }
   
   private void updateGUI() {
      if (params == null)
         return;

      lenPosSlider.setBottomValue(params.getX());
      lenPosSlider.setTopValue(params.getL()+params.getX());
      widthSlider.setBottomValue(params.getY());
      widthSlider.setTopValue(params.getW()+params.getY());
      if(params.getPosition() == ColormapLegend.NONE) {
          showLegendBox.setSelected(false);
      } else {
          showLegendBox.setSelected(true);
          switch(params.getPosition()) {
              case ColormapLegend.WEST:
                  legendPositionButton.setState(0);
                  break;
              case ColormapLegend.SOUTH:
                  legendPositionButton.setState(1);
                  break;
              case ColormapLegend.EAST:
                  legendPositionButton.setState(2);
                  break;
              case ColormapLegend.NORTH:
                  legendPositionButton.setState(3);
                  break;
          }
      }

      colorEditor.setColor(params.getColor());
      fontSpinner.setValue(params.getFontSize());
   }

   private void updateParams()
   {
      if (params == null || fireFromHere)
         return;
      params.setX(lenPosSlider.getBottomValue());
      params.setL(lenPosSlider.getTopValue() - lenPosSlider.getBottomValue());
      params.setY(widthSlider.getBottomValue());
      params.setW(widthSlider.getTopValue() - widthSlider.getBottomValue());
      if (!showLegendBox.isSelected())
         params.setPosition(ColormapLegend.NONE);
      else
         switch (legendPositionButton.getState())
         {
         case 0:
            params.setPosition(ColormapLegend.WEST);
            break;
         case 1:
            params.setPosition(ColormapLegend.SOUTH);
            break;
         case 2:
            params.setPosition(ColormapLegend.EAST);
            break;
         case 3:
            params.setPosition(ColormapLegend.NORTH);
            break;
         }
      params.setColor(colorEditor.getColor());
      params.setFontSize((Integer)fontSpinner.getValue());
      fireFromHere = true;
      params.fireStateChanged();
      fireFromHere = false;
   }

   public void setPresentation(boolean simple)
   {
       legendDimensionsPanel.setVisible(!simple);
       revalidate();
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.gui.widgets.ColorEditor colorEditor;
    private javax.swing.JSpinner fontSpinner;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel legendDimensionsPanel;
    private pl.edu.icm.visnow.gui.widgets.MultistateButton legendPositionButton;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider lenPosSlider;
    private javax.swing.ButtonGroup orientationGroup;
    private javax.swing.JCheckBox showLegendBox;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider widthSlider;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        final ColormapLegendGUI p = new ColormapLegendGUI();
        f.add(p);
        f.pack();
        f.addComponentListener(new ComponentAdapter() {
            private boolean toggleSimple = true;

            @Override
            public void componentMoved(ComponentEvent e) {
                p.setPresentation(toggleSimple);
                toggleSimple = !toggleSimple;
            }
        });
        f.setVisible(true);
    }
}
