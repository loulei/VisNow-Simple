/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.geometries.gui.TransparencyEditor;

import java.io.Serializable;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.DataContainer;
import pl.edu.icm.visnow.datasets.dataarrays.DataArray;
import pl.edu.icm.visnow.geometries.events.ColorListener;
import pl.edu.icm.visnow.geometries.events.ColorMapChangeListener;
import pl.edu.icm.visnow.geometries.parameters.TransparencyParams;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 */


//TODO opis osi poziomej w edytorze
//todo range slider obcinania 
//remap histogramu
public class TransparencyEditor extends javax.swing.JPanel implements Serializable
{

   private static final int HISTO_LENGTH = 2560;
   private float[] transp = new float[256];
   private float scale = 1.f;
   private int bgrThreshold = 0;
   private float[] histo;
   private float max = 0, min = 100;
   private float low = 0, up = 100;
   private TransparencyParams params = new TransparencyParams();
   private DataContainer inContainer = null;
   private DataArray da = null;

   /**
    * Creates new form PrefsDataGraph
    */
   public TransparencyEditor()
   {
      initComponents();
      dataComponentSelector.setAddNullComponent(true);
      dataComponentSelector.setStartNull(true);
      for (int i = 0; i < 256; i++)
         transp[i] = .0039f * i;
      histogramGraphPanel.setTransp(transp);
      transparencyDisplayPanel.setTransp(transp);
      histogramGraphPanel.setChangeListener(new ChangeListener()
      {
         @Override
         public void stateChanged(ChangeEvent e)
         {
            params.setMap(getTransp());
         }
      });
      histogramGraphPanel.setImmediateChangeListener(transparencyDisplayPanel.getImmediateRepaintListener());
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
    * code. The content of this method is always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        scaleSlider = new javax.swing.JSlider();
        backgroundSlider = new javax.swing.JSlider();
        transparencyDisplayPanel = new pl.edu.icm.visnow.geometries.gui.TransparencyEditor.TransparencyDisplayPanel();
        histogramGraphPanel = new pl.edu.icm.visnow.geometries.gui.TransparencyEditor.HistogramGraphPanel();
        jPanel3 = new javax.swing.JPanel();
        transpRangeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider();
        dataComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        jPanel2 = new javax.swing.JPanel();
        xResetButton = new javax.swing.JButton();
        minusXResetButton = new javax.swing.JButton();
        absXResetButton = new javax.swing.JButton();
        minusAbsXResetButton = new javax.swing.JButton();
        comb1Button = new javax.swing.JButton();
        comb1Spinner = new javax.swing.JSpinner();
        comb2Button = new javax.swing.JButton();
        comb2Spinner = new javax.swing.JSpinner();

        setMaximumSize(new java.awt.Dimension(2147483647, 400));
        setMinimumSize(new java.awt.Dimension(150, 400));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(150, 400));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        scaleSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        scaleSlider.setToolTipText("<html>overall opacity slider<p>drag to increase/decrease global transparency</html>");
        scaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel1.add(scaleSlider, gridBagConstraints);

        backgroundSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        backgroundSlider.setMajorTickSpacing(50);
        backgroundSlider.setMaximum(255);
        backgroundSlider.setMinorTickSpacing(2);
        backgroundSlider.setToolTipText("drag to make low data values fully transparent");
        backgroundSlider.setValue(0);
        backgroundSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                backgroundSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(backgroundSlider, gridBagConstraints);

        org.jdesktop.layout.GroupLayout transparencyDisplayPanelLayout = new org.jdesktop.layout.GroupLayout(transparencyDisplayPanel);
        transparencyDisplayPanel.setLayout(transparencyDisplayPanelLayout);
        transparencyDisplayPanelLayout.setHorizontalGroup(
            transparencyDisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 224, Short.MAX_VALUE)
        );
        transparencyDisplayPanelLayout.setVerticalGroup(
            transparencyDisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 24, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 10);
        jPanel1.add(transparencyDisplayPanel, gridBagConstraints);

        org.jdesktop.layout.GroupLayout histogramGraphPanelLayout = new org.jdesktop.layout.GroupLayout(histogramGraphPanel);
        histogramGraphPanel.setLayout(histogramGraphPanelLayout);
        histogramGraphPanelLayout.setHorizontalGroup(
            histogramGraphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 224, Short.MAX_VALUE)
        );
        histogramGraphPanelLayout.setVerticalGroup(
            histogramGraphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 180, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 10);
        jPanel1.add(histogramGraphPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel3.setMaximumSize(new java.awt.Dimension(2147483647, 100));
        jPanel3.setVerifyInputWhenFocusTarget(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        transpRangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "mapped data range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        transpRangeSlider.setMaximumSize(new java.awt.Dimension(2147483647, 64));
        transpRangeSlider.setMinimumSize(new java.awt.Dimension(96, 64));
        transpRangeSlider.setPreferredSize(new java.awt.Dimension(150, 64));
        transpRangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transpRangeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(transpRangeSlider, gridBagConstraints);

        dataComponentSelector.setOpaque(true);
        dataComponentSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dataComponentSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(dataComponentSelector, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel3, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "predefined transparency maps", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setLayout(new java.awt.GridLayout(2, 4));

        xResetButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        xResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/trx.png"))); // NOI18N
        xResetButton.setToolTipText(" linearly increasing transparency"); // NOI18N
        xResetButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        xResetButton.setMaximumSize(new java.awt.Dimension(40, 20));
        xResetButton.setMinimumSize(new java.awt.Dimension(20, 10));
        xResetButton.setPreferredSize(new java.awt.Dimension(36, 20));
        xResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xResetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(xResetButton);

        minusXResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/tr-x.png"))); // NOI18N
        minusXResetButton.setToolTipText("linearly decreasing transparency"); // NOI18N
        minusXResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusXResetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(minusXResetButton);

        absXResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/trabsx.png"))); // NOI18N
        absXResetButton.setToolTipText("transparency proportional to absolute value"); // NOI18N
        absXResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absXResetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(absXResetButton);

        minusAbsXResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/trinvabsx.png"))); // NOI18N
        minusAbsXResetButton.setToolTipText(" transparency inversely proportional to absolute value"); // NOI18N
        minusAbsXResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusAbsXResetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(minusAbsXResetButton);

        comb1Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/comb1.png"))); // NOI18N
        comb1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comb1ButtonActionPerformed(evt);
            }
        });
        jPanel2.add(comb1Button);

        comb1Spinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));
        comb1Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                comb1SpinnerStateChanged(evt);
            }
        });
        jPanel2.add(comb1Spinner);

        comb2Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/geometries/gui/TransparencyEditor/comb2.png"))); // NOI18N
        comb2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comb2ButtonActionPerformed(evt);
            }
        });
        jPanel2.add(comb2Button);

        comb2Spinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));
        comb2Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                comb2SpinnerStateChanged(evt);
            }
        });
        jPanel2.add(comb2Spinner);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void backgroundSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_backgroundSliderStateChanged
   {//GEN-HEADEREND:event_backgroundSliderStateChanged
      bgrThreshold = backgroundSlider.getValue();
      histogramGraphPanel.setBgrThreshold(bgrThreshold);
      transparencyDisplayPanel.setBgrThreshold(bgrThreshold);
      params.setAdjusting(backgroundSlider.getValueIsAdjusting());
      params.setMap(getTransp());
   }//GEN-LAST:event_backgroundSliderStateChanged

private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
   scale = .01f * scaleSlider.getValue();
   histogramGraphPanel.setScale(scale);
   transparencyDisplayPanel.setScale(scale);
   params.setAdjusting(scaleSlider.getValueIsAdjusting());
   params.setMap(getTransp());
}//GEN-LAST:event_scaleSliderStateChanged

private void xResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xResetButtonActionPerformed
   for (int i = 0; i < 256; i++)
      transp[i] = .0039f * i;
   histogramGraphPanel.setTransp(transp);
   transparencyDisplayPanel.setTransp(transp);
   params.setMap(getTransp());
}//GEN-LAST:event_xResetButtonActionPerformed

private void minusXResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusXResetButtonActionPerformed
   for (int i = 0; i < 256; i++)
      transp[i] = .0039f * (255 - i);
   histogramGraphPanel.setTransp(transp);
   transparencyDisplayPanel.setTransp(transp);
   params.setMap(getTransp());
}//GEN-LAST:event_minusXResetButtonActionPerformed

private void absXResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absXResetButtonActionPerformed
   for (int i = 0; i < 128; i++)
      transp[128 + i] = transp[127 - i] = .0078f * i;
   histogramGraphPanel.setTransp(transp);
   transparencyDisplayPanel.setTransp(transp);
   params.setMap(getTransp());
}//GEN-LAST:event_absXResetButtonActionPerformed

private void minusAbsXResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusAbsXResetButtonActionPerformed
   for (int i = 0; i < 128; i++)
      transp[128 + i] = transp[127 - i] = .0078f * (127 - i);
   histogramGraphPanel.setTransp(transp);
   transparencyDisplayPanel.setTransp(transp);
   params.setMap(getTransp());
}//GEN-LAST:event_minusAbsXResetButtonActionPerformed

   private void comb1ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comb1ButtonActionPerformed
   {//GEN-HEADEREND:event_comb1ButtonActionPerformed
      int n = (Integer) comb1Spinner.getValue();
      double d = 2 * n * Math.PI / (transp.length - 1.);
      for (int i = 0; i < transp.length; i++)
      {
         float u = (float) ((1 + Math.cos(i * d)) / 2);
         transp[i] = u * u * u;
      }
      histogramGraphPanel.setTransp(transp);
      transparencyDisplayPanel.setTransp(transp);
      params.setMap(getTransp());
   }//GEN-LAST:event_comb1ButtonActionPerformed

   private void comb2ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comb2ButtonActionPerformed
   {//GEN-HEADEREND:event_comb2ButtonActionPerformed
      int n = (Integer) comb2Spinner.getValue();
      double d = 2 * n * Math.PI / (transp.length - 1.);
      for (int i = 0; i < transp.length; i++)
      {
         float u = (float) ((1 - Math.cos(i * d)) / 2);
         transp[i] = u * u * u;
      }
      histogramGraphPanel.setTransp(transp);
      transparencyDisplayPanel.setTransp(transp);
      params.setMap(getTransp());
   }//GEN-LAST:event_comb2ButtonActionPerformed

   private void comb1SpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_comb1SpinnerStateChanged
   {//GEN-HEADEREND:event_comb1SpinnerStateChanged
      int n = (Integer) comb1Spinner.getValue();
      double d = 2 * n * Math.PI / (transp.length - 1.);
      for (int i = 0; i < transp.length; i++)
      {
         float u = (float) ((1 + Math.cos(i * d)) / 2);
         transp[i] = u * u * u;
      }
      histogramGraphPanel.setTransp(transp);
      transparencyDisplayPanel.setTransp(transp);
      params.setMap(getTransp());
   }//GEN-LAST:event_comb1SpinnerStateChanged

   private void comb2SpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_comb2SpinnerStateChanged
   {//GEN-HEADEREND:event_comb2SpinnerStateChanged
      int n = (Integer) comb2Spinner.getValue();
      double d = 2 * n * Math.PI / (transp.length - 1.);
      for (int i = 0; i < transp.length; i++)
      {
         float u = (float) ((1 - Math.cos(i * d)) / 2);
         transp[i] = u * u * u;
      }
      histogramGraphPanel.setTransp(transp);
      transparencyDisplayPanel.setTransp(transp);
      params.setMap(getTransp());
   }//GEN-LAST:event_comb2SpinnerStateChanged

   private void dataComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_dataComponentSelectorStateChanged
   {//GEN-HEADEREND:event_dataComponentSelectorStateChanged
      if(dataComponentSelector.getComponent() == params.getComponent())
          return;
      updateComponent();
   }//GEN-LAST:event_dataComponentSelectorStateChanged

   private void transpRangeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_transpRangeSliderStateChanged
   {//GEN-HEADEREND:event_transpRangeSliderStateChanged
      low = transpRangeSlider.getLow();
      up  = transpRangeSlider.getUp();
      updateBgHistogram();
      histogramGraphPanel.setMinMax(low, up);
      histogramGraphPanel.repaint();
      params.setAdjusting(transpRangeSlider.isAdjusting());
      params.setActive(false);
      params.setDataLow(low);
      params.setDataUp(up);
      params.setActive(true);
   }//GEN-LAST:event_transpRangeSliderStateChanged

   public void setDataRange(float dmin, float dmax)
   {
      low = min = dmin;
      up = max = dmax;
      transpRangeSlider.setParams(min, max, low, up);
      updateBgHistogram();
      histogramGraphPanel.setMinMax(low, up);
      histogramGraphPanel.repaint();
   }

   public int[] getTransp()
   {
      int[] out = new int[256];
      for (int i = 0; i < 256; i++)
      {
         if (i < bgrThreshold)
            out[i] = 0;
         else
            out[i] = (int) (255 * scale * transp[i]);
         if (out[i] > 255)
            out[i] = 255;
      }
      return out;
   }

   public float getLow()
   {
      return low;
   }

   public float getUp()
   {
      return up;
   }

   public float getScale()
   {
      return scale;
   }

   public int getThreshold()
   {
      return bgrThreshold;
   }

   public void setScale(int scale)
   {
      scaleSlider.setValue(scale);
   }

   public ColorListener getColorListener()
   {
      return transparencyDisplayPanel.getColorListener();
   }

   public ColorMapChangeListener getColorMapChangeListener()
   {
      return transparencyDisplayPanel.getColorMapChangeListener();
   }
   
      public int getBgrThreshold()
   {
      return bgrThreshold;
   }

   public void setBgHistogram(float[] histo)
   {
      this.histo = histo;
      updateBgHistogram();
   }

   private void updateComponentHistogram()
   {
      histo = new float[HISTO_LENGTH];
      for (int i = 0; i < HISTO_LENGTH; i++)
         histo[i] = 0;
      if (da == null)
         return;
      if (min >= max - .001f)
      {
         float med = .5f * (min + max);
         min = med - .0005f;
         max = med + .0005f;
      }
      float d = (HISTO_LENGTH - 1) / (max - min);
      int n = da.getNData();
      int vl = da.getVeclen();
      double v;
      int tIndex;
      switch (da.getType())
      {
         case DataArray.FIELD_DATA_BYTE:
            byte[] bData = da.getBData();
            if (bData.length < n * vl)
               break;
            for (int i = 0; i < n; i++)
            {
               if (vl == 1)
                  v = 0xff & bData[i];
               else
               {
                  v = 0;
                  for (int j = 0, k = vl * i; j < vl; j++, k++)
                     v += (0xff & bData[k]) * (0xff & bData[k]);
                  v = Math.sqrt(v);
               }
               tIndex = (int) (d * (v - low));
               if (tIndex < 0)
                  tIndex = 0;
               if (tIndex > HISTO_LENGTH - 1)
                  tIndex = HISTO_LENGTH - 1;
               histo[tIndex] += 1;
            }
            break;
         case DataArray.FIELD_DATA_SHORT:
            short[] sData = da.getSData();
            if (sData.length < n * vl)
               break;
            for (int i = 0; i < n; i++)
            {
               if (vl == 1)
                  v = sData[i];
               else
               {
                  v = 0;
                  for (int j = 0, k = vl * i; j < vl; j++, k++)
                     v += sData[k] * sData[k];
                  v = Math.sqrt(v);
               }
               tIndex = (int) (d * (v - low));
               if (tIndex < 0)
                  tIndex = 0;
               if (tIndex > HISTO_LENGTH - 1)
                  tIndex = HISTO_LENGTH - 1;
               histo[tIndex] += 1;
            }
            break;
         case DataArray.FIELD_DATA_INT:
            int[] iData = da.getIData();
            if (iData.length < n * vl)
               break;
            for (int i = 0; i < n; i++)
            {
               if (vl == 1)
                  v = iData[i];
               else
               {
                  v = 0;
                  for (int j = 0, k = vl * i; j < vl; j++, k++)
                     v += iData[k] * iData[k];
                  v = Math.sqrt(v);
               }
               tIndex = (int) (d * (v - low));
               if (tIndex < 0)
                  tIndex = 0;
               if (tIndex > HISTO_LENGTH - 1)
                  tIndex = HISTO_LENGTH - 1;
               histo[tIndex] += 1;
            }
            break;
         case DataArray.FIELD_DATA_FLOAT:
            float[] fData = da.getFData();
            if (fData.length < n * vl)
               break;
            for (int i = 0; i < n; i++)
            {
               if (vl == 1)
                  v = fData[i];
               else
               {
                  v = 0;
                  for (int j = 0, k = vl * i; j < vl; j++, k++)
                     v += fData[k] * fData[k];
                  v = Math.sqrt(v);
               }
               tIndex = (int) (d * (v - low));
               if (tIndex < 0)
                  tIndex = 0;
               if (tIndex > HISTO_LENGTH - 1)
                  tIndex = HISTO_LENGTH - 1;
               histo[tIndex] += 1;
            }
            break;
         case DataArray.FIELD_DATA_DOUBLE:
            double[] dData = da.getDData();
            if (dData.length < n * vl)
               break;
            for (int i = 0; i < n; i++)
            {
               if (vl == 1)
                  v = dData[i];
               else
               {
                  v = 0;
                  for (int j = 0, k = vl * i; j < vl; j++, k++)
                     v += dData[k] * dData[k];
                  v = Math.sqrt(v);
               }
               tIndex = (int) (d * (v - low));
               if (tIndex < 0)
                  tIndex = 0;
               if (tIndex > HISTO_LENGTH - 1)
                  tIndex = HISTO_LENGTH - 1;
               histo[tIndex] += 1;
            }
            break;
      }
   }

   private void updateBgHistogram()
   {
      float[] bgHist = new float[255];
      if (histo != null)
      {
         float dh = histo.length / (max - min);
         int ilow = (int) ((low - min) * dh);
         int iup = (int) ((up - min) * dh);
         if (ilow < 0)
            ilow = 0;
         if (iup >= histo.length)
            iup = histo.length - 1;
         if (ilow == iup)
         {
            if (ilow > 0)
               ilow -= 1;
            else
               iup += 1;
         }
         float d = (float) bgHist.length / (iup - ilow);
         for (int i = 0; i < bgHist.length; i++)
            bgHist[i] = 0;
         for (int i = ilow; i < iup; i++)
         {
            int k = (int) (d * (i - ilow));
            if (k < 0)
               k = 0;
            if (k > 255)
               k = 255;
            bgHist[k] += histo[i];
         }
         histogramGraphPanel.setBgHist(bgHist);
      }
   }
   
   public void setStartNullTransparencyComponent(boolean startNull)
   {
      dataComponentSelector.setStartNull(startNull);
   }

   public void setParams(TransparencyParams params)
   {
      this.params = params;
   }

   public void setDataContainer(DataContainer inContainer)
   {
      this.inContainer = inContainer;
      dataComponentSelector.setDataSchema(inContainer.getDataSchema());
      updateComponent();
   }
   
   private void updateComponent() {
      params.setActive(false);
      params.setComponent(dataComponentSelector.getComponent());
      da = inContainer.getData(dataComponentSelector.getComponent());
      if (da != null)
      {
         setDataRange(da.getMinv(), da.getMaxv());
         histogramGraphPanel.setMinMax(low, up);
         histogramGraphPanel.setCompName(da.getName());
      }
      updateComponentHistogram();
      updateBgHistogram();
      params.setMap(getTransp());
      params.setDataLow(low);
      params.setDataUp(up);
      params.setActive(true);
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton absXResetButton;
    private javax.swing.JSlider backgroundSlider;
    private javax.swing.JButton comb1Button;
    private javax.swing.JSpinner comb1Spinner;
    private javax.swing.JButton comb2Button;
    private javax.swing.JSpinner comb2Spinner;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector dataComponentSelector;
    private pl.edu.icm.visnow.geometries.gui.TransparencyEditor.HistogramGraphPanel histogramGraphPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton minusAbsXResetButton;
    private javax.swing.JButton minusXResetButton;
    private javax.swing.JSlider scaleSlider;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider transpRangeSlider;
    private pl.edu.icm.visnow.geometries.gui.TransparencyEditor.TransparencyDisplayPanel transparencyDisplayPanel;
    private javax.swing.JButton xResetButton;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        final TransparencyEditor p = new TransparencyEditor();
        f.add(p);
        f.pack();
        f.setVisible(true);
    }    

}
