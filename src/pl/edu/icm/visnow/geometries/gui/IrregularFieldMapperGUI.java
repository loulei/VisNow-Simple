//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.geometries.gui;

import java.awt.CardLayout;
import java.awt.Insets;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.CellSet;
import pl.edu.icm.visnow.datasets.IrregularField;
import pl.edu.icm.visnow.geometries.objects.SignalingTransform3D;
import pl.edu.icm.visnow.geometries.parameters.IrregularFieldDisplayParams;
import pl.edu.icm.visnow.lib.gui.*;
import pl.edu.icm.visnow.lib.utils.SwingInstancer;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class IrregularFieldMapperGUI extends javax.swing.JPanel implements ChangeFiringGUI
{

   private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(IrregularFieldMapperGUI.class);
   protected IrregularField inField = null;
   protected IrregularFieldPresentationGUI fieldPresentationGUI = null;
   protected Vector<CellSetPresentationGUI> cellSetPresentationGUIs = new Vector<CellSetPresentationGUI>();
   protected DefaultListModel cellSetListModel = new DefaultListModel();
   protected IrregularFieldDisplayParams params = null;
   protected int iSet = 0;
   private boolean simple = true;

   /** Creates new form FieldMapperGUI */
   public IrregularFieldMapperGUI()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        cellSetList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pickIndicatorCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        pane = new javax.swing.JPanel();
        irregularFieldPresentationGUI = new pl.edu.icm.visnow.geometries.gui.IrregularFieldPresentationGUI();

        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(50, 100));
        jScrollPane2.setOpaque(false);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(50, 100));

        cellSetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                cellSetListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(cellSetList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(jScrollPane2, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("add");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel1, gridBagConstraints);

        pickIndicatorCombo.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        pickIndicatorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nothing", "box", "lines", "surface" }));
        pickIndicatorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickIndicatorComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        jPanel1.add(pickIndicatorCombo, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("to indicate pick");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        pane.setLayout(new java.awt.CardLayout());

        irregularFieldPresentationGUI.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pane.add(irregularFieldPresentationGUI, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void pickIndicatorComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pickIndicatorComboActionPerformed
   {//GEN-HEADEREND:event_pickIndicatorComboActionPerformed
      if (params != null)
         params.setPickIndicator(pickIndicatorCombo.getSelectedIndex());
   }//GEN-LAST:event_pickIndicatorComboActionPerformed

   private void cellSetListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_cellSetListValueChanged
   {//GEN-HEADEREND:event_cellSetListValueChanged
      ((CardLayout) (pane.getLayout())).show
           (pane, (String) cellSetList.getSelectedValue());   
   }//GEN-LAST:event_cellSetListValueChanged

   public void setInFieldDisplayData(IrregularField inFld, IrregularFieldDisplayParams p)
   {
      inField = inFld;
      params = p;
      log.debug("start new params");
      SwingInstancer.swingRunAndWait(new Runnable()
      {
         public void run()
         {
            if (params != null)
            {
               cellSetPresentationGUIs.clear();
               pane.removeAll();
               cellSetListModel.clear();
               params.setActive(false);
               if (inField.getNCellSets() > 1)
               {
                  fieldPresentationGUI = new IrregularFieldPresentationGUI(inField, params);
                  fieldPresentationGUI.setPresentation(simple);
                  pane.add(fieldPresentationGUI, "field (global settings)");
                  cellSetListModel.addElement("field (global settings)");
               }
               for (iSet = 0; iSet < inField.getNCellSets(); iSet++)
               {
                  log.debug("setting GUI for CS " + iSet);
                  CellSet set = inField.getCellSet(iSet);

                  CellSetPresentationGUI presentationGUI =
                          new CellSetPresentationGUI(set, inField, params.getCellSetDisplayParameters(iSet));
                  presentationGUI.setPresentation(simple);
                  cellSetPresentationGUIs.add(presentationGUI);
                  String name = set.getName();
                  if (name == null || name.length() < 1)
                     name = "component_" + iSet;
                  pane.add(presentationGUI, name);
                  cellSetListModel.addElement(name);
               }
               cellSetList.setModel(cellSetListModel);
               params.setActive(true);
            }
         }
      });
   }
   /**
    * Utility field holding list of ChangeListeners.
    */
   protected transient ArrayList<ChangeListener> changeListenerList = new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove(listener);
   }

   public synchronized void clearChangeListeners()
   {
      changeListenerList.clear();
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   public void fireStateChanged()
   {
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener listener : changeListenerList)
         listener.stateChanged(e);
   }

   public IrregularFieldPresentationGUI getIrregularFieldPresentationGUI()
   {
      return irregularFieldPresentationGUI;
   }

   public void setSignalingTransform(SignalingTransform3D sigTrans)
   {
      if (inField.getNCellSets() > 1)
         fieldPresentationGUI.setSignalingTransform(sigTrans);
      for (CellSetPresentationGUI cellSetPresentationGUI : cellSetPresentationGUIs)
         cellSetPresentationGUI.setSignalingTransform(sigTrans);
   }

   public void updateCellSetList()
   {
      SwingInstancer.swingRunAndWait(new Runnable()
      {
         @Override
         public void run()
         {
            params.setActive(false);
            cellSetListModel.clear();
            if (inField.getNCellSets() > 1)
               cellSetListModel.addElement("field (global settings)");
            for (iSet = 0; iSet < inField.getNCellSets(); iSet++)
               cellSetListModel.addElement(inField.getCellSet(iSet).getName());
            cellSetList.setModel(cellSetListModel);
            for (CellSetPresentationGUI cellSetPresentationGUI : cellSetPresentationGUIs)
               cellSetPresentationGUI.setPresentation(simple);
            params.setActive(true);
        }
      });
   }
   
   public void setPresentation(boolean simple)
   {
      this.simple = simple;
      irregularFieldPresentationGUI.setPresentation(simple);
      if (fieldPresentationGUI != null)
         fieldPresentationGUI.setPresentation(simple);
      for (CellSetPresentationGUI cellSetPresentationGUI : cellSetPresentationGUIs)
         cellSetPresentationGUI.setPresentation(simple);
      validate();
      repaint();
   }
   
   public void displayCellSetPresentationGui(String cellSetName)                                    
   {           
      cellSetList.setSelectedValue(cellSetName, true);
//      ((CardLayout) (pane.getLayout())).show(pane, cellSetName);   
   }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList cellSetList;
    private pl.edu.icm.visnow.geometries.gui.IrregularFieldPresentationGUI irregularFieldPresentationGUI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pane;
    private javax.swing.JComboBox pickIndicatorCombo;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        UIManager.getDefaults().put("TabbedPane.contentBorderInsets", new Insets(4,0,0,0));
        
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        final IrregularFieldMapperGUI p = new IrregularFieldMapperGUI();
        f.add(p);
        f.pack();
        f.addComponentListener(new ComponentAdapter() {
            private boolean toggleSimple = true;

            @Override
            public void componentMoved(ComponentEvent e) {
                p.setPresentation(toggleSimple);
                toggleSimple = !toggleSimple;
            }
        });
        f.setVisible(true);
    }

}
