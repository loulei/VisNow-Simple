/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.geometries.gui;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import pl.edu.icm.visnow.datasets.DataSchema;
import pl.edu.icm.visnow.datasets.dataarrays.DataArraySchema;
import pl.edu.icm.visnow.geometries.parameters.ColorComponentParams;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class TextureComponentPanel extends javax.swing.JPanel
{
   private ColorComponentParams params = null;
   private DataSchema schema = null;

   /** Creates new form ColorComponentPanel */
   public TextureComponentPanel()
   {
      initComponents();
      compSelector.setAddNullComponent(false);
   }

   public void setParams(ColorComponentParams params)
   {
      this.params = params;
      params.setActive(false);
      compSelector.setComponent(params.getDataComponent());
      if (schema != null)
      {
      DataArraySchema s = schema.getSchema(compSelector.getComponent());
         if (s != null)
         {
            dataRangeSlider.setMin(s.getMinv());
            dataRangeSlider.setMax(s.getMaxv());
         }
      }
      dataRangeSlider.setLow(params.getDataMin());
      dataRangeSlider.setUp(params.getDataMax());
      params.setActive(true);
   }

   public void setData(DataSchema schema)
   {
      this.schema = schema;
      compSelector.setDataSchema(schema);
      updateComponent();
   }

   private void updateComponent()
   {
      if (params == null)
         return;
      params.setActive(false);
      DataArraySchema s = schema.getSchema(compSelector.getComponent());
      if (s != null)
         dataRangeSlider.setParams(s.getMinv(), s.getMaxv(), s.getMinv(), s.getMaxv());
      else
         dataRangeSlider.setParams(0,100,0,100);
      //params.setDataComponent(compSelector.getComponent());
      //params.setDataMinMax(dataRangeSlider.getLow(), dataRangeSlider.getUp());
      params.setDataComponent(compSelector.getComponent(), dataRangeSlider.getLow(), dataRangeSlider.getUp());
      params.setActive(true);
      params.fireStateChanged();
   }
   
   public void addExtraItems(String[] names, int[] values)
   {
      compSelector.addExtraItems(names, values);
   }
   
   public void setSliderTitle(String s)
   {
      dataRangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(s));
   }
   

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        wrapBox = new javax.swing.JCheckBox();
        dataRangeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "t component", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        setLayout(new java.awt.BorderLayout());

        compSelector.setName("compSelector"); // NOI18N
        compSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compSelectorStateChanged(evt);
            }
        });
        add(compSelector, java.awt.BorderLayout.NORTH);

        wrapBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        wrapBox.setText("wrap");
        wrapBox.setName("wrapBox"); // NOI18N
        wrapBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wrapBoxActionPerformed(evt);
            }
        });
        add(wrapBox, java.awt.BorderLayout.SOUTH);

        dataRangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        dataRangeSlider.setName("dataRangeSlider"); // NOI18N
        dataRangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dataRangeSliderStateChanged(evt);
            }
        });
        add(dataRangeSlider, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void compSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_compSelectorStateChanged
    {//GEN-HEADEREND:event_compSelectorStateChanged
        updateComponent();
}//GEN-LAST:event_compSelectorStateChanged

    private void wrapBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_wrapBoxActionPerformed
    {//GEN-HEADEREND:event_wrapBoxActionPerformed
       if (params == null) return;
       params.setWrap(wrapBox.isSelected());
    }//GEN-LAST:event_wrapBoxActionPerformed

   private void dataRangeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_dataRangeSliderStateChanged
   {//GEN-HEADEREND:event_dataRangeSliderStateChanged
       if (params == null) return;
       params.setDataMinMax(dataRangeSlider.getLow(), dataRangeSlider.getUp());
   }//GEN-LAST:event_dataRangeSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector compSelector;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider dataRangeSlider;
    private javax.swing.JCheckBox wrapBox;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        final TextureComponentPanel p = new TextureComponentPanel();
        f.add(p);
        f.pack();
        f.setVisible(true);
    }    
}
