/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the 
 University of Warsaw, Interdisciplinary Centre for Mathematical and 
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
package pl.edu.icm.visnow.geometries.viewer3d.eventslisteners.pick;

import java.util.EventListener;

/**
 * An abstract class derived by each object that listens to pick events ({@code Pick3DEvent}).
 * These can be both picks generated by mouse by click, by mouse by click-drag-click (so called
 * "emulated 3D pick") and by device (e.g. haptic device, so called "device 3D pick").
 * <p/>
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 * @author modified by Łukasz Czerwiński <czerwinskilukasz1 [#] gmail.com>, ICM, University of
 * Warsaw, 2013
 */
public abstract class Pick3DListener implements EventListener {

    private boolean active = true;
    /** Pick type used by a module owning this Pick3DListener */
    private PickType pickType;
    private PickTypeListener pickTypeListener = null;

    public Pick3DListener(PickType pickType) {
        this.pickType = pickType;
    }

    /**
     * Used by a module to change the pick type during runtime.
     * <p/>
     * @param pickType
     */
    public void setPickType(PickType pickType) {
        PickType previousPickType = this.pickType;
        this.pickType = pickType;
        firePickTypeChanged(previousPickType);
    }

    public PickType getPickType() {
        return pickType;
    }

    public void setActive(boolean active) {
        this.active = active;
        fireActiveChanged();
    }

    public boolean isActive() {
        return this.active;
    }

    /**
     * Called by PickObject to notify the Pick3DListener about pick event. Its only responsibility
     * is to call handlePick3D() iff Pick3DListener is active.
     * <p/>
     * @param e pick event to be passed to handlePick3D
     */
    final public void pick3DChanged(Pick3DEvent e) {
        if (active)
            handlePick3D(e);
    }

    /**
     * Handles pick event. Method specific for every module that wants to handle it.
     * <p/>
     * NOTE: Do NOT call it directly - it should be called ONLY BY
     * <code>pick3DChanged()</code>.
     * <p/>
     * @param e pick event
     */
    protected abstract void handlePick3D(Pick3DEvent e);

    /**
     * Registers PickTypeListener. It will be used to notify pointer about changes in pick types.
     * There can be only one PickTypeListener registered in the same time.
     * <p/>
     * If this method has been already called, removePickTypeListener() must be called prior to
     * second call to setPickTypeListener(). This is to avoid accidental unregistering previous
     * listener.
     * <p/>
     * @param pickTypeListener a PickTypeListener to be used by this Pick3DListener
     */
    public void setPickTypeListener(PickTypeListener pickTypeListener) {
        if (pickTypeListener == null)
            throw new IllegalArgumentException("pickTypeListener cannot be null - to remove pickTypeListener call removePickTypeListener(oldPickTypeListener)");

        if (this.pickTypeListener != null)
            throw new IllegalStateException("this.pickTypeListener should be null when calling setPickTypeListener");

        this.pickTypeListener = pickTypeListener;
        fireOnListenerSet();
    }

    /**
     * Unregisters PickTypeListener. Should be used only when removing pointer or module. Do not
     * call twice in a row - it throw and exception when no listener is registered. This is to avoid
     * accidental and unnecessary calls.
     * <p/>
     * @param pickTypeListener a PickTypeListener to be removed; it must be the same object as in
     *                         the call to setPickTypeListener()
     */
    public void removePickTypeListener(PickTypeListener pickTypeListener) {

        if (this.pickTypeListener == null)
            throw new IllegalStateException("this.pickTypeListener should be non-null when calling removePickTypeListener");

        if (this.pickTypeListener != pickTypeListener)
            throw new IllegalArgumentException("pickTypeListener does not match");

        fireOnListenerUnset();
        this.pickTypeListener = null;
    }

    /**
     * Called when a type of a pick has changed (but active - not changed).
     * <p/>
     * Called only by Pick3DListener's methods. Throws IllegalStateException when pickTypeListener
     * was not set. Consider deleting this check - maybe just do nothing on null? */
    protected void firePickTypeChanged(PickType previousPickType) {
        if (pickTypeListener != null) {

//            throw new IllegalStateException("pickTypeListener should not be null when notifying of a pick type change!");

            if (previousPickType == pickType) // no change - nothing to do
                return;

            if (isActive()) { // remove the previous pick type
                pickTypeListener.onPickTurnedOff(previousPickType);
                pickTypeListener.onPickTurnedOn(pickType);
            }
        }
    }

    /**
     * Called when active flag has changed (but pick type - not changed).
     * <p/>
     * Called only by Pick3DListener's methods. Throws IllegalStateException when pickTypeListener
     * was not set. Consider deleting this check - maybe just do nothing on null? */
    protected void fireActiveChanged() {
        if (pickTypeListener != null) {
//            throw new IllegalStateException("pickTypeListener should not be null when notifying of a pick type change!");

            if (!isActive()) { // remove the previous pick type
                pickTypeListener.onPickTurnedOff(pickType);
            } else {
                pickTypeListener.onPickTurnedOn(pickType);
            }
        }
    }

    /**
     * Called when a pickTypeListener was attached to inform it about current state.
     */
    protected void fireOnListenerSet() {
        if (isActive())
            pickTypeListener.onPickTurnedOn(pickType);
    }

    private void fireOnListenerUnset() {
        if (isActive())
            pickTypeListener.onPickTurnedOff(pickType);
    }
}
