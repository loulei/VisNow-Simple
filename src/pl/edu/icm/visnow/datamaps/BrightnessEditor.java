/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.datamaps;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class BrightnessEditor extends JPanel
{

   protected CustomizableColorMap map = new CustomizableColorMap();
   protected BufferedImage img;
   protected int brightnessCorrection = 0;
   protected int lastBrightness = 0;
   protected int lastX = 0, lastY = 0;
   protected int w = 256;
   protected int h = 14;
   protected int[] dpix = new int[w * h];
   protected String title = "";
   protected boolean adjusting = false;
   /**
    * Creates new form ColorEditor
    */
   public BrightnessEditor()
   {
      initComponents();
      setBackground(Color.LIGHT_GRAY);
      updateImage();
   }

   public CustomizableColorMap getMap()
   {
      return map;
   }

   public void setMap(CustomizableColorMap map)
   {
      this.map = map;
      updateImage();
   }
   
   public final void updateImage()
   {
      img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
      int[] colorMapLookup = map.getRGBColorTable();
      float d = colorMapLookup.length / (float)w;
      for (int i = 0; i < w; i++)
      {
         int k = colorMapLookup[(int)(d * i)];
         for (int j = 0; j < h; j++)
            dpix[i + j * w] = k;
      }
      img.setRGB(0, 0, w, h, dpix, 0, w);
      repaint();
   }
   
   public void setRGBMap()
   {
      map.setMapIndex(ColorMapManager.COLORMAP1D_RGB);
      updateImage();
   }
   
   public void setBrightness(int br)
   {
      brightnessCorrection = br;
      updateImage();
      fireStateChanged();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        colorDialog = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        colorDialog.setBackground(new java.awt.Color(134, 147, 156));
        colorDialog.setBounds(new java.awt.Rectangle(200, 200, 254, 154));
        colorDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        colorDialog.setName("colorDialog"); // NOI18N
        colorDialog.setResizable(false);
        colorDialog.setUndecorated(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMinimumSize(new java.awt.Dimension(252, 152));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(252, 152));
        jPanel1.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel2.add(jPanel1, gridBagConstraints);

        colorDialog.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setToolTipText("<html>drag  to change brightness<p>click to return to normal brightness"); // NOI18N
        setMinimumSize(new java.awt.Dimension(50, 21));
        setPreferredSize(new java.awt.Dimension(50, 21));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

   @Override
   public void paint(Graphics g)
   {
      int ww = getWidth();
      int wh = getHeight();
      g.setColor(Color.LIGHT_GRAY);
      g.fillRect(0, 0, ww, wh);
      if(this.isEnabled())
            g.drawImage(img, 3, 3, ww - 6, wh - 6, null);
        
   }

   private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
      brightnessCorrection = 0;
      map.setAdjusting(false);
      map.setFinalBrightness(brightnessCorrection / 50.f);
      updateImage();
      fireStateChanged();
   }//GEN-LAST:event_formMouseClicked

   private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
      adjusting = true;
      lastX = evt.getX();
      lastBrightness = brightnessCorrection;
   }//GEN-LAST:event_formMousePressed

   private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
      adjusting = true;
      brightnessCorrection = lastBrightness + (evt.getX() - lastX) / 4;
      if (brightnessCorrection < -30)
         brightnessCorrection = -30;
      else if (brightnessCorrection > 30)
         brightnessCorrection = 30;      
      map.setAdjusting(true);
      map.setFinalBrightness(brightnessCorrection / 50.f);
      updateImage();
      fireStateChanged();
   }//GEN-LAST:event_formMouseDragged

   private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
   {//GEN-HEADEREND:event_formMouseReleased
      adjusting = false;   
      map.setAdjusting(false);
      fireStateChanged();
   }//GEN-LAST:event_formMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JFrame colorDialog;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

   public boolean isAdjusting()
   {
      return adjusting;
   }
   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> listeners = new ArrayList<ChangeListener>();

   public void addChangeListener(ChangeListener l)
   {
      listeners.add(l);
   }

   public void removeChangeListener(ChangeListener l)
   {
      listeners.remove(l);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void fireStateChanged()
   {
      this.repaint();
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener l : listeners)
         l.stateChanged(e);
   }
   
   public float getBrightness()
   {
      return brightnessCorrection / 50.f;
   }

}
