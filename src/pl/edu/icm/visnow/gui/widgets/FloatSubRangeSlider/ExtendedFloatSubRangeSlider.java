//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.gui.widgets.ExtendedSlider;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class ExtendedFloatSubRangeSlider extends javax.swing.JPanel implements Serializable
{

   protected float min = 0;
   protected float max = 100;
   protected float low = 0;
   protected float up = 100;
   private boolean active = true;
   protected boolean adjusting = true;
   int exp = 0;
   String fmt = "%5.2f";

   /** Creates new form ExtendedFloatSubRangeSlider */
   public ExtendedFloatSubRangeSlider()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        slider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider();
        minField = new javax.swing.JTextField();
        lowField = new javax.swing.JTextField();
        upField = new javax.swing.JTextField();
        maxField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        slider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout sliderLayout = new javax.swing.GroupLayout(slider);
        slider.setLayout(sliderLayout);
        sliderLayout.setHorizontalGroup(
            sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );
        sliderLayout.setVerticalGroup(
            sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(slider, gridBagConstraints);

        minField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        minField.setText("0");
        minField.setBorder(null);
        minField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(minField, gridBagConstraints);

        lowField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        lowField.setText("0");
        lowField.setBorder(null);
        lowField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(lowField, gridBagConstraints);

        upField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        upField.setText("100");
        upField.setBorder(null);
        upField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(upField, gridBagConstraints);

        maxField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        maxField.setText("100");
        maxField.setBorder(null);
        maxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(maxField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void updateLowUp()
   {
      active = false;
      if (low < min)
         low = min;
      if (up > max)
         up = max;
      if (low > up)
         low = up;
      slider.setSilentUpdate(true);
      slider.setBottomValue(low, false);
      slider.setTopValue(up, false);
      slider.setSilentUpdate(false);
      lowField.setText(String.format(fmt, low));
      upField.setText(String.format(fmt, up));
      active = true;
   }

   private void updateMinMax()
   {
//      System.out.println("minmax");
//      VisNowCallTrace.trace();
      active = false;
      if (min > max)
         return;
      if (low < min)
         low = min;
      if (up < low)
         up = low;
      if (up > max)
         up = max;
      if (up < low)
         low = up;
      slider.setSilentUpdate(true);
      slider.setMinimum(min);
      slider.setMaximum(max);
      slider.setBottomValue(low, false);
      slider.setTopValue(up, false);
      slider.setSilentUpdate(false);
      exp = (int)(Math.log10(up - low) + 100)-100;
      if (exp > 4)
         fmt = "%4.0e";
      else if (exp > 1)
         fmt = "%.0f";
      else if (exp > -4)
         fmt = "%"+String.format(".%df", 2-exp);
      else
         fmt = "%.3e";
      lowField.setText(String.format(fmt, low));
      upField.setText(String.format(fmt, up));
      minField.setText(String.format(fmt, min));
      maxField.setText(String.format(fmt, max));

      active = true;
   }

    private void minFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minFieldActionPerformed
    {//GEN-HEADEREND:event_minFieldActionPerformed
       try
       {
          min = Float.parseFloat(minField.getText());
          max = Float.parseFloat(maxField.getText());
          updateMinMax();
          adjusting = false;
          fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }
    }//GEN-LAST:event_minFieldActionPerformed

    private void lowFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lowFieldActionPerformed
    {//GEN-HEADEREND:event_lowFieldActionPerformed
       try
       {
          low = Float.parseFloat(lowField.getText());
          updateLowUp();
          adjusting = false;
          fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }

    }//GEN-LAST:event_lowFieldActionPerformed

    private void upFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_upFieldActionPerformed
    {//GEN-HEADEREND:event_upFieldActionPerformed
       try
       {
          up = Float.parseFloat(upField.getText());
          updateLowUp();
          adjusting = false;
          fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }
       // TODO add your handling code here:
    }//GEN-LAST:event_upFieldActionPerformed

    private void maxFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maxFieldActionPerformed
    {//GEN-HEADEREND:event_maxFieldActionPerformed
       try
       {
          min = Float.parseFloat(minField.getText());
          max = Float.parseFloat(maxField.getText());
          updateMinMax();
          adjusting = false;
          fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }
    }//GEN-LAST:event_maxFieldActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderStateChanged
    {//GEN-HEADEREND:event_sliderStateChanged
       adjusting = slider.isAdjusting();
       low = slider.getBottomValue();
       up = slider.getTopValue();
       lowField.setText(String.format(fmt, low));
       upField.setText(String.format(fmt, up));
       fireStateChanged();
    }//GEN-LAST:event_sliderStateChanged

   public boolean isAdjusting()
   {
      return adjusting;
   }

   public void setAdjusting(boolean adjusting)
   {
      this.adjusting = adjusting;
   }

   public float getLow()
   {
      return low;
   }

   public void setLow(float low)
   {
      this.low = low;
      updateLowUp();
   }

   public float getMax()
   {
      return max;
   }

   public void setMax(float max)
   {
      this.max = max;
      updateMinMax();
   }

   public float getMin()
   {
      return min;
   }

   public void setMin(float min)
   {
      this.min = min;
      updateMinMax();
   }

   public float getUp()
   {
      return up;
   }

   public void setUp(float up)
   {
      this.up = up;
      updateLowUp();
   }

   public void setMinMax(float min, float max)
   {
      this.min = min;
      this.max = max;
      updateMinMax();
   }

   public void setParams(float min, float max, float low, float up)
   {
      if (min > low || low > up || up > max || low == up)
         return;
      active = false;
      this.min = min;
      this.max = max;
      this.low = low;
      this.up = up;
      updateMinMax();
      active = true;
   }
   
   @Override
   public String toString()
   {
      return slider.toString();
   }   

   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList =
           new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove(listener);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   public void fireStateChanged()
   {
      if (active)
      {
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener listener : changeListenerList)
         listener.stateChanged(e);
      }
   }
   
   private boolean enabled = true;
   
   @Override
   public void setEnabled(boolean enabled) {
       super.setEnabled(enabled);
       this.enabled = enabled;
       slider.setEnabled(enabled);
       minField.setEnabled(enabled);
       lowField.setEnabled(enabled);
       upField.setEnabled(enabled);
       maxField.setEnabled(enabled);
   }
   
   @Override
   public boolean isEnabled() {
       return this.enabled;
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTextField lowField;
    protected javax.swing.JTextField maxField;
    protected javax.swing.JTextField minField;
    protected pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.FloatSubRangeSlider slider;
    protected javax.swing.JTextField upField;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the active
     */
    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.setActive(active, true);        
    }
    
    /**
     * @param active the active to set
     */
    public void setActive(boolean active, boolean fire) {
        this.active = active;
        if(active && fire)
            fireStateChanged();
    }
    
    public static void main(String[] args) {
        VisNow.initLogging(true);
        Locale.setDefault(VisNow.LOCALE);
        JFrame f = new JFrame();
        f.add(new ExtendedFloatSubRangeSlider());
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        f.setLocation(600, 300);
        f.pack();
        f.setVisible(true);
    }
}
