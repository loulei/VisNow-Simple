/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.gui.widgets.SubRangeSlider;

import java.awt.Font;
import java.io.Serializable;
import java.util.ArrayList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class ExtendedSubRangeSlider extends javax.swing.JPanel implements Serializable
{

   protected int min = 0;
   protected int max = 100;
   protected int low = 0;
   protected int up = 100;
   protected float rMin = 0.f;
   protected float rMax = 1.f;
   protected float delta = .001f;
   protected int l = 0;
   protected int u = 1000;
   protected int ld = 100;
   protected int dec = 4;
   protected int ddec = 3;
   protected String form = "%" + dec + "f";
   protected String lform = "%" + (dec - 1) + "f";
   protected Font textFont = new Font("Dialog", 0, 10);
   protected boolean active = true;
   protected boolean adjusting = true;
   protected boolean showingFields = true;

   /** Creates new form ExtendedSubRangeSlider */
   public ExtendedSubRangeSlider()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      slider = new pl.edu.icm.visnow.gui.widgets.SubRangeSlider.SubRangeSlider();
      jPanel1 = new javax.swing.JPanel();
      minField = new javax.swing.JTextField();
      lowField = new javax.swing.JTextField();
      upField = new javax.swing.JTextField();
      maxField = new javax.swing.JTextField();

      setBorder(javax.swing.BorderFactory.createTitledBorder(""));
      setLayout(new java.awt.BorderLayout());

      slider.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
      slider.setPaintLabels(true);
      slider.setPaintTicks(true);
      slider.setPreferredSize(new java.awt.Dimension(200, 45));
      slider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            sliderStateChanged(evt);
         }
      });

      javax.swing.GroupLayout sliderLayout = new javax.swing.GroupLayout(slider);
      slider.setLayout(sliderLayout);
      sliderLayout.setHorizontalGroup(
         sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 269, Short.MAX_VALUE)
      );
      sliderLayout.setVerticalGroup(
         sliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 46, Short.MAX_VALUE)
      );

      add(slider, java.awt.BorderLayout.CENTER);

      jPanel1.setLayout(new java.awt.GridLayout(1, 0));

      minField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
      minField.setText("0");
      minField.setBorder(null);
      minField.setMinimumSize(new java.awt.Dimension(20, 11));
      minField.setPreferredSize(new java.awt.Dimension(50, 13));
      minField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            minFieldActionPerformed(evt);
         }
      });
      jPanel1.add(minField);

      lowField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
      lowField.setText("0");
      lowField.setBorder(null);
      lowField.setMinimumSize(new java.awt.Dimension(20, 11));
      lowField.setPreferredSize(new java.awt.Dimension(50, 13));
      lowField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            lowFieldActionPerformed(evt);
         }
      });
      jPanel1.add(lowField);

      upField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
      upField.setText("100");
      upField.setBorder(null);
      upField.setMinimumSize(new java.awt.Dimension(20, 11));
      upField.setPreferredSize(new java.awt.Dimension(50, 13));
      upField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            upFieldActionPerformed(evt);
         }
      });
      jPanel1.add(upField);

      maxField.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
      maxField.setText("100");
      maxField.setBorder(null);
      maxField.setMinimumSize(new java.awt.Dimension(20, 11));
      maxField.setPreferredSize(new java.awt.Dimension(50, 13));
      maxField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            maxFieldActionPerformed(evt);
         }
      });
      jPanel1.add(maxField);

      add(jPanel1, java.awt.BorderLayout.SOUTH);
   }// </editor-fold>//GEN-END:initComponents

    private void minFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minFieldActionPerformed
    {//GEN-HEADEREND:event_minFieldActionPerformed
       try
       {
          updateMin(Integer.parseInt(minField.getText()));
       } catch (Exception e)
       {
          active = true;
       }
    }//GEN-LAST:event_minFieldActionPerformed

    private void lowFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lowFieldActionPerformed
    {//GEN-HEADEREND:event_lowFieldActionPerformed
       try
       {
          active = false;
          low = Integer.parseInt(lowField.getText());
          if (low < min)
             low = min;
          if (low >up)
             low = up;
          slider.setBottomValue(low, true);
          slider.setTopValue(up, true);
          active = true;
          fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }
       
    }//GEN-LAST:event_lowFieldActionPerformed

    private void upFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_upFieldActionPerformed
    {//GEN-HEADEREND:event_upFieldActionPerformed
       try
       {
          active = false;
          up = Integer.parseInt(upField.getText());
          if (low < min)
             low = min;
          if (low >up)
             low = up;
          slider.setBottomValue(low, true);
          slider.setTopValue(up, true);
          active = true;
       fireStateChanged();
       } catch (Exception e)
       {
          active = true;
       }
    }//GEN-LAST:event_upFieldActionPerformed

    private void maxFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maxFieldActionPerformed
    {//GEN-HEADEREND:event_maxFieldActionPerformed
       try
       {
          updateMax(Integer.parseInt(maxField.getText()));
       } catch (Exception e)
       {
       }
    }//GEN-LAST:event_maxFieldActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliderStateChanged
    {//GEN-HEADEREND:event_sliderStateChanged
       adjusting = slider.isAdjusting();
       low = slider.getBottomValue();
       lowField.setText(""+low);
       up = slider.getTopValue();
       upField.setText(""+up);
       fireStateChanged();
    }//GEN-LAST:event_sliderStateChanged

   private void updateMax(int max) throws Exception
   {
      if (min > max)
         return;
      active = false;
      int upp = up;
      if (upp == this.max)
         upp = max;
      this.max = max;
      maxField.setText(""+max);
      if (low < min)
         low = min;
      if (up < low)
         up = low;
      if (upp > max)
         up = max;
      else 
         up = upp;
      if (up < low)
         low = up;
      upField.setText(""+up);
      lowField.setText(""+low);      
      slider.setMinimum(min);
      slider.setMaximum(max);
      slider.setBottomValue(low, true);
      slider.setTopValue(up, true);
      active = true;
      fireStateChanged();
   }

   private void updateMin(int min) throws Exception
   {
      if (min > max)
         return;
      active = false;
      int loww = low;
      if (loww == this.min)
         loww = min;
      this.min = min;
      minField.setText(""+min);
      if (low < min)
         low = min;
      if (up < low)
         up = low;
      if (up > max)
         up = max;
      if (loww < min)
         low = min;
      else
         low = loww;
      if (up < low)
         low = up;
      upField.setText(""+up);
      lowField.setText(""+low);
      slider.setMinimum(min);
      slider.setMaximum(max);
      slider.setBottomValue(low, true);
      slider.setTopValue(up, true);
      active = true;
      fireStateChanged();
   }


   public boolean isAdjusting()
   {
      return adjusting;
   }

   public void setAdjusting(boolean adjusting)
   {
      this.adjusting = adjusting;
   }

   public void setParams(int min, int low, int up, int max)
   {
      if (min > low || low > up || up > max || low == up)
         return;
      active = false;
      
      this.min = min;
      minField.setText(""+min);
      slider.setMinimum(min);
      this.max = max;
      maxField.setText(""+max);
      slider.setMaximum(max);
      upField.setText(""+up);
      lowField.setText(""+low);
      slider.setBottomValue(low, true);
      slider.setTopValue(up, true);
      active = true;
   }
   
   public int getLow()
   {
      return low;
   }

   public void setLow(int low)
   {
      this.low = low;
      slider.setBottomValue(low, false);
   }

   public int getMax()
   {
      return max;
   }

   public void setMax(int max)
   {
      try
      {
         updateMax(max);
      } catch (Exception exception)
      {
      }
   }

   public int getMin()
   {
      return min;
   }

   public void setMin(int min)
   {
      try
      {
         updateMin(min);
      } catch (Exception exception)
      {
      }
      
   }

   public int getUp()
   {
      return up;
   }

   public void setUp(int up)
   {
      this.up = up;
      slider.setTopValue(up, false);
   }

   public void setPolicy(int policy)
   {
      slider.setPolicy(policy);
   }
   
   public void setExtent(int l)
   {
      slider.setExtent(l);
   }

   @Override
   public String toString()
   {
      return slider.toString();
   }   
   
   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList =
           new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove(listener);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   public void fireStateChanged()
   {
       if(!active)
           return;
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener listener : changeListenerList)
         listener.stateChanged(e);
   }
   
   @Override
   public void setEnabled(boolean enabled) {
       super.setEnabled(enabled);
       slider.setEnabled(enabled);
       minField.setEnabled(enabled);
       maxField.setEnabled(enabled);
       lowField.setEnabled(enabled);
       upField.setEnabled(enabled);       
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   protected javax.swing.JPanel jPanel1;
   protected javax.swing.JTextField lowField;
   protected javax.swing.JTextField maxField;
   protected javax.swing.JTextField minField;
   protected pl.edu.icm.visnow.gui.widgets.SubRangeSlider.SubRangeSlider slider;
   protected javax.swing.JTextField upField;
   // End of variables declaration//GEN-END:variables
}
