/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.gui.widgets;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class FileErrorFrame extends javax.swing.JFrame
{

   private Exception e;
   private String text;
   private String fname;
   private int lineNumber;

   /**
    * Creates new form FileErrorFrame
    */
   public FileErrorFrame()
   {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      jScrollPane2 = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();
      jScrollPane3 = new javax.swing.JScrollPane();
      fileLinesList = new javax.swing.JList();
      okButton = new javax.swing.JButton();
      errorLabel = new javax.swing.JLabel();
      infoButton = new javax.swing.JButton();
      contextButton = new javax.swing.JButton();

      jList1.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { " " };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      jScrollPane2.setViewportView(jList1);

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      getContentPane().setLayout(new java.awt.GridBagLayout());

      fileLinesList.setBackground(new java.awt.Color(231, 228, 228));
      fileLinesList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      fileLinesList.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
      fileLinesList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      fileLinesList.setFixedCellHeight(15);
      jScrollPane3.setViewportView(fileLinesList);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      getContentPane().add(jScrollPane3, gridBagConstraints);

      okButton.setText("OK, close");
      okButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      getContentPane().add(okButton, gridBagConstraints);

      errorLabel.setForeground(new java.awt.Color(204, 0, 0));
      errorLabel.setText("error");
      errorLabel.setMaximumSize(new java.awt.Dimension(30, 30));
      errorLabel.setMinimumSize(new java.awt.Dimension(30, 30));
      errorLabel.setPreferredSize(new java.awt.Dimension(30, 30));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(6, 8, 6, 8);
      getContentPane().add(errorLabel, gridBagConstraints);

      infoButton.setText("show detailed info");
      infoButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            infoButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      getContentPane().add(infoButton, gridBagConstraints);

      contextButton.setText("show context");
      contextButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            contextButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.weightx = 1.0;
      getContentPane().add(contextButton, gridBagConstraints);

      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      setBounds((screenSize.width-408)/2, (screenSize.height-471)/2, 408, 471);
   }// </editor-fold>//GEN-END:initComponents

   private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
      setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

   private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      PrintStream s = new PrintStream(out);
      e.printStackTrace(s);      // TODO add your handling code here:
      String[] list = out.toString().split("\n");
      fileLinesList.setListData(list);
}//GEN-LAST:event_infoButtonActionPerformed

   private void contextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextButtonActionPerformed
      displayFilePart();
}//GEN-LAST:event_contextButtonActionPerformed

   @SuppressWarnings("empty-statement")
   private void displayFilePart()
   {
      String[] list = new String[31];
      String line = "";
      int i, k;
      errorLabel.setText(text);
      try
      {
         BufferedReader r = new BufferedReader(new FileReader(fname));
         for (i = 1; i < lineNumber - 15 && (line = r.readLine()) != null; i++);

         for (k = 0; i < lineNumber && (line = r.readLine()) != null; i++, k++)
            list[k] = "<html><PRE><font color=#000088>" + String.format("%1$5d  ", i) + "</font>" + line + "</html>";
         if ((line = r.readLine()) != null)
         {
            list[k] = "<html><PRE><font color=#880000>" + String.format("%1$5d  ", i) + "<font color=#FF0000>" + line + "</PRE></html>";
            k += 1;
            i += 1;
         }
         for (; i < lineNumber + 15 && (line = r.readLine()) != null; i++, k++)
            list[k] = "<html><PRE><font color=#000088>" + String.format("%1$5d  ", i) + "</font>" + line + "</PRE></html>";
         r.close();
         fileLinesList.setListData(list);
      } catch (IOException ex)
      {
      }
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new FileErrorFrame().setVisible(true);
         }
      });
   }

   public void setErrorData(String text, String fname, int lineNumber, Exception e)
   {
      this.text = text;
      this.fname = fname;
      this.lineNumber = lineNumber;
      this.e = e;
      if (lineNumber >= 0)
         displayFilePart();
      setVisible(true);
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton contextButton;
   private javax.swing.JLabel errorLabel;
   private javax.swing.JList fileLinesList;
   private javax.swing.JButton infoButton;
   private javax.swing.JList jList1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JButton okButton;
   // End of variables declaration//GEN-END:variables
}
