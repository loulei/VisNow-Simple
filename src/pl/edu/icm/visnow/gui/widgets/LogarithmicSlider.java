/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.gui.widgets;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.apache.log4j.Logger;
import static pl.edu.icm.visnow.lib.utils.FloatFormats.*;
import pl.edu.icm.visnow.lib.utils.SwingInstancer;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class LogarithmicSlider extends javax.swing.JPanel
{

   private static final Logger LOGGER = Logger.getLogger(LogarithmicSlider.class);
   protected float min = .01f;
   protected float max = 100.f;
   protected float val = 1.f;
   protected int l, u, n;
   protected String form = "%6.4f";
   protected Font textFont = new java.awt.Font("Dialog", 0, 10);
   protected boolean dynamic = true;
   protected boolean active = true;
   protected boolean showingFields = true;
   private Hashtable<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();

   /**
    * Creates new form FloatSlider
    */
   public LogarithmicSlider()
   {
      initComponents();
      roundMinMax();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        slider = new javax.swing.JSlider();
        maxField = new pl.edu.icm.visnow.gui.components.FloatFormattedTextField();
        valField = new pl.edu.icm.visnow.gui.components.FloatFormattedTextField();
        minField = new pl.edu.icm.visnow.gui.components.FloatFormattedTextField();
        showFieldsBox = new javax.swing.JCheckBox();

        setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        slider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        slider.setMajorTickSpacing(100);
        slider.setMaximum(1000);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setMinimumSize(new java.awt.Dimension(40, 42));
        slider.setPreferredSize(new java.awt.Dimension(127, 42));
        slider.setRequestFocusEnabled(false);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(slider, gridBagConstraints);

        maxField.setBackground(new java.awt.Color(238, 238, 238));
        maxField.setBorder(null);
        maxField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxField.setText("100");
        maxField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        maxField.setMinimumSize(new java.awt.Dimension(60, 14));
        maxField.setPreferredSize(new java.awt.Dimension(60, 14));
        maxField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(maxField, gridBagConstraints);

        valField.setBorder(null);
        valField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        valField.setMinimumSize(new java.awt.Dimension(60, 14));
        valField.setPreferredSize(new java.awt.Dimension(60, 14));
        valField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(valField, gridBagConstraints);

        minField.setBackground(new java.awt.Color(238, 238, 238));
        minField.setBorder(null);
        minField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minField.setText("0.001");
        minField.setToolTipText("");
        minField.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        minField.setMinimumSize(new java.awt.Dimension(60, 14));
        minField.setPreferredSize(new java.awt.Dimension(60, 14));
        minField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(minField, gridBagConstraints);

        showFieldsBox.setSelected(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/gui/widgets/widgetstrings"); // NOI18N
        showFieldsBox.setToolTipText(bundle.getString("GUI.enhancedmodeCB.tooltip")); // NOI18N
        showFieldsBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        showFieldsBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showFieldsBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showFieldsBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        showFieldsBox.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        showFieldsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFieldsBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(showFieldsBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void showFieldsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFieldsBoxActionPerformed
   showingFields = showFieldsBox.isSelected();
   showFields();
}//GEN-LAST:event_showFieldsBoxActionPerformed

private void minFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFieldActionPerformed
   try
   {
   min = Float.parseFloat(minField.getText());//GEN-LAST:event_minFieldActionPerformed
         roundMinMax();
      } catch (Exception e)
      {
      }
   }

private void maxFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFieldActionPerformed
   try
   {
      max = Float.parseFloat(maxField.getText());
      roundMinMax();
   } catch (Exception e)
   {
   }
}//GEN-LAST:event_maxFieldActionPerformed

private void valFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valFieldActionPerformed
   try
   {
      val = Float.parseFloat(valField.getText());
   } catch (Exception ex)
   {
      return;
   }
   if (val < min || val > max)
      return;
   updateSlider();
   fireStateChanged();
}//GEN-LAST:event_valFieldActionPerformed

private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
   String f = "%f";
   int i = slider.getValue();
   int j = (i + 100000 * n) % n;
   int m = (i + 100000 * n) / n - 100000;
   float x = (3.f * j) / n;
   val = (float) (Math.pow(10., m));
   if (x < 1)
   {
      val *= 1 + x;
   } else if (x < 2)
   {
      val *= 2 + 3 * (x - 1);
   } else
   {
      val *= 5 + 5 * (x - 2);
   }
   valField.setText(String.format(xformat(val), val));
   fireStateChanged();
}//GEN-LAST:event_sliderStateChanged

private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
   roundMinMax();
}//GEN-LAST:event_formComponentResized

   private void roundMinMax()
   {
      SwingInstancer.swingRun(new Runnable()
      {
         @Override
         public void run()
         {
            active = false;
            double r0 = Math.abs(min);
            double r1 = Math.abs(max);
            boolean inter = false;
            int k = 0;
            if (r0 > r1)
            {
               double r = r0;
               r0 = r1;
               r1 = r;
            }
            if (r0 < 1e-20)
               r0 = 1e-20;
            r1 = Math.max(r1, 100 * r0);
            double logr0 = Math.log10(r0);
            double logr1 = Math.log10(r1);
            if (logr1 < logr0 + 1)
               logr1 = logr0 + 1;
            int iLogr0 = (int) (logr0 + 100.1) - 100;
            int iLogr1 = (int) (logr1 + 100.9) - 100;
            n = slider.getWidth() / (iLogr1 - iLogr0); //n - positions between base labels
            if (n < 30)
               n = 30;
            if (n > 100)
            {
               inter = true;
               k = n / 3;
            }
            l = n * iLogr0;
            u = n * iLogr1;
            slider.setMinimum(n * iLogr0);
            slider.setMaximum(n * iLogr1);
//            System.out.println(""+n * iLogr0+" : "+n * iLogr1);
            slider.setMinorTickSpacing(n / 6); 
            slider.setMajorTickSpacing(n / 30);          //20 ticks at each range
            labels.clear();
            for (int i = 0; i + l <= u; i += n)
            {
               int m = (i + l) / n;
               form = eformat(m);
               double v = Math.pow(10., 1. * m);
               JLabel lbl = new JLabel(String.format(form, v));
               lbl.setFont(LogarithmicSlider.this.getFont());
               labels.put(new Integer(i + l), lbl);
               if (inter && i + l < u)
               {
                  v = 2. * Math.pow(10., 1. * m);
                  lbl = new JLabel(String.format(form, v));
                  lbl.setFont(LogarithmicSlider.this.getFont());
                  labels.put(new Integer(i + l + k), lbl);
                  v = 5. * Math.pow(10., 1. * m);
                  lbl = new JLabel(String.format(form, v));
                  lbl.setFont(LogarithmicSlider.this.getFont());
                  labels.put(new Integer(i + l + 2 * k), lbl);
               }
               slider.setLabelTable(labels);
            }
            active = true;
         }
      });
   }
   
   private void updateSlider()
   {
      int m = (int) (Math.log10(1000000000. * val)) - 9;
      float c = (float) (val / Math.pow(10., m));
      int k = 0;
      if (c < 2)
      {
         k = (int) (n * (c - 1) / 3.);
      } else if (c < 5)
      {
         k = n / 3 + (int) (n * (c - 2) / 9.);
      } else
      {
         k = 2 * (n / 3) + (int) (n * (c - 5) / 15.);
      }
//      System.out.println(""+(m * n + k));
//      VisNowCallTrace.trace();
      slider.setValue(m * n + k);
   }

   public float getMin()
   {
      return min;
   }

   public void setMin(float min)
   {
      if (min < 0 || min >= max)
         return;
      this.min = min;
      minField.setText("" + min);
      roundMinMax();
   }

   public void setMinExp(int exp)
   {
      float m = 1;
      if (exp > 0)
      {
         for (int i = 0; i < exp; i++)
         {
            m *= 10;
         }
      } else
      {
         for (int i = exp; i < 0; i++)
         {
            m /= 10;
         }
      }
      setMin(m);
   }

   public float getMax()
   {
      return max;
   }

   public void setMax(float max)
   {
      if (max < min)
         return;
      this.max = max;
      maxField.setText("" + max);
      roundMinMax();
   }

   public void setMaxExp(int exp)
   {
      float m = 1;
      if (exp > 0)
      {
         for (int i = 0; i < exp; i++)
         {
            m *= 10;
         }
      } else
      {
         for (int i = exp; i < 0; i++)
         {
            m /= 10;
         }
      }
      setMax(m);
   }

   public float getVal()
   {
      return val;
   }

   public void setVal(float val)
   {
      this.val = val;
      if (val < min || val > max)
         return;
      valField.setText(String.format(xformat(val), val));
      updateSlider();
   }

   public void setAll(float min, float max, float v)
   {
      this.min = min;
      this.max = max;
      roundMinMax();
      minField.setText("" + this.min);
      maxField.setText("" + this.max);
      val = v;
      if (val < this.min || val > this.max)
         val = (float) Math.sqrt(this.min * this.max);
      setVal(val);
   }

   public void setTextFont(Font textFont)
   {
      this.textFont = textFont;
      maxField.setFont(textFont);
      valField.setFont(textFont);
      minField.setFont(textFont);
   }

   public boolean isAdjusting()
   {
      return slider.getValueIsAdjusting();
   }

   public void setAdjusting(boolean dynamic)
   {
      this.dynamic = dynamic;
   }

   public boolean isShowingFields()
   {
      return showingFields;
   }

   public void setShowingFields(boolean showingFields)
   {
      this.showingFields = showingFields;
      showFieldsBox.setSelected(showingFields);
      showFields();
   }

   public void showFields()
   {
      minField.setVisible(showingFields);
      maxField.setVisible(showingFields);
      valField.setVisible(showingFields);
      this.validate();
   }

   @Override
   public void setEnabled(boolean enabled)
   {
      slider.setEnabled(enabled);
      minField.setEnabled(enabled);
      maxField.setEnabled(enabled);
      valField.setEnabled(enabled);
      showFieldsBox.setEnabled(enabled);
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.gui.components.FloatFormattedTextField maxField;
    private pl.edu.icm.visnow.gui.components.FloatFormattedTextField minField;
    private javax.swing.JCheckBox showFieldsBox;
    private javax.swing.JSlider slider;
    private pl.edu.icm.visnow.gui.components.FloatFormattedTextField valField;
    // End of variables declaration//GEN-END:variables
   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList = new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    *
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    *
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      if (changeListenerList != null)
      {
         changeListenerList.remove(listener);
      }
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void fireStateChanged()
   {
      if ((slider.getValueIsAdjusting() && !dynamic) || !active)
      {
         return;
      }
      java.util.ArrayList list;
      ChangeEvent e = new ChangeEvent(this);
      synchronized (this)
      {
         if (changeListenerList == null)
         {
            return;
         }
         list = new ArrayList<ChangeListener>(changeListenerList);
//         list = (ArrayList<ChangeListener>)changeListenerList.clone ();
      }
      for (int i = 0; i < list.size(); i++)
      {
         ((ChangeListener) list.get(i)).stateChanged(e);
      }
   }

   public static void main(String[] a)
   {
      VisNow.initLogging();
      Locale.setDefault(VisNow.LOCALE);
      JFrame f = new JFrame();
      f.add(new LogarithmicSlider());
      f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      f.setLocation(600, 300);
      f.pack();
      f.setVisible(true);
   }
}
