/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.viewers.FieldViewer1D;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Vector;
import javax.swing.ImageIcon;
import pl.edu.icm.visnow.datasets.dataarrays.DataArray;
import pl.edu.icm.visnow.datasets.RegularFieldSchema;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class Viewer1DFrame extends javax.swing.JFrame
{

   protected Vector<DataArray> dataArrays = null;
   protected Vector<GraphArea> graphs = new Vector<GraphArea>();
   protected Vector<int[]> selRanges = new Vector<int[]>() ;
   protected int[] range     = {0,10};
   protected int[] dataRange = {0,10};
   protected int selFrame = 5;

   /** Creates new form Viewer1DFrame */
   public Viewer1DFrame()
   {
      initComponents();
      addGraphButton.setVisible(false);
      clearRangesButton.setVisible(false);
      removeGraphButton.setVisible(false);
      useRangesButton.setVisible(false);
      displayRangeSlider.setVisible(false);
      jPanel2.setVisible(false);
      graphs.add(new GraphArea());
      graphs.get(0).setParentFrame(this);
      graphs.get(0).setSelRanges(selRanges);
      ((GridLayout) (graphsPanel.getLayout())).setRows(graphs.size());
      ((GridLayout) (graphsPanel.getLayout())).setColumns(1);
      graphsPanel.add(graphs.get(0));
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        graphsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        useRangesButton = new javax.swing.JButton();
        clearRangesButton = new javax.swing.JButton();
        addGraphButton = new javax.swing.JButton();
        removeGraphButton = new javax.swing.JButton();
        displayRangeSlider = new pl.edu.icm.visnow.gui.widgets.SubSubRangeSlider.SubSubRangeSlider();

        setTitle("FieldViewer1D");
        setIconImage(new ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/big/visnow.png")).getImage());
        setMinimumSize(new java.awt.Dimension(1024, 350));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(1020, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(1500, 230));

        graphsPanel.setMinimumSize(new java.awt.Dimension(800, 200));
        graphsPanel.setPreferredSize(new java.awt.Dimension(1000, 240));
        graphsPanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(graphsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 65));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 65));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        useRangesButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        useRangesButton.setText("use selected ranges");
        useRangesButton.setMaximumSize(new java.awt.Dimension(88, 20));
        useRangesButton.setMinimumSize(new java.awt.Dimension(88, 20));
        useRangesButton.setPreferredSize(new java.awt.Dimension(88, 20));
        useRangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRangesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(useRangesButton, gridBagConstraints);

        clearRangesButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        clearRangesButton.setText("clear ranges");
        clearRangesButton.setMaximumSize(new java.awt.Dimension(105, 20));
        clearRangesButton.setMinimumSize(new java.awt.Dimension(105, 20));
        clearRangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRangesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(clearRangesButton, gridBagConstraints);

        addGraphButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        addGraphButton.setText("add graph");
        addGraphButton.setMaximumSize(new java.awt.Dimension(95, 20));
        addGraphButton.setMinimumSize(new java.awt.Dimension(95, 20));
        addGraphButton.setPreferredSize(new java.awt.Dimension(95, 20));
        addGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGraphButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(addGraphButton, gridBagConstraints);

        removeGraphButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        removeGraphButton.setText("remove graph");
        removeGraphButton.setMaximumSize(new java.awt.Dimension(115, 20));
        removeGraphButton.setMinimumSize(new java.awt.Dimension(115, 20));
        removeGraphButton.setOpaque(false);
        removeGraphButton.setPreferredSize(new java.awt.Dimension(115, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(removeGraphButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel2, gridBagConstraints);

        displayRangeSlider.setPaintLabels(true);
        displayRangeSlider.setPaintTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(displayRangeSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel1, gridBagConstraints);

        setSize(new java.awt.Dimension(1000, 354));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addGraphButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addGraphButtonActionPerformed
    {//GEN-HEADEREND:event_addGraphButtonActionPerformed
       GraphArea graphArea = new GraphArea();
       graphArea.setParentFrame(this);
       graphArea.setSelRanges(selRanges);
       graphs.add(graphArea);
       graphsPanel.removeAll();
       Dimension dim = new Dimension(graphsPanel.getWidth(), 220 * graphs.size() + 10);
       graphsPanel.setMinimumSize(dim);
       graphsPanel.setMaximumSize(dim);
       graphsPanel.setPreferredSize(dim);
       graphsPanel.setSize(dim);
       ((GridLayout) (graphsPanel.getLayout())).setRows(graphs.size());
       ((GridLayout) (graphsPanel.getLayout())).setColumns(1);
       for (int i = 0; i < graphs.size(); i++)
          graphsPanel.add(graphs.get(i));
       graphArea.setData(dataArrays, true);
//       graphsPanel.repaint();
    }//GEN-LAST:event_addGraphButtonActionPerformed

    private void clearRangesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearRangesButtonActionPerformed
    {//GEN-HEADEREND:event_clearRangesButtonActionPerformed
       selRanges.clear();
       for (int i = 0; i < graphs.size(); i++)
       {
           graphs.get(i).setUseSelectedFrames(false);
       }
       repaint();
    }//GEN-LAST:event_clearRangesButtonActionPerformed

    private void useRangesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useRangesButtonActionPerformed
    {//GEN-HEADEREND:event_useRangesButtonActionPerformed
       for (int i = 0; i < graphs.size(); i++)
       {
           graphs.get(i).setUseSelectedFrames(true);
       }
       repaint();
    }//GEN-LAST:event_useRangesButtonActionPerformed

   public void setSelRanges(Vector<int[]> selRanges)
   {
      this.selRanges = selRanges;
      for (GraphArea g : graphs) {
         g.setUseSelectedFrames(true); 
         g.setSelRanges(selRanges);
      }
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      java.awt.EventQueue.invokeLater(new Runnable()
      {

         public void run()
         {
            new Viewer1DFrame().setVisible(true);
         }
      });
   }

   public void setDataArrays(Vector<DataArray> dataArrays, boolean newSchema, RegularFieldSchema schema)
   {
      this.dataArrays = dataArrays;
      range[0] = dataRange[0] = 0;
      range[1] = dataRange[1] = dataArrays.firstElement().getNData();
      displayRangeSlider.setMinimum(dataRange[0]);
      displayRangeSlider.setMaximum(dataRange[1]);
      displayRangeSlider.setBottomValue(range[0]);
      displayRangeSlider.setTopValue(range[1]);
      displayRangeSlider.setCenterValue(range[0]);
      for (GraphArea graphArea : graphs)
      {
         graphArea.setData(dataArrays, newSchema);
         graphArea.setN0(range[0]);
         graphArea.setN1(range[1]);
         selRanges = new Vector<int[]>() ;
         graphArea.setSelRanges(selRanges);
      }
   }

   public void updateGraphs(Vector<DataArray> dataArrays)
   {
      this.dataArrays = dataArrays;
      range[0] = dataRange[0] = 0;
      range[1] = dataRange[1] = dataArrays.firstElement().getNData();
      displayRangeSlider.setMinimum(dataRange[0]);
      displayRangeSlider.setMaximum(dataRange[1]);
      displayRangeSlider.setBottomValue(range[0]);
      displayRangeSlider.setTopValue(range[1]);
      displayRangeSlider.setCenterValue(range[0]);      
      for (GraphArea graphArea : graphs)
      {
         graphArea.setN0(range[0]);
         graphArea.setN1(range[1]);
         selRanges = new Vector<int[]>() ;         
         graphArea.setSelRanges(selRanges);
         graphArea.updateData(dataArrays);
      }
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton addGraphButton;
    protected javax.swing.JButton clearRangesButton;
    protected pl.edu.icm.visnow.gui.widgets.SubSubRangeSlider.SubSubRangeSlider displayRangeSlider;
    protected javax.swing.JPanel graphsPanel;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JPanel jPanel2;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JButton removeGraphButton;
    protected javax.swing.JButton useRangesButton;
    // End of variables declaration//GEN-END:variables
}
