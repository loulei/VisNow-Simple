/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.viewers.Viewer2D;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Window;
import java.io.BufferedReader;
import java.io.File;
import java.io.FilenameFilter;
import java.io.InputStreamReader;
import java.text.DecimalFormat;


/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class MovieCreationPanel2D extends javax.swing.JPanel
{
   private File workDir = new File("/tmp"); 
   private String baseWorkFileName = "/tmp/";
   private int currentFrame = 0;
   private static DecimalFormat intf  = new DecimalFormat("000000");
   private String cmdline = "echo test";
   private Display2DPanel panel = null;
   private int width = 0;
   private int height = 0;
   private String currentFrameFileName = null;
   private int[][] resolutions = 
  {{ 176, 144}, 
   { 352, 288}, 
   { 704, 576}, 
   { 320, 240}, 
   { 640, 480}, 
   { 800, 600}, 
   {1024, 768}, 
   {1600, 1200}, 
   {1280, 1024}, 
   { 852, 480}, 
   {1280, 720},
   {1920, 1080},
  };
   /** Creates new form MovieCreationPanel2D */
   public MovieCreationPanel2D()
   {
      initComponents();
      formatGroup.add(jpegToggle);
      formatGroup.add(yuvToggle);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dirChooser = new javax.swing.JFileChooser();
        formatGroup = new javax.swing.ButtonGroup();
        jpegToggle = new javax.swing.JRadioButton();
        yuvToggle = new javax.swing.JRadioButton();
        storeToggle = new javax.swing.JToggleButton();
        clearButton = new javax.swing.JButton();
        currentFileLabel = new javax.swing.JLabel();
        currentFileField = new javax.swing.JTextField();
        compileButton = new javax.swing.JButton();
        movieSizeField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        movieNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        workDirButton = new javax.swing.JButton();
        clearTmpButton = new javax.swing.JButton();
        resolutionsCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        widthField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        heightField = new javax.swing.JTextField();

        dirChooser.setCurrentDirectory(new java.io.File("/tmp"));
        dirChooser.setDialogTitle("movie work directory");
        dirChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setMinimumSize(new java.awt.Dimension(373, 262));
        setPreferredSize(new java.awt.Dimension(567, 262));
        setLayout(new java.awt.GridBagLayout());

        jpegToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jpegToggle.setSelected(true);
        jpegToggle.setText("jpeg");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(jpegToggle, gridBagConstraints);

        yuvToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        yuvToggle.setText("YUV");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(yuvToggle, gridBagConstraints);

        storeToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        storeToggle.setText("store frames");
        storeToggle.setMargin(new java.awt.Insets(2, 2, 2, 2));
        storeToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeToggleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(storeToggle, gridBagConstraints);

        clearButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        clearButton.setText("clear frames");
        clearButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(clearButton, gridBagConstraints);

        currentFileLabel.setText("current frame");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        add(currentFileLabel, gridBagConstraints);

        currentFileField.setText(null);
        currentFileField.setMinimumSize(new java.awt.Dimension(4, 24));
        currentFileField.setPreferredSize(new java.awt.Dimension(300, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(currentFileField, gridBagConstraints);

        compileButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        compileButton.setText("compile movie");
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        add(compileButton, gridBagConstraints);

        movieSizeField.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        movieSizeField.setMinimumSize(new java.awt.Dimension(4, 24));
        movieSizeField.setPreferredSize(new java.awt.Dimension(4, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(movieSizeField, gridBagConstraints);

        jLabel1.setText("size (MB)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        add(jLabel1, gridBagConstraints);

        movieNameField.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        movieNameField.setText("movie.mpg");
        movieNameField.setMinimumSize(new java.awt.Dimension(4, 24));
        movieNameField.setPreferredSize(new java.awt.Dimension(63, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(movieNameField, gridBagConstraints);

        jLabel2.setText("movie file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        add(jLabel2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        workDirButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        workDirButton.setText("work directory");
        workDirButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        workDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workDirButtonActionPerformed(evt);
            }
        });
        jPanel2.add(workDirButton);

        clearTmpButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        clearTmpButton.setText("clear tmp files");
        clearTmpButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        clearTmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTmpButtonActionPerformed(evt);
            }
        });
        jPanel2.add(clearTmpButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel2, gridBagConstraints);

        resolutionsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "qcif (176x144)", "cif (352x288)", "4cif (704x576)", "qvga (320x240)", "vga (640x480)", "svga (800x600)", "xga (1024x768)", "uxga (1600x1200)", "sxga (1280x1024)", "480p (852x480)", "720p (1280x720)", "1080p (1920x1080)", " " }));
        resolutionsCombo.setSelectedIndex(5);
        resolutionsCombo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "movie resolution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        resolutionsCombo.setPreferredSize(new java.awt.Dimension(140, 48));
        resolutionsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionsComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        add(resolutionsCombo, gridBagConstraints);

        jLabel3.setText("frame width");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        add(jLabel3, gridBagConstraints);

        widthField.setText("800");
        widthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(widthField, gridBagConstraints);

        jLabel4.setText("frame height");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        add(jLabel4, gridBagConstraints);

        heightField.setText("600");
        heightField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(heightField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void clearTmpButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearTmpButtonActionPerformed
   {//GEN-HEADEREND:event_clearTmpButtonActionPerformed
     String[] tmpFileList = workDir.list(new FilenameFilter() {

         public boolean accept(File dir, String name) {
             if (name.endsWith(".jpg") || name.endsWith(".Y") || name.endsWith(".U") ||
                 name.endsWith(".V"))
                 return true;
             return false;
         }
     });
      for (int i=0; i<tmpFileList.length; i++)
      {
         File f = new File(baseWorkFileName+tmpFileList[i]);
         if (f.exists())
            f.delete();
      }
      
   }//GEN-LAST:event_clearTmpButtonActionPerformed

   private void compileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_compileButtonActionPerformed
   {//GEN-HEADEREND:event_compileButtonActionPerformed
      String s = movieSizeField.getText();
      String t = "";
      int l = s.length()-1;
      int u = 0;
      int size = 0;
      if (s.length()<1)
         u=1024*1024;
      else
      {
         if (s.endsWith("M") || s.endsWith("m"))
            u = 1024*1024;
         else if (s.endsWith("k") || s.endsWith("K"))
            u = 1024;
         if (!Character.isDigit(s.charAt(l)))
            t = s.substring(0, l);
         else 
            t = s;
         try
         {
            size = Integer.parseInt(t);
         }
         catch (Exception e)
         {
            size = 0;
         }
      }   
      int bitrate = 5000;
      if (size != 0)
      {
         bitrate = (size*u)/(5*currentFrame+1);
         if (bitrate>10000)
            bitrate = 10000;
      }
      if (yuvToggle.isSelected())
         cmdline =  "ffmpeg  -f image2 -i " + baseWorkFileName +"%6d.Y -b "+
                    bitrate+"k -y /tmp/"+movieNameField.getText();
      else
         cmdline = "ffmpeg  -f image2 -i " + baseWorkFileName +"%6d.jpg -b "+ 
                 bitrate +  "k -y  /tmp/"+movieNameField.getText();   
      System.out.println("executing "+cmdline);
      new Thread(new Runnable() {
         public void run() {
            try
            {
               String line;
               Process p = Runtime.getRuntime().exec(cmdline);
               BufferedReader input =
                  new BufferedReader(new InputStreamReader(p.getInputStream()));
               while ((line = input.readLine()) != null)
               {
                  System.out.println(line);
               }
               input.close();
               BufferedReader errorInput =
                  new BufferedReader(new InputStreamReader(p.getErrorStream()));
               while ((line = errorInput.readLine()) != null)
               {
                  System.out.println(line);
               }
               input.close();
               System.out.println("exit "+p.exitValue());
            }
            catch (Exception err)
            {
               err.printStackTrace();
            }
         }
      }).start();
   }//GEN-LAST:event_compileButtonActionPerformed

   private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
   {//GEN-HEADEREND:event_clearButtonActionPerformed
       currentFrame = 0;
   }//GEN-LAST:event_clearButtonActionPerformed

   private void storeToggleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_storeToggleActionPerformed
   {//GEN-HEADEREND:event_storeToggleActionPerformed
       if (storeToggle.isSelected()) {
          panel.setStoringJPEG(jpegToggle.isSelected());
          panel.setStoringFrames(true);
       } else {
          panel.setStoringFrames(false);
       }
   }//GEN-LAST:event_storeToggleActionPerformed

   private void workDirButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_workDirButtonActionPerformed
   {//GEN-HEADEREND:event_workDirButtonActionPerformed
      if (dirChooser.showDialog(null,"Select") == dirChooser.APPROVE_OPTION)
      {
         boolean success = (dirChooser.getSelectedFile().isDirectory()||
                 (new File(dirChooser.getSelectedFile().getAbsolutePath()).mkdirs()));
         if (success) 
         {
            workDir = new File(dirChooser.getSelectedFile().getAbsolutePath());
            baseWorkFileName = dirChooser.getSelectedFile().getAbsolutePath()+"/";
            currentFileField.setText(baseWorkFileName);
         }
         else
            System.out.println("could not find or create directory "+dirChooser.getSelectedFile().getAbsolutePath());
      }
   }//GEN-LAST:event_workDirButtonActionPerformed

   private void resolutionsComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resolutionsComboActionPerformed
   {//GEN-HEADEREND:event_resolutionsComboActionPerformed
      widthField.setText(""+resolutions[resolutionsCombo.getSelectedIndex()][0]);
      heightField.setText(""+resolutions[resolutionsCombo.getSelectedIndex()][1]);
      updateWindowSize();
}//GEN-LAST:event_resolutionsComboActionPerformed

   private void widthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthFieldActionPerformed
        updateWindowSize();
   }//GEN-LAST:event_widthFieldActionPerformed

   private void heightFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightFieldActionPerformed
        updateWindowSize();
   }//GEN-LAST:event_heightFieldActionPerformed


   private void updateWindowSize() {
      int w = 800, h = 600;
      try {
          w = Integer.parseInt(widthField.getText());
          h = Integer.parseInt(heightField.getText());
      } catch (Exception exception) {
      }

      if (width!=w || height!=h)
         currentFrame = 0;
      width = w;
      height = h;
      Dimension size = new Dimension(width, height);
      panel.setMinimumSize(size);
      panel.setMaximumSize(size);
      panel.setPreferredSize(size);
      panel.setSize(size);
      Container p = panel.getParent();
      while(!(p instanceof Window))
      {
          p=p.getParent();
      };
      ((Window)p).pack();
   }


   public void setCurrentFrame(int currentFrame)
   {
      this.currentFrame = currentFrame;
      if (jpegToggle.isSelected())
         currentFileField.setText(baseWorkFileName+intf.format((long)currentFrame)+".jpg");
      else
         currentFileField.setText(baseWorkFileName+currentFrame+".Y(UV)");
   }

   public Display2DPanel getPanel()
   {
      return panel;
   }

   public void setPanel(Display2DPanel panel)
   {
      this.panel = panel;
   }
   
   public String getCurrentFrameFileName()
   {
      if (jpegToggle.isSelected())
         currentFrameFileName = baseWorkFileName+intf.format((long)currentFrame)+".jpg";
      else
         currentFrameFileName = baseWorkFileName+currentFrame+".Y(UV)";
      currentFileField.setText(currentFrameFileName);
      currentFrame += 1;
      return currentFrameFileName;
   }
   
   public String getGenericFrameFileName()
   {
      return baseWorkFileName;
   }

   public int getCurrentFrameNumber()
   {
      int c = currentFrame;
      if (jpegToggle.isSelected())
         currentFrameFileName = baseWorkFileName+intf.format((long)currentFrame)+".jpg";
      else
         currentFrameFileName = baseWorkFileName+currentFrame+".Y(UV)";
      currentFileField.setText(currentFrameFileName);
      currentFrame += 1;
      return c;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearTmpButton;
    private javax.swing.JButton compileButton;
    private javax.swing.JTextField currentFileField;
    private javax.swing.JLabel currentFileLabel;
    private javax.swing.JFileChooser dirChooser;
    private javax.swing.ButtonGroup formatGroup;
    private javax.swing.JTextField heightField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jpegToggle;
    private javax.swing.JTextField movieNameField;
    private javax.swing.JTextField movieSizeField;
    private javax.swing.JComboBox resolutionsCombo;
    private javax.swing.JToggleButton storeToggle;
    private javax.swing.JTextField widthField;
    private javax.swing.JButton workDirButton;
    private javax.swing.JRadioButton yuvToggle;
    // End of variables declaration//GEN-END:variables
   
}
