/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the 
 University of Warsaw, Interdisciplinary Centre for Mathematical and 
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
package pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.Geometry.WritePAC;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import pl.edu.icm.visnow.system.main.VisNow;
import pl.edu.icm.visnow.system.swing.filechooser.VNFileChooser;

/**
 * @author Bartosz Borucki (babor@icm.edu.pl) Warsaw University,
 * Interdisciplinary Centre for Mathematical and Computational Modelling
 */
public class WritePACGUI extends javax.swing.JPanel {

    private String path = null;
    private String lastPath = null;
    protected WritePACParams params = new WritePACParams();
    private FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("PAC files", "pac", "PAC");

    /**
     * Creates new form EmptyVisnowModuleGUI
     */
    public WritePACGUI() {
        initComponents();        
        fileChooser.addChoosableFileFilter(fileFilter);
    }

    /**
     * Set the value of params
     *
     * @param params new value of params
     */
    public void setParams(WritePACParams params) {
        this.params = params;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileChooser = new javax.swing.JFileChooser();
        tfFileName = new javax.swing.JTextField();
        writeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(180, 300));
        setPreferredSize(new java.awt.Dimension(230, 300));
        setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/experimental/babor/WritePAC/Bundle"); // NOI18N
        tfFileName.setText(bundle.getString("WritePACGUI.tfFileName.text")); // NOI18N
        tfFileName.setMinimumSize(new java.awt.Dimension(4, 22));
        tfFileName.setPreferredSize(new java.awt.Dimension(78, 22));
        tfFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFileNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        add(tfFileName, gridBagConstraints);

        writeButton.setText(bundle.getString("WritePACGUI.writeButton.text")); // NOI18N
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        add(writeButton, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        selectButton.setText(bundle.getString("WritePACGUI.selectButton.text_1")); // NOI18N
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        add(selectButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_writeButtonActionPerformed
    {//GEN-HEADEREND:event_writeButtonActionPerformed
        if (params.getFileName() != null && params.getFileName().length() > 4 && VNFileChooser.checkForOverwrite(params.getFileName())) {
            params.fireStateChanged();
        }
    }//GEN-LAST:event_writeButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
    {//GEN-HEADEREND:event_selectButtonActionPerformed
        if (lastPath == null) {
            fileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getUsableDataPath(WritePAC.class)));
        } else {
            fileChooser.setCurrentDirectory(new File(lastPath));
        }

        int returnVal = fileChooser.showDialog(this, "Select");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            path = VNFileChooser.filenameWithExtenstionAddedIfNecessary(fileChooser.getSelectedFile(), fileFilter);
            tfFileName.setText(path);
            lastPath = path.substring(0, path.lastIndexOf(File.separator));
            VisNow.get().getMainConfig().setLastDataPath(lastPath,WritePAC.class);
            params.setFileName(path);
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void tfFileNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tfFileNameActionPerformed
    {//GEN-HEADEREND:event_tfFileNameActionPerformed
        params.setFileName(tfFileName.getText());
        params.fireStateChanged();
    }//GEN-LAST:event_tfFileNameActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField tfFileName;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
}
