/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.Geometry.PointsWizard;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreePath;
import pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.FieldDisplay3DFrame;
import pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.Geometry.*;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author babor
 */
public class PointsWizardDialog extends javax.swing.JDialog implements GeometryParamsListener {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(PointsWizardDialog.class);

    private NfdEntry nfd = null;
    private GeometryParams gparams = null;
    private CalculableParams cparams = null;
    private FieldDisplay3DFrame frame = null;
    private int currentPoint = 0;

    private boolean started = false;
    private boolean done = false;

    private boolean save = false;

    private String title = "Points Wizard";

    private boolean silent = false;


    public static final int MODE_POINTS = 0;
    public static final int MODE_PARAMETERS = 1;
    private int mode = MODE_POINTS;



    /** Creates new form PointsWizardDialog */
    public PointsWizardDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        if (parent instanceof FieldDisplay3DFrame) {
            frame = (FieldDisplay3DFrame) parent;
        }

        initComponents();
        nfdTree.getSelectionModel().setSelectionMode(DefaultTreeSelectionModel.SINGLE_TREE_SELECTION);
        nfdTree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                if(silent)
                    return;

                TreePath path = e.getPath();
                descriptionPane.setText("");
                onTreeSelectionValueChanged(path);
            }
        });

        setTitle(title);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        loadNfdButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nfdTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionPane = new javax.swing.JTextPane();
        saveButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        loadNfdStructButton = new javax.swing.JButton();
        autosaveCB = new javax.swing.JCheckBox();
        processButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        loadNfdButton.setText("Load NFD file");
        loadNfdButton.setMaximumSize(new java.awt.Dimension(160, 25));
        loadNfdButton.setMinimumSize(new java.awt.Dimension(160, 25));
        loadNfdButton.setName("loadNfdButton"); // NOI18N
        loadNfdButton.setPreferredSize(new java.awt.Dimension(160, 25));
        loadNfdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNfdButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(loadNfdButton, gridBagConstraints);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("<no NFD structure loaded>");
        nfdTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        nfdTree.setCellRenderer(new EntryTreeCellRenderer());
        nfdTree.setName("nfdTree"); // NOI18N
        jScrollPane1.setViewportView(nfdTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(600, 200));

        descriptionPane.setEditable(false);
        descriptionPane.setName("descriptionPane"); // NOI18N
        jScrollPane2.setViewportView(descriptionPane);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        saveButton.setText("Save NFD file as...");
        saveButton.setEnabled(false);
        saveButton.setMaximumSize(new java.awt.Dimension(160, 25));
        saveButton.setMinimumSize(new java.awt.Dimension(160, 25));
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setPreferredSize(new java.awt.Dimension(160, 25));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(saveButton, gridBagConstraints);

        exitButton.setText("End wizard");
        exitButton.setMaximumSize(new java.awt.Dimension(160, 25));
        exitButton.setMinimumSize(new java.awt.Dimension(160, 25));
        exitButton.setName("exitButton"); // NOI18N
        exitButton.setPreferredSize(new java.awt.Dimension(160, 25));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 5);
        jPanel1.add(exitButton, gridBagConstraints);

        loadNfdStructButton.setText("Load NFD structure");
        loadNfdStructButton.setMaximumSize(new java.awt.Dimension(160, 25));
        loadNfdStructButton.setMinimumSize(new java.awt.Dimension(160, 25));
        loadNfdStructButton.setName("loadNfdStructButton"); // NOI18N
        loadNfdStructButton.setPreferredSize(new java.awt.Dimension(160, 25));
        loadNfdStructButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNfdStructButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(loadNfdStructButton, gridBagConstraints);

        autosaveCB.setText("autosave");
        autosaveCB.setEnabled(false);
        autosaveCB.setName("autosaveCB"); // NOI18N
        autosaveCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autosaveCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(autosaveCB, gridBagConstraints);

        processButton.setText("Process parameters");
        processButton.setEnabled(false);
        processButton.setName("processButton"); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(24, 5, 5, 5);
        jPanel1.add(processButton, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private String lastPath = null;
    private String currentFilePath = null;
    private FileNameExtensionFilter nfdFilter = new FileNameExtensionFilter("Numeric Foot Model file (*.nfd)","nfd","NFD");

    private void loadNfdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNfdButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Load");
        if (lastPath == null) {
            fileChooser.setCurrentDirectory(new File( VisNow.get().getMainConfig().getAdditionalConfigPath() ));
        } else {
            fileChooser.setCurrentDirectory(new File(lastPath));
        }
        
        fileChooser.addChoosableFileFilter(nfdFilter);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            lastPath = path.substring(0, path.lastIndexOf(File.separator));
            loadNfd(path);
            next();
        }
    }//GEN-LAST:event_loadNfdButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Save");
        if (lastPath == null) {
            fileChooser.setCurrentDirectory(new File( VisNow.get().getMainConfig().getAdditionalConfigPath() ));
        } else {
            fileChooser.setCurrentDirectory(new File(lastPath));
        }

        
        fileChooser.addChoosableFileFilter(nfdFilter);

        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            if(!(path.endsWith(".nfd") || path.endsWith(".NFD"))) {
                path += ".nfd";
            }
            lastPath = new String(path);
            writeNfd(path, gparams.getInfoString());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        if(!save) {
            int res = JOptionPane.showConfirmDialog(this, "Do you really want to quit wizard without saving?", "Quit?", JOptionPane.YES_NO_OPTION);
            if(res == JOptionPane.NO_OPTION) {
                return;
            }
        }

        nfdTree.getSelectionModel().clearSelection();

        gparams.setSelectedPoints(null);
        gparams.setNextPointName(null);

        if (frame != null) {
            frame.setLeftStatusText("");
        }

        this.started = false;

        this.setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void loadNfdStructButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNfdStructButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setApproveButtonText("Load");
        if (lastPath == null) {
            fileChooser.setCurrentDirectory(new File( VisNow.get().getMainConfig().getAdditionalConfigPath() ));
        } else {
            fileChooser.setCurrentDirectory(new File(lastPath));
        }

        fileChooser.addChoosableFileFilter(nfdFilter);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            lastPath = path.substring(0, path.lastIndexOf(File.separator));
            //loadNfd("cmc_nfd.nfd");
            loadNfd(path);
            next();
        }
    }//GEN-LAST:event_loadNfdStructButtonActionPerformed

    private void autosaveCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autosaveCBActionPerformed
        if(!save) {
            saveButtonActionPerformed(evt);
        } else {
            this.setSave(false);
        }
    }//GEN-LAST:event_autosaveCBActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        //processNfdParameters();
        //NfdProcessor.processNfdParametersToVN(nfd, log, gparams, cparams);
    }//GEN-LAST:event_processButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autosaveCB;
    private javax.swing.JTextPane descriptionPane;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadNfdButton;
    private javax.swing.JButton loadNfdStructButton;
    private javax.swing.JTree nfdTree;
    private javax.swing.JButton processButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    private boolean gparamsSilent = false;

    public void loadDefaultNfdStructure() {
        loadNfdStructure(gparams.getDefaultNfdFile());
    }

    public boolean loadNfd(String filePath) {
        this.setSave(false);
        //nfd = NfdStructureReader.readNfd(filePath);
        nfd = NfdStructureReader.readNfd(filePath,true);
        if (nfd == null) {
            nfdTree.setModel(null);
            loadNfdStructButton.setEnabled(true);
            saveButton.setEnabled(false);
            autosaveCB.setEnabled(false);            
            return false;
        }

        currentFilePath = filePath;
        this.setSave(true);
        loadNfdStructButton.setEnabled(false);
        saveButton.setEnabled(true);
        autosaveCB.setEnabled(true);
        nfd.cleanup();

        nfd.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                nfdTree.repaint();
            }
        });

        NfdTreeModel nfdModel = new NfdTreeModel(nfd);
        nfdTree.setModel(nfdModel);


        ArrayList<PointEntry> points = nfd.getAllPointEntries();
        PointEntry p;
        PointDescriptor pd;
        gparamsSilent = true;
        gparams.clearPoints();
        for (int i = 0; i < points.size(); i++) {
            p = points.get(i);
            if(p.isReady()) {
                pd = p.getPointDescriptor();
                //gparams.addPoint(pd.getName(), pd.getIndices());
                gparams.addPoint(pd.getName(), pd.getWorldCoords());
                p.setPointDescriptor(gparams.getPointsDescriptor(gparams.getNumberOfPoints()-1));
            }            
        }
        gparamsSilent = false;
        currentPoint = 0;
        return true;
    }

    public boolean loadNfdStructure(String filePath) {
        nfd = null;
        this.setSave(false);
        nfd = NfdStructureReader.readNfdStructure(filePath);
        if (nfd == null) {
            nfdTree.setModel(null);
            loadNfdStructButton.setEnabled(true);
            saveButton.setEnabled(false);
            autosaveCB.setEnabled(false);
            return false;
        }
        loadNfdStructButton.setEnabled(false);
        saveButton.setEnabled(true);
        autosaveCB.setEnabled(true);
        currentFilePath = null;
        this.setSave(false);
        nfd.cleanup();

        nfd.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                nfdTree.repaint();
            }
        });

        NfdTreeModel nfdModel = new NfdTreeModel(nfd);
        nfdTree.setModel(nfdModel);

        currentPoint = 0;
        return true;
    }


    @Override
    public void onGeometryParamsChanged(GeometryParamsEvent e) {
        if(!this.isVisible())
            return;

        if(done || gparamsSilent || silent)
            return;

        switch(mode) {
            case MODE_POINTS:
                if (e.getType() == GeometryParamsEvent.TYPE_POINT_ADDED || e.getType() == GeometryParamsEvent.TYPE_ALL) {
                    log.debug("dialog caught point added");

                    PointEntry p = nfd.getPointByNumber(currentPoint);
                    p.setPointDescriptor(gparams.getPointsDescriptor(gparams.getPointsDescriptors().size()-1));
                    p.setSlicesDescriptor(gparams.getSlicesDescriptor(gparams.getPointsDescriptors().size()-1));

                    if(save)
                        writeNfd(currentFilePath, gparams.getInfoString());

                    next();
                }

                if (e.getType() == GeometryParamsEvent.TYPE_POINT_REMOVED || e.getType() == GeometryParamsEvent.TYPE_ALL) {
                    log.debug("dialog caught point removed");

                    ArrayList<PointEntry> pts = nfd.getAllPointEntries();
                    PointDescriptor pd;
                    boolean flag = false;
                    int ii = -1;
                    for (int i = 0; i < pts.size(); i++) {
                        pd = pts.get(i).getPointDescriptor();
                        if(pd == null) continue;
                        if(!gparams.isPointsContain(pd)) {
                            pts.get(i).setPointDescriptor(null);
                            if(!flag) ii = i;
                            flag = true;
                        }
                    }

                    if(save)
                        writeNfd(currentFilePath, gparams.getInfoString());

                    if(flag) {
                        goTo(ii);
                    }
                }

                if (e.getType() == GeometryParamsEvent.TYPE_POINT_MODIFIED || e.getType() == GeometryParamsEvent.TYPE_ALL) {
                    log.debug("dialog caught point modified");
                    if(save)
                        writeNfd(currentFilePath, gparams.getInfoString());

                }

                if (e.getType() == GeometryParamsEvent.TYPE_POINT_SELECTION || e.getType() == GeometryParamsEvent.TYPE_ALL) {
                    log.debug("dialog caught point selected");
                    if (gparams.getSelectedPoints() != null && gparams.getSelectedPoints().length == 1) {
                        int n = gparams.getSelectedPoints()[0];
                        goTo(nfd.getNuberOfPointByPointDescriptor(gparams.getPointsDescriptors().get(n)));
                    } else if(gparams.getSelectedPoints() == null) {
                        next();
                    }
                }
                break;
            case MODE_PARAMETERS:
                //TODO
                System.err.println("Not yet implemented!");
                break;
        }



    }

    /**
     * @param gparams the gparams to set
     */
    public void setGeometryParams(GeometryParams gparams) {
        gparams.addGeometryParamsListener(this);
        this.gparams = gparams;
    }

    public void setCalculableParams(CalculableParams cparams) {
        this.cparams = cparams;
    }

    private void next() {
        if (nfd == null) {
            return;
        }

        processButton.setEnabled(nfd.isReady());

        if(nfd.isReady()) {
            this.done = true;
        }

        switch(mode) {
            case MODE_POINTS:
                PointEntry p = null;
                p = nfd.getPointByNumber(currentPoint);
                ArrayList<ParameterEntry> pes = nfd.getAllParameterEntries();
                for (int i = 0; i < pes.size(); i++) {
                    if(pes.get(i) != null && pes.get(i).isReady() && pes.get(i).dependsOn(p)) {
                        CalculableParameter cp = pes.get(i).getCalculable();
                        if(cp == null)
                            continue;

                        if(cparams.isContainsCalculableByName(cp))
                            continue;

                        ArrayList<PointEntry> ptes = pes.get(i).getAllPointEntries();
                        ArrayList<PointDescriptor> pds = new ArrayList<PointDescriptor>();
                        for (int j = 0; j < ptes.size(); j++) {
                            pds.add(ptes.get(j).getPointDescriptor());
                        }
                        cp.setPointDescriptors(pds);
                        cparams.addCalculableParameter(cp);
                    }
                }

                if(currentPoint >= nfd.getAllPointEntries().size()-1 && nfd.isReady())
                    finish();


                do {
                    p = nfd.getPointByNumber(currentPoint);
                    if (p == null) {
                        if (!nfd.isReady()) {
                            currentPoint = 0;
                        } else {
                            return;
                        }
                    } else {
                        if (!p.isReady()) {
                            break;
                        }

                        currentPoint++;
                    }
                } while (true);

                TreePath path = nfd.getTreePathToPoint(p);
                if (path != null) {
                    nfdTree.setSelectionPath(path);
                    nfdTree.scrollPathToVisible(path);
                }
                break;
            case MODE_PARAMETERS:
                //TODO
                System.err.println("Not yet implemented!");
                break;
        }
    }

    private void goTo(int n) {
        if (nfd == null) {
            return;
        }

        if (n < 0) {
            return;
        }

        switch(mode) {
            case MODE_POINTS:
                PointEntry p = nfd.getPointByNumber(n);
                if (p == null) {
                    return;
                }

                TreePath path = nfd.getTreePathToPoint(p);
                if(n == currentPoint) {
                    silent = true;
                    onTreeSelectionValueChanged(path);
                    silent = false;


                } else {
                    currentPoint = n;
                    if (path != null) {
                        nfdTree.setSelectionPath(path);
                        nfdTree.scrollPathToVisible(path);
                    }
                }
                break;
            case MODE_PARAMETERS:
                //TODO
                System.err.println("Not yet implemented!");
                break;
        }
    }

    public void start() {
        started = true;
        next();
    }

    private void writeNfd(String path, String comment) {
        if (nfd == null) {
            return;
        }

        log.debug("Saving NFD to file: "+path);
        if(NfdStructureWriter.writeNfd(nfd, path, comment)) {
            currentFilePath = new String(path);
            this.setSave(true);
        } else {
            this.setSave(false);
            JOptionPane.showMessageDialog(this, "Error saving data to file!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @return the started
     */
    public boolean wasStarted() {
        return started;
    }

    private void finish() {
        this.done = true;
        nfdTree.getSelectionModel().clearSelection();

        gparams.setSelectedPoints(null);
        gparams.setNextPointName(null);

        if (frame != null) {
            frame.setLeftStatusText("Numerical Foot Description complete!");
        }
    }

    private void setSave(boolean save) {
        if(!this.save && save)
            displaySaveWarning(currentFilePath);
        
        this.save = save;
        autosaveCB.setSelected(save);
    }

    private void displaySaveWarning(String path) {
        JOptionPane.showMessageDialog(this, "WARNING!\n\nNFD file will be automatically saved,\noverwritting the loaded file:\n"+path+"\n\nUse 'autosave' option to switch this feature off.\n", "Autosave warning", JOptionPane.WARNING_MESSAGE);
    }

    private void onTreeSelectionValueChanged(TreePath path) {
        if(path == null || nfd == null)
            return;
        Object last = path.getLastPathComponent();

        switch(mode) {
            case MODE_POINTS:

                if (last instanceof PointEntry) {
                    PointEntry p = (PointEntry) last;
                    currentPoint = nfd.getNuberOfPoint(p);

                    descriptionPane.setText("id: "+p.getId()+"\n" +
                            "name: "+p.getName() + "\n" +
                            "description: "+p.getDescription()+"\n" +
                            "ready: "+(p.isReady()?"YES":"NO"));

                    if (p.isReady()) {

                        gparams.setNextPointName(null);

                        PointDescriptor pd = p.getPointDescriptor();

                        int n = gparams.getPointsDescriptors().indexOf(pd);
                        if (n != -1) {
                            gparams.setSelectedPoints(new int[]{n});
                            gparams.setBlockAdding(true);
                        } else {
                            gparams.setSelectedPoints(null);
                        }

                        if (frame != null) {
                            //frame.setLeftStatusText("Please select NEW location for point '" + p.getName() + "'...", Color.BLACK, Color.GREEN);
                            frame.setLeftStatusText("");
                        }


                    } else {
                        gparams.setSelectedPoints(null);
                        gparams.setNextPointName(p.getId());
                        gparams.setBlockAdding(false);

                        if (frame != null) {
                            frame.setLeftStatusText("Please select location for point '" + p.getName() + "'...", Color.BLACK, Color.RED);
                        }
                    }
                } else if (last instanceof ParameterEntry) {
                    ParameterEntry p = (ParameterEntry) last;
                    descriptionPane.setText("id: "+p.getId()+"\n" +
                            "name: "+p.getName() + "\n" +
                            "description: "+p.getDescription()+"\n" +
                            "ready: "+(p.isReady()?"YES":"NO"));
                    gparams.setSelectedPoints(null);

                }
                break;

            case MODE_PARAMETERS:
                //TODO
                System.err.println("Not yet implemented!");
                break;
        }

    }

    /**
     * @return the mode
     */
    public int getMode() {
        return mode;
    }

    /**
     * @param mode the mode to set
     */
    public void setMode(int mode) {
        this.mode = mode;
    }


    private void processNfdParameters() {
        if(nfd == null || !nfd.isReady()) {
            System.out.println("NFD ERROR: cannot process - NFD not ready");
            return;
        }

        if(!nfd.getName().equals("Numerical Foot Description")) {
            System.out.println("NFD ERROR: cannot process - structure does not seem to be NFD");
            return;
        }
        
        log.info("Start processing NFD...");


        //-----------plaszczyzna podeszwowa i stopa R/L------------
        PointDescriptor nfdp0 = nfd.getPointById("nfdp0").getPointDescriptor();
        PointDescriptor nfdp1 = nfd.getPointById("nfdp1").getPointDescriptor();
        PointDescriptor nfdp2 = nfd.getPointById("nfdp2").getPointDescriptor();

        double[] base_n = new double[3];
        double[] base_p = new double[3];
        float[] p_nfdp0,p_nfdp1,p_nfdp2;
        double[] v21 = new double[3], v20 = new double[3];
        p_nfdp0 = nfdp0.getWorldCoords();
        p_nfdp1 = nfdp1.getWorldCoords();
        p_nfdp2 = nfdp2.getWorldCoords();
        for (int i = 0; i < 3; i++) {
            base_p[i] = (double)p_nfdp2[i];
            v20[i] = (double)p_nfdp0[i]-(double)p_nfdp2[i];
            v21[i] = (double)p_nfdp1[i]-(double)p_nfdp2[i];
        }
        //assume R foot; n = v21 x v20
        base_n[0] = v21[1]*v20[2] - v21[2]*v20[1];
        base_n[1] = v21[2]*v20[0] - v21[0]*v20[2];
        base_n[2] = v21[0]*v20[1] - v21[1]*v20[0];
        double norm = 0;
        for (int i = 0; i < 3; i++) {
            norm += base_n[i]*base_n[i];
        }
        norm = Math.sqrt(norm);
        for (int i = 0; i < 3; i++) {
            base_n[i] = base_n[i]/norm;
        }
        
        if(base_n[2] >= 0) {
            log.info("foot: RIGHT");
        } else {
            log.info("foot: LEFT");
            for (int i = 0; i < 3; i++) {
                base_n[i] = -base_n[i];
            }
        }
        log.info("base_p = ["+base_p[0]+","+base_p[1]+","+base_p[2]+"]");
        log.info("base_n = ["+base_n[0]+","+base_n[1]+","+base_n[2]+"]");

        

        //-----------------


        ArrayList<PointDescriptor> pds;

        //-------os I kosci srodstopia-----------------
        // nfdp: 3,4,5,6,7
        PointDescriptor nfdp3 = nfd.getPointById("nfdp3").getPointDescriptor();
        PointDescriptor nfdp4 = nfd.getPointById("nfdp4").getPointDescriptor();
        PointDescriptor nfdp5 = nfd.getPointById("nfdp5").getPointDescriptor();
        PointDescriptor nfdp6 = nfd.getPointById("nfdp6").getPointDescriptor();
        PointDescriptor nfdp7 = nfd.getPointById("nfdp7").getPointDescriptor();
        PointDescriptor xing_1 = null;
        if(nfdp3 != null && nfdp4 != null && nfdp5 != null && nfdp6 != null && nfdp7 != null) {
            CalculablePoint c_xing_1 = CalculablePointsPool.getXing2SegmentsCalculablePoint("1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp3);
            pds.add(nfdp4);
            pds.add(nfdp5);
            pds.add(nfdp6);
            c_xing_1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_1.getName()));
            gparams.addPoint(c_xing_1.getName(), c_xing_1.getValue());
            xing_1 = gparams.getPointsDescriptorByName(c_xing_1.getName());
            gparams.addConnection(xing_1, nfdp7, "ax_Imt");
            log.info("   - added ax_Imt");
        }
        //---------------------------------------------


        //----------------rzut I kosci srodstopia na pl.podeszwowa----------------
        PointDescriptor xing_1_PP = null;
        PointDescriptor nfdp7_PP = null;
        if(xing_1 != null && nfdp7 != null) {
            float[] p_xing_1 = xing_1.getWorldCoords();
            float[] p_nfdp7 = nfdp7.getWorldCoords();
            double[] v_xing_1_nfdp7 = createVector(p_xing_1, p_nfdp7);
            double[] axImtPP = castVectorToPlane(v_xing_1_nfdp7, base_n, base_p);

            float[] p_xing_1_PP = castPointToPlane(p_xing_1, base_n, base_p);
            float[] p_nfdp7_PP = castPointToPlane(p_nfdp7, base_n, base_p);
            gparams.removePoint(gparams.getPointsDescriptorByName("xing_1_PP"));
            gparams.addPoint("xing_1_PP", p_xing_1_PP);
            xing_1_PP = gparams.getPointsDescriptorByName("xing_1_PP");
            gparams.removePoint(gparams.getPointsDescriptorByName("nfdp7_PP"));
            gparams.addPoint("nfdp7_PP", p_nfdp7_PP);
            nfdp7_PP = gparams.getPointsDescriptorByName("nfdp7_PP");
            gparams.addConnection(xing_1_PP, nfdp7_PP, "ax_Imt_PP");
            log.info("   - added ax_Imt_PP");
        }
        //------------------------------------------------------------------------


        //-------os II kosci srodstopia-----------------
        // nfdp: 15,16,17,18,19
        PointDescriptor nfdp15 = nfd.getPointById("nfdp15").getPointDescriptor();
        PointDescriptor nfdp16 = nfd.getPointById("nfdp16").getPointDescriptor();
        PointDescriptor nfdp17 = nfd.getPointById("nfdp17").getPointDescriptor();
        PointDescriptor nfdp18 = nfd.getPointById("nfdp18").getPointDescriptor();
        PointDescriptor nfdp19 = nfd.getPointById("nfdp19").getPointDescriptor();
        PointDescriptor xing_2 = null;
        if(nfdp15 != null && nfdp16 != null && nfdp17 != null && nfdp18 != null && nfdp19 != null) {
            CalculablePoint c_xing_2 = CalculablePointsPool.getXing2SegmentsCalculablePoint("2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp15);
            pds.add(nfdp16);
            pds.add(nfdp17);
            pds.add(nfdp18);
            c_xing_2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_2.getName()));
            gparams.addPoint(c_xing_2.getName(), c_xing_2.getValue());
            xing_2 = gparams.getPointsDescriptorByName(c_xing_2.getName());
            gparams.addConnection(xing_2, nfdp19, "ax_IImt");
            log.info("   - added ax_IImt");
        }
        //---------------------------------------------

        //----------------rzut II kosci srodstopia na pl.podeszwowa----------------
        PointDescriptor xing_2_PP = null;
        PointDescriptor nfdp19_PP = null;
        if(xing_2 != null && nfdp19 != null) {
            float[] p_xing_2 = xing_2.getWorldCoords();
            float[] p_nfdp19 = nfdp19.getWorldCoords();
            double[] v_xing_2_nfdp19 = createVector(p_xing_2, p_nfdp19);
            double[] axIImtPP = castVectorToPlane(v_xing_2_nfdp19, base_n, base_p);

            float[] p_xing_2_PP = castPointToPlane(p_xing_2, base_n, base_p);
            float[] p_nfdp19_PP = castPointToPlane(p_nfdp19, base_n, base_p);
            gparams.removePoint(gparams.getPointsDescriptorByName("xing_2_PP"));
            gparams.addPoint("xing_2_PP", p_xing_2_PP);
            xing_2_PP = gparams.getPointsDescriptorByName("xing_2_PP");
            gparams.removePoint(gparams.getPointsDescriptorByName("nfdp19_PP"));
            gparams.addPoint("nfdp19_PP", p_nfdp19_PP);
            nfdp19_PP = gparams.getPointsDescriptorByName("nfdp19_PP");
            gparams.addConnection(xing_2_PP, nfdp19_PP, "ax_IImt_PP");
            log.info("   - added ax_IImt_PP");
        }
        //------------------------------------------------------------------------


        //-------os III kosci srodstopia-----------------
        // nfdp: 20,21,22,23,24
        PointDescriptor nfdp20 = nfd.getPointById("nfdp20").getPointDescriptor();
        PointDescriptor nfdp21 = nfd.getPointById("nfdp21").getPointDescriptor();
        PointDescriptor nfdp22 = nfd.getPointById("nfdp22").getPointDescriptor();
        PointDescriptor nfdp23 = nfd.getPointById("nfdp23").getPointDescriptor();
        PointDescriptor nfdp24 = nfd.getPointById("nfdp24").getPointDescriptor();
        PointDescriptor xing_3 = null;
        if(nfdp20 != null && nfdp21 != null && nfdp22 != null && nfdp23 != null && nfdp24 != null) {
            CalculablePoint c_xing_3 = CalculablePointsPool.getXing2SegmentsCalculablePoint("3");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp20);
            pds.add(nfdp21);
            pds.add(nfdp22);
            pds.add(nfdp23);
            c_xing_3.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_3.getName()));
            gparams.addPoint(c_xing_3.getName(), c_xing_3.getValue());
            xing_3 = gparams.getPointsDescriptorByName(c_xing_3.getName());
            gparams.addConnection(xing_3, nfdp24, "ax_IIImt");
            log.info("   - added ax_IIImt");
        }
        //---------------------------------------------

        //-------os IV kosci srodstopia-----------------
        // nfdp: 25,26,27,28,29
        PointDescriptor nfdp25 = nfd.getPointById("nfdp25").getPointDescriptor();
        PointDescriptor nfdp26 = nfd.getPointById("nfdp26").getPointDescriptor();
        PointDescriptor nfdp27 = nfd.getPointById("nfdp27").getPointDescriptor();
        PointDescriptor nfdp28 = nfd.getPointById("nfdp28").getPointDescriptor();
        PointDescriptor nfdp29 = nfd.getPointById("nfdp29").getPointDescriptor();
        PointDescriptor xing_4 = null;
        if(nfdp25 != null && nfdp26 != null && nfdp27 != null && nfdp28 != null && nfdp29 != null) {
            CalculablePoint c_xing_4 = CalculablePointsPool.getXing2SegmentsCalculablePoint("4");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp25);
            pds.add(nfdp26);
            pds.add(nfdp27);
            pds.add(nfdp28);
            c_xing_4.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_4.getName()));
            gparams.addPoint(c_xing_4.getName(), c_xing_4.getValue());
            xing_4 = gparams.getPointsDescriptorByName(c_xing_4.getName());
            gparams.addConnection(xing_4, nfdp29, "ax_IVmt");
            log.info("   - added ax_IVmt");
        }
        //---------------------------------------------

        //-------os V kosci srodstopia-----------------
        // nfdp: 30,31,32,33,34
        PointDescriptor nfdp30 = nfd.getPointById("nfdp30").getPointDescriptor();
        PointDescriptor nfdp31 = nfd.getPointById("nfdp31").getPointDescriptor();
        PointDescriptor nfdp32 = nfd.getPointById("nfdp32").getPointDescriptor();
        PointDescriptor nfdp33 = nfd.getPointById("nfdp33").getPointDescriptor();
        PointDescriptor nfdp34 = nfd.getPointById("nfdp34").getPointDescriptor();
        PointDescriptor xing_5 = null;
        if(nfdp30 != null && nfdp31 != null && nfdp32 != null && nfdp33 != null && nfdp34 != null) {
            CalculablePoint c_xing_5 = CalculablePointsPool.getXing2SegmentsCalculablePoint("5");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp30);
            pds.add(nfdp31);
            pds.add(nfdp32);
            pds.add(nfdp33);
            c_xing_5.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_5.getName()));
            gparams.addPoint(c_xing_5.getName(), c_xing_5.getValue());
            xing_5 = gparams.getPointsDescriptorByName(c_xing_5.getName());
            gparams.addConnection(xing_5, nfdp34, "ax_Vmt");
            log.info("   - added ax_Vmt");
        }
        //---------------------------------------------


        //-------os paliczka blizszego palucha-----------------
        // nfdp: 37,38,81,82,9,11,83,84
        PointDescriptor nfdp37 = nfd.getPointById("nfdp37").getPointDescriptor();
        PointDescriptor nfdp38 = nfd.getPointById("nfdp38").getPointDescriptor();
        PointDescriptor nfdp81 = nfd.getPointById("nfdp81").getPointDescriptor();
        PointDescriptor nfdp82 = nfd.getPointById("nfdp82").getPointDescriptor();
        PointDescriptor nfdp9 = nfd.getPointById("nfdp9").getPointDescriptor();
        PointDescriptor nfdp11 = nfd.getPointById("nfdp11").getPointDescriptor();
        PointDescriptor nfdp83 = nfd.getPointById("nfdp83").getPointDescriptor();
        PointDescriptor nfdp84 = nfd.getPointById("nfdp84").getPointDescriptor();
        PointDescriptor xing_1p1 = null;
        PointDescriptor xing_1p2 = null;
        if(nfdp37 != null && nfdp38 != null && nfdp81 != null && nfdp82 != null && nfdp9 != null && nfdp11 != null && nfdp83 != null && nfdp84 != null) {
            CalculablePoint c_xing_1p1 = CalculablePointsPool.getXing2SegmentsCalculablePoint("1p1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp37);
            pds.add(nfdp38);
            pds.add(nfdp81);
            pds.add(nfdp82);
            c_xing_1p1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_1p1.getName()));
            gparams.addPoint(c_xing_1p1.getName(), c_xing_1p1.getValue());
            xing_1p1 = gparams.getPointsDescriptorByName(c_xing_1p1.getName());

            CalculablePoint c_xing_1p2 = CalculablePointsPool.getXing2SegmentsCalculablePoint("1p2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp9);
            pds.add(nfdp11);
            pds.add(nfdp83);
            pds.add(nfdp84);
            c_xing_1p2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_xing_1p2.getName()));
            gparams.addPoint(c_xing_1p2.getName(), c_xing_1p2.getValue());
            xing_1p2 = gparams.getPointsDescriptorByName(c_xing_1p2.getName());

            gparams.addConnection(xing_1p1, xing_1p2, "ax_Iph");
            log.info("   - added ax_Iph");
        }
        //---------------------------------------------

        //----------------rzut osi paliczka blizaszego palucha na pl.podeszwowa----------------
        PointDescriptor xing_1p1_PP = null;
        PointDescriptor xing_1p2_PP = null;
        if(xing_1p1 != null && xing_1p2 != null) {
            float[] p_xing_1p1 = xing_1p1.getWorldCoords();
            float[] p_xing_1p2 = xing_1p2.getWorldCoords();
            double[] v_xing_1p1_xing_1p2 = createVector(p_xing_1p1, p_xing_1p2);
            double[] axIphPP = castVectorToPlane(v_xing_1p1_xing_1p2, base_n, base_p);

            float[] p_xing_1p1_PP = castPointToPlane(p_xing_1p1, base_n, base_p);
            float[] p_xing_1p2_PP = castPointToPlane(p_xing_1p2, base_n, base_p);
            gparams.removePoint(gparams.getPointsDescriptorByName("xing_1p1_PP"));
            gparams.addPoint("xing_1p1_PP", p_xing_1p1_PP);
            xing_1p1_PP = gparams.getPointsDescriptorByName("xing_1p1_PP");
            gparams.removePoint(gparams.getPointsDescriptorByName("xing_1p2_PP"));
            gparams.addPoint("xing_1p2_PP", p_xing_1p2_PP);
            xing_1p2_PP = gparams.getPointsDescriptorByName("xing_1p2_PP");
            gparams.addConnection(xing_1p1_PP, xing_1p2_PP, "ax_Iph_PP");
            log.info("   - added ax_Iph_PP");
        }
        //------------------------------------------------------------------------



        //-------os paliczka blizszego II palca-----------------
        // nfdp: 46,47,48,49
        PointDescriptor nfdp46 = nfd.getPointById("nfdp46").getPointDescriptor();
        PointDescriptor nfdp47 = nfd.getPointById("nfdp47").getPointDescriptor();
        PointDescriptor nfdp48 = nfd.getPointById("nfdp48").getPointDescriptor();
        PointDescriptor nfdp49 = nfd.getPointById("nfdp49").getPointDescriptor();
        PointDescriptor hwp_2p1 = null;
        PointDescriptor hwp_2p2 = null;
        if(nfdp46 != null && nfdp47 != null && nfdp48 != null && nfdp49 != null) {
            CalculablePoint c_hwp_2p1 = CalculablePointsPool.getCenter2PointsCalculablePoint("2p1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp46);
            pds.add(nfdp47);
            c_hwp_2p1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_2p1.getName()));
            gparams.addPoint(c_hwp_2p1.getName(), c_hwp_2p1.getValue());
            hwp_2p1 = gparams.getPointsDescriptorByName(c_hwp_2p1.getName());

            CalculablePoint c_hwp_2p2 = CalculablePointsPool.getCenter2PointsCalculablePoint("2p2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp48);
            pds.add(nfdp49);
            c_hwp_2p2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_2p2.getName()));
            gparams.addPoint(c_hwp_2p2.getName(), c_hwp_2p2.getValue());
            hwp_2p2 = gparams.getPointsDescriptorByName(c_hwp_2p2.getName());


            gparams.addConnection(hwp_2p1, hwp_2p2, "ax_IIph");
            log.info("   - added ax_IIph");
        }
        //---------------------------------------------

        //-------os paliczka blizszego III palca-----------------
        // nfdp: 50,51,52,53
        PointDescriptor nfdp50 = nfd.getPointById("nfdp50").getPointDescriptor();
        PointDescriptor nfdp51 = nfd.getPointById("nfdp51").getPointDescriptor();
        PointDescriptor nfdp52 = nfd.getPointById("nfdp52").getPointDescriptor();
        PointDescriptor nfdp53 = nfd.getPointById("nfdp53").getPointDescriptor();
        PointDescriptor hwp_3p1 = null;
        PointDescriptor hwp_3p2 = null;
        if(nfdp50 != null && nfdp51 != null && nfdp52 != null && nfdp53 != null) {
            CalculablePoint c_hwp_3p1 = CalculablePointsPool.getCenter2PointsCalculablePoint("3p1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp50);
            pds.add(nfdp51);
            c_hwp_3p1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_3p1.getName()));
            gparams.addPoint(c_hwp_3p1.getName(), c_hwp_3p1.getValue());
            hwp_3p1 = gparams.getPointsDescriptorByName(c_hwp_3p1.getName());

            CalculablePoint c_hwp_3p2 = CalculablePointsPool.getCenter2PointsCalculablePoint("3p2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp52);
            pds.add(nfdp53);
            c_hwp_3p2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_3p2.getName()));
            gparams.addPoint(c_hwp_3p2.getName(), c_hwp_3p2.getValue());
            hwp_3p2 = gparams.getPointsDescriptorByName(c_hwp_3p2.getName());


            gparams.addConnection(hwp_3p1, hwp_3p2, "ax_IIIph");
            log.info("   - added ax_IIIph");
        }
        //---------------------------------------------

        //-------os paliczka blizszego IV palca-----------------
        // nfdp: 54,55,56,57
        PointDescriptor nfdp54 = nfd.getPointById("nfdp54").getPointDescriptor();
        PointDescriptor nfdp55 = nfd.getPointById("nfdp55").getPointDescriptor();
        PointDescriptor nfdp56 = nfd.getPointById("nfdp56").getPointDescriptor();
        PointDescriptor nfdp57 = nfd.getPointById("nfdp57").getPointDescriptor();
        PointDescriptor hwp_4p1 = null;
        PointDescriptor hwp_4p2 = null;
        if(nfdp54 != null && nfdp55 != null && nfdp56 != null && nfdp57 != null) {
            CalculablePoint c_hwp_4p1 = CalculablePointsPool.getCenter2PointsCalculablePoint("4p1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp54);
            pds.add(nfdp55);
            c_hwp_4p1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_4p1.getName()));
            gparams.addPoint(c_hwp_4p1.getName(), c_hwp_4p1.getValue());
            hwp_4p1 = gparams.getPointsDescriptorByName(c_hwp_4p1.getName());

            CalculablePoint c_hwp_4p2 = CalculablePointsPool.getCenter2PointsCalculablePoint("4p2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp56);
            pds.add(nfdp57);
            c_hwp_4p2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_4p2.getName()));
            gparams.addPoint(c_hwp_4p2.getName(), c_hwp_4p2.getValue());
            hwp_4p2 = gparams.getPointsDescriptorByName(c_hwp_4p2.getName());


            gparams.addConnection(hwp_4p1, hwp_4p2, "ax_IVph");
            log.info("   - added ax_IVph");
        }
        //---------------------------------------------

        //-------os paliczka blizszego V palca-----------------
        // nfdp: 58,59,60,61
        PointDescriptor nfdp58 = nfd.getPointById("nfdp58").getPointDescriptor();
        PointDescriptor nfdp59 = nfd.getPointById("nfdp59").getPointDescriptor();
        PointDescriptor nfdp60 = nfd.getPointById("nfdp60").getPointDescriptor();
        PointDescriptor nfdp61 = nfd.getPointById("nfdp61").getPointDescriptor();
        PointDescriptor hwp_5p1 = null;
        PointDescriptor hwp_5p2 = null;
        if(nfdp58 != null && nfdp59 != null && nfdp60 != null && nfdp61 != null) {
            CalculablePoint c_hwp_5p1 = CalculablePointsPool.getCenter2PointsCalculablePoint("5p1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp58);
            pds.add(nfdp59);
            c_hwp_5p1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_5p1.getName()));
            gparams.addPoint(c_hwp_5p1.getName(), c_hwp_5p1.getValue());
            hwp_5p1 = gparams.getPointsDescriptorByName(c_hwp_5p1.getName());

            CalculablePoint c_hwp_5p2 = CalculablePointsPool.getCenter2PointsCalculablePoint("5p2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp60);
            pds.add(nfdp61);
            c_hwp_5p2.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_5p2.getName()));
            gparams.addPoint(c_hwp_5p2.getName(), c_hwp_5p2.getValue());
            hwp_5p2 = gparams.getPointsDescriptorByName(c_hwp_5p2.getName());


            gparams.addConnection(hwp_5p1, hwp_5p2, "ax_Vph");
            log.info("   - added ax_Vph");
        }
        //---------------------------------------------


        //-------os paliczka paznokciowego palucha-----------------
        // nfdp: 12,13,14
        PointDescriptor nfdp12 = nfd.getPointById("nfdp12").getPointDescriptor();
        PointDescriptor nfdp13 = nfd.getPointById("nfdp13").getPointDescriptor();
        PointDescriptor nfdp14 = nfd.getPointById("nfdp14").getPointDescriptor();
        PointDescriptor hwp_1d1 = null;
        if(nfdp12 != null && nfdp13 != null && nfdp14 != null) {
            CalculablePoint c_hwp_1d1 = CalculablePointsPool.getCenter2PointsCalculablePoint("1d1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(nfdp12);
            pds.add(nfdp13);
            c_hwp_1d1.setPointDescriptors(pds);
            gparams.removePoint(gparams.getPointsDescriptorByName(c_hwp_1d1.getName()));
            gparams.addPoint(c_hwp_1d1.getName(), c_hwp_1d1.getValue());
            hwp_1d1 = gparams.getPointsDescriptorByName(c_hwp_1d1.getName());

            gparams.addConnection(hwp_1d1, nfdp14, "ax_Id");
            log.info("   - added ax_Id");
        }
        //---------------------------------------------



        //-------kat koslawosci palucha - HVA / M1P1-----------------
        // xing_1,nfdp7,xing_1p1,xing_1p2
        if(xing_1 != null && nfdp7 != null && xing_1p1 != null && xing_1p2 != null) {
            CalculableParameter c_hva = CalculableParamsPool.getAngleFrom2LinesCalculable("M1P1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(xing_1);
            pds.add(nfdp7);
            pds.add(xing_1p1);
            pds.add(xing_1p2);
            c_hva.setPointDescriptors(pds);
            cparams.removeCalculableParameter(cparams.getCalculableParameterByName(c_hva.getName()));
            cparams.addCalculableParameter(c_hva);
            log.info("   - added angle_M1P1");
        }
        //---------------------------------------------

        //-------kat koslawosci palucha w plaszczyznie podeszwowej - HVA_PP / M1P1_PP-----------------
        // xing_1_PP,nfdp7_PP,xing_1p1_PP,xing_1p2_PP
        if(xing_1_PP != null && nfdp7_PP != null && xing_1p1_PP != null && xing_1p2_PP != null) {
            CalculableParameter c_hva = CalculableParamsPool.getAngleFrom2LinesCalculable("M1P1_PP");
            pds = new ArrayList<PointDescriptor>();
            pds.add(xing_1_PP);
            pds.add(nfdp7_PP);
            pds.add(xing_1p1_PP);
            pds.add(xing_1p2_PP);
            c_hva.setPointDescriptors(pds);
            cparams.removeCalculableParameter(cparams.getCalculableParameterByName(c_hva.getName()));
            cparams.addCalculableParameter(c_hva);
            log.info("   - added angle_M1P1_PP");
        }
        //---------------------------------------------

        //-------kat miedzymetatarsalny - M1M2-----------------
        // xing_1,nfdp7,xing_2,nfdp19
        if(xing_1 != null && nfdp7 != null && xing_2 != null && nfdp19 != null) {
            CalculableParameter c_hva = CalculableParamsPool.getAngleFrom2LinesCalculable("M1M2");
            pds = new ArrayList<PointDescriptor>();
            pds.add(xing_1);
            pds.add(nfdp7);
            pds.add(xing_2);
            pds.add(nfdp19);
            c_hva.setPointDescriptors(pds);
            cparams.removeCalculableParameter(cparams.getCalculableParameterByName(c_hva.getName()));
            cparams.addCalculableParameter(c_hva);
            log.info("   - added angle_M1M2");
        }
        //---------------------------------------------

        //-------kat miedzypaliczkowy palucha - P1D1-----------------
        // xing_1p1,xing_1p2, hwp_1d1, nfdp14
        if(xing_1p1 != null && xing_1p2 != null && hwp_1d1 != null && nfdp14 != null) {
            CalculableParameter c_p1d1 = CalculableParamsPool.getAngleFrom2LinesCalculable("P1D1");
            pds = new ArrayList<PointDescriptor>();
            pds.add(xing_1p1);
            pds.add(xing_1p2);
            pds.add(hwp_1d1);
            pds.add(nfdp14);
            c_p1d1.setPointDescriptors(pds);
            cparams.removeCalculableParameter(cparams.getCalculableParameterByName(c_p1d1.getName()));
            cparams.addCalculableParameter(c_p1d1);
            log.info("   - added angle_P1D1");
        }
        //---------------------------------------------

        log.info("...finished processing NFD.");
    }

    private double[] createVector(float[] p0, float[] p1) {
        double[] out = new double[3];
        for (int i = 0; i < 3; i++) {
            out[i] = (double)p1[i] - (double)p0[i];
        }
        return out;
    }

    private double[] castPointToPlane(double[] p, double[] n, double[] p0) {
        double[] out = new double[3];
        double t = 0, nn = 0;
        for (int i = 0; i < 3; i++) {
            nn += n[i]*n[i];
            t += n[i]*(p0[i]-p[i]);
        }

        for (int i = 0; i < 3; i++) {
            out[i] = p[i] + n[i]*t/nn;
        }
        return out;
    }

    private float[] castPointToPlane(float[] p, double[] n, double[] p0) {
        float[] out = new float[3];
        double t = 0, nn = 0;
        for (int i = 0; i < 3; i++) {
            nn += n[i]*n[i];
            t += n[i]*((double)p0[i]-(double)p[i]);
        }

        for (int i = 0; i < 3; i++) {
            out[i] = (float)((double)p[i] + n[i]*t/nn);
        }
        return out;
    }

    private double[] castVectorToPlane(double[] v, double[] n, double[] p0) {
        double[] out = new double[3];
        double nv = 0, nn = 0;
        for (int i = 0; i < 3; i++) {
            nn += n[i]*n[i];
            nv += n[i]*v[i];
        }

        for (int i = 0; i < 3; i++) {
            out[i] = v[i] - n[i]*nv/nn;
        }
        return out;        
    }
}


