/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.ViewPanels;

import java.awt.Dimension;
import java.util.Vector;
import javax.swing.event.ChangeEvent;
import pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.GeometryTools.GeometryTool;
import pl.edu.icm.visnow.lib.basic.viewers.FieldViewer3D.GeometryTools.GeometryToolListener;

/**
 * @author  Bartosz Borucki (babor@icm.edu.pl)
 * University of Warsaw, Interdisciplinary Centre
 * for Mathematical and Computational Modelling
 */

public class ViewPanel extends javax.swing.JPanel implements GeometryToolListener {
    public static final int VIEW_NONE = 0;
    public static final int VIEW_3D = 1;
    public static final int VIEW_SLICE_I = 2;       //plane YZ
    public static final int VIEW_SLICE_J = 3;       //plane XZ
    public static final int VIEW_SLICE_K = 4;       //plane XY
    public static final int VIEW_SLICE_CUSTOM = 5;  //custom plane
    public static final int VIEW_SLICE_I_TRANS = 6; //plane ZY
    public static final int VIEW_SLICE_J_TRANS = 7; //plane ZX
    public static final int VIEW_SLICE_K_TRANS = 8; //plane YX
    public static final int VIEW_SLICE_CUSTOM_ORTHO_0 = 9;  //custom ortho plane 0
    public static final int VIEW_SLICE_CUSTOM_ORTHO_1 = 10;  //custom ortho plane 1
    public static final int VIEW_SLICE_CUSTOM_ORTHO_2 = 11;  //custom ortho plane 2
    public static final int VIEW_2D = 12;  

    private String name;

    private int type = VIEW_NONE;

    private boolean inUse = false;

    protected GeometryTool geomTool = null;


    /** Creates new form ViewPanel */
    public ViewPanel() {
        this("ViewPanel", VIEW_NONE);
    }

    public ViewPanel(String name, int type) {
        this.name = name;
        this.type = type;
        initComponents();
        statusLabel.setText(name);
        this.setMinimumSize(new Dimension(50,50));
    }

    public void update() {
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      statusLabel = new javax.swing.JLabel();

      setLayout(new java.awt.BorderLayout());

      statusLabel.setText("VP");
      statusLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
      add(statusLabel, java.awt.BorderLayout.CENTER);
   }// </editor-fold>//GEN-END:initComponents


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel statusLabel;
   // End of variables declaration//GEN-END:variables

    /**
     * @return the name
     */
    @Override
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    @Override
    public void setName(String name) {
        this.name = name;
        statusLabel.setText(name);
    }

    /**
     * @return the type
     */
    public int getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(int type) {
        this.type = type;
    }

    /**
     * @return the inUse
     */
    public boolean isInUse() {
        return inUse;
    }

    /**
     * @param inUse the inUse to set
     */
    public void setInUse(boolean inUse) {
        this.inUse = inUse;
        if(inUse) {
            update();
            fireViewPanelUsedEvent();
        }
    }


    protected transient Vector<ViewPanelListener> viewPanelListeners = new Vector<ViewPanelListener>();

    public synchronized void addViewPanelListener(ViewPanelListener listener) {
        viewPanelListeners.add(listener);
    }

    public synchronized void removeViewPanelListener(ViewPanelListener listener) {
        viewPanelListeners.remove(listener);
    }

    public synchronized void removeAllViewPanelListeners() {
        viewPanelListeners.clear();
    }

    public Vector<ViewPanelListener> getAllViewPanelListeners() {
        return viewPanelListeners;
    }

    public Dimension getPreferredViewSize() {
        return this.getMinimumSize();
    }

    private void fireViewPanelEvent() {
        for (ViewPanelListener listener : viewPanelListeners) {
            listener.onViewPanelEvent(new ViewPanelEvent(this));
        }
    }

    private void fireViewPanelUsedEvent() {
        for (ViewPanelListener listener : viewPanelListeners) {
            listener.onViewPanelEvent(new UsedViewPanelEvent(this));
        }
    }

    /**
     * @return the gt
     */
    public GeometryTool getGeometryTool() {
        return geomTool;
    }

    /**
     * @param gt the gt to set
     */
    public void setGeometryTool(GeometryTool gt) {
        if(this.geomTool != null) {
            this.geomTool.removeChangeListener(this);
            this.geomTool = null;
        }

        this.geomTool = gt;

        if(this.geomTool != null) {
            this.geomTool.addChangeListener(this);
        }

        repaint();
    }

    public void onGeometryToolStateChanged(ChangeEvent e) {

    }

    public void onGeometryToolRepaintNeeded() {
        repaint();
    }

    public void preRemove() {        
    }

    public void postAdd() {        
    }
    
}
