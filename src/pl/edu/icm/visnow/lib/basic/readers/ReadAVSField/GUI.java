/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.readers.ReadAVSField;

import java.io.File;
import java.nio.ByteOrder;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import pl.edu.icm.visnow.lib.basic.readers.ReaderParams;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 ** @author Krzysztof S. Nowinski, University of Warsaw ICM
 */
public class GUI extends javax.swing.JPanel
{

   private JFileChooser dataFileChooser = new JFileChooser();
   private FileNameExtensionFilter dataFilter;
   private ReaderParams params = new ReaderParams();
   private String lastPath = null;

   /** Creates new form GUI */
   public GUI()
   {
      initComponents();
      dataFileChooser.setLocation(0,0);
      buttonGroup.add(xdrButton);
      buttonGroup.add(x86Button);
      buttonGroup.add(fileButton);
   }

   public GUI(String title, String dataFileDesc, String ext0, String ext1)
   {
      initComponents();
      moduleLabel.setText(title);
      dataFilter = new FileNameExtensionFilter(dataFileDesc, ext0, ext1);
      dataFileChooser.setFileFilter(dataFilter);
      buttonGroup.add(xdrButton);
      buttonGroup.add(x86Button);
      buttonGroup.add(fileButton);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        selectButton = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        moduleLabel = new javax.swing.JLabel();
        rereadButton = new javax.swing.JButton();
        showBox = new javax.swing.JCheckBox();
        xdrButton = new javax.swing.JRadioButton();
        x86Button = new javax.swing.JRadioButton();
        fileButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldDescription = new javax.swing.JLabel();
        localButton = new javax.swing.JRadioButton();

        setMinimumSize(new java.awt.Dimension(180, 900));
        setPreferredSize(new java.awt.Dimension(200, 920));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        selectButton.setText("browse");
        selectButton.setMaximumSize(new java.awt.Dimension(90, 20));
        selectButton.setMinimumSize(new java.awt.Dimension(90, 20));
        selectButton.setPreferredSize(new java.awt.Dimension(90, 20));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(selectButton, gridBagConstraints);

        fileNameField.setMinimumSize(new java.awt.Dimension(4, 20));
        fileNameField.setPreferredSize(new java.awt.Dimension(4, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        add(fileNameField, gridBagConstraints);

        moduleLabel.setText("read AVS field");
        moduleLabel.setMaximumSize(new java.awt.Dimension(120, 15));
        moduleLabel.setMinimumSize(new java.awt.Dimension(90, 15));
        moduleLabel.setOpaque(true);
        moduleLabel.setPreferredSize(new java.awt.Dimension(90, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(moduleLabel, gridBagConstraints);

        rereadButton.setText("reread");
        rereadButton.setEnabled(false);
        rereadButton.setMaximumSize(new java.awt.Dimension(90, 20));
        rereadButton.setMinimumSize(new java.awt.Dimension(90, 20));
        rereadButton.setPreferredSize(new java.awt.Dimension(90, 20));
        rereadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rereadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        add(rereadButton, gridBagConstraints);

        showBox.setSelected(true);
        showBox.setText("show");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(showBox, gridBagConstraints);

        xdrButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        xdrButton.setText("XDR (big endian)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(xdrButton, gridBagConstraints);

        x86Button.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        x86Button.setText("X86 (little endian)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(x86Button, gridBagConstraints);

        fileButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fileButton.setSelected(true);
        fileButton.setText("file specified");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(fileButton, gridBagConstraints);

        jLabel1.setText("binary data type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 3, 0);
        add(jLabel1, gridBagConstraints);

        fieldDescription.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fieldDescription.setText(null);
        fieldDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(fieldDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        buttonGroup.add(localButton);
        localButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        localButton.setText("local native");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        add(localButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
    {//GEN-HEADEREND:event_selectButtonActionPerformed
       if (lastPath == null)
          dataFileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getUsableDataPath(ReadAVSField.class)));
       else
          dataFileChooser.setCurrentDirectory(new File(lastPath));

       int returnVal = dataFileChooser.showOpenDialog(this);
       if (returnVal == JFileChooser.APPROVE_OPTION)
       {
          String fileName = dataFileChooser.getSelectedFile().getAbsolutePath();
          params.setFileName(fileName);
          lastPath = fileName.substring(0, fileName.lastIndexOf(File.separator));
          VisNow.get().getMainConfig().setLastDataPath(lastPath, ReadAVSField.class);
          rereadButton.setEnabled(true);
       }
       fileNameField.setText(params.getFileName());
       fireStateChanged();
}//GEN-LAST:event_selectButtonActionPerformed

    private void rereadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rereadButtonActionPerformed
    {//GEN-HEADEREND:event_rereadButtonActionPerformed
       fireStateChanged();
    }//GEN-LAST:event_rereadButtonActionPerformed

   public void setFieldDescription(String s)
   {
      fieldDescription.setText(s);
   }
   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList =
           new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove(listener);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void fireStateChanged()
   {
      if (xdrButton.isSelected())
         params.setEndian(ByteOrder.BIG_ENDIAN);
      if (x86Button.isSelected())
         params.setEndian(ByteOrder.LITTLE_ENDIAN);
      if (fileButton.isSelected())
         params.setEndian(ByteOrder.BIG_ENDIAN);
      if (localButton.isSelected())
         params.setEndian(ByteOrder.nativeOrder());
      params.setShow(showBox.isSelected());
      params.fireStateChanged();
   }
   /**
    * @param params the params to set
    */
   public void setParams(ReaderParams params)
   {
      this.params = params;
   }

   public String getLastPath()
   {
      return lastPath;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.ButtonGroup buttonGroup;
    protected javax.swing.JLabel fieldDescription;
    protected javax.swing.JRadioButton fileButton;
    protected javax.swing.JTextField fileNameField;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JRadioButton localButton;
    protected javax.swing.JLabel moduleLabel;
    protected javax.swing.JButton rereadButton;
    protected javax.swing.JButton selectButton;
    protected javax.swing.JCheckBox showBox;
    protected javax.swing.JRadioButton x86Button;
    protected javax.swing.JRadioButton xdrButton;
    // End of variables declaration//GEN-END:variables

    public void activateOpenDialog() {
        selectButtonActionPerformed(null);        
    }
}
