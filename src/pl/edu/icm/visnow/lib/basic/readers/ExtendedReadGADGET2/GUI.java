/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.readers.ExtendedReadGADGET2;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends JPanel {

    private JFileChooser dataFileChooser = new JFileChooser();
    protected Params params = new Params();
    private String lastPath = null;
    boolean silent = false;

    /** Creates new form GUI */
    public GUI() {
        initComponents();
        dataFileChooser.setLocation(0, 0);
        dataFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        dataFileChooser.setMultiSelectionEnabled(true);
        updateGUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        downsizeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileNameList = new javax.swing.JList();
        selectButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        downsizeSP = new javax.swing.JSpinner();
        downsizeRB = new javax.swing.JRadioButton();
        autoDownsizeRB = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        readVelocityCB = new javax.swing.JCheckBox();
        readIdCB = new javax.swing.JCheckBox();
        readTypeCB = new javax.swing.JCheckBox();
        readMassCB = new javax.swing.JCheckBox();
        readEnergyCB = new javax.swing.JCheckBox();
        readDensityCB = new javax.swing.JCheckBox();
        readTempCB = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        dfdLabel = new javax.swing.JLabel();
        dfDimxTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dfDimyTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dfDimzTF = new javax.swing.JTextField();
        densityFieldLogCB = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        rereadButton = new javax.swing.JButton();
        showCB = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldDescription = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setMinimumSize(new java.awt.Dimension(180, 850));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(200, 860));
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setMinimumSize(new java.awt.Dimension(150, 80));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(180, 100));

        fileNameList.setBackground(java.awt.SystemColor.control);
        fileNameList.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        fileNameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileNameList.setVisibleRowCount(4);
        jScrollPane2.setViewportView(fileNameList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        selectButton.setText("browse");
        selectButton.setMaximumSize(new java.awt.Dimension(90, 20));
        selectButton.setMinimumSize(new java.awt.Dimension(90, 20));
        selectButton.setPreferredSize(new java.awt.Dimension(90, 20));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        jPanel1.add(selectButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        downsizeSP.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        downsizeSP.setMinimumSize(new java.awt.Dimension(56, 18));
        downsizeSP.setPreferredSize(new java.awt.Dimension(56, 18));
        downsizeSP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                downsizeSPStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel4.add(downsizeSP, gridBagConstraints);

        downsizeGroup.add(downsizeRB);
        downsizeRB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        downsizeRB.setText("downsize");
        downsizeRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                downsizeRBStateChanged(evt);
            }
        });
        downsizeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downsizeRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(downsizeRB, gridBagConstraints);

        downsizeGroup.add(autoDownsizeRB);
        autoDownsizeRB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        autoDownsizeRB.setSelected(true);
        autoDownsizeRB.setText("auto downsize to memory");
        autoDownsizeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDownsizeRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(autoDownsizeRB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        readVelocityCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readVelocityCB.setText("particle velocities");
        readVelocityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readVelocityCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel5.add(readVelocityCB, gridBagConstraints);

        readIdCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readIdCB.setText("particle identifications");
        readIdCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readIdCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readIdCB, gridBagConstraints);

        readTypeCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readTypeCB.setText("particle types");
        readTypeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readTypeCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readTypeCB, gridBagConstraints);

        readMassCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readMassCB.setText("particle masses");
        readMassCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMassCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readMassCB, gridBagConstraints);

        readEnergyCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readEnergyCB.setText("internal energy");
        readEnergyCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readEnergyCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readEnergyCB, gridBagConstraints);

        readDensityCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readDensityCB.setText("density");
        readDensityCB.setEnabled(false);
        readDensityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readDensityCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readDensityCB, gridBagConstraints);

        readTempCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        readTempCB.setText("calculate temperature");
        readTempCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readTempCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(readTempCB, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        dfdLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dfdLabel.setText("density field resolution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 2, 0);
        jPanel6.add(dfdLabel, gridBagConstraints);

        dfDimxTF.setMinimumSize(new java.awt.Dimension(20, 20));
        dfDimxTF.setPreferredSize(new java.awt.Dimension(20, 20));
        dfDimxTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfDimxTFActionPerformed(evt);
            }
        });
        dfDimxTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dfDimxTFFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel6.add(dfDimxTF, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel2.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel6.add(jLabel2, gridBagConstraints);

        dfDimyTF.setMinimumSize(new java.awt.Dimension(20, 20));
        dfDimyTF.setPreferredSize(new java.awt.Dimension(20, 20));
        dfDimyTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfDimyTFActionPerformed(evt);
            }
        });
        dfDimyTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dfDimyTFFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(dfDimyTF, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel3.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel6.add(jLabel3, gridBagConstraints);

        dfDimzTF.setMinimumSize(new java.awt.Dimension(20, 20));
        dfDimzTF.setPreferredSize(new java.awt.Dimension(20, 20));
        dfDimzTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfDimzTFActionPerformed(evt);
            }
        });
        dfDimzTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dfDimzTFFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        jPanel6.add(dfDimzTF, gridBagConstraints);

        densityFieldLogCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        densityFieldLogCB.setText("density field Log");
        densityFieldLogCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                densityFieldLogCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(densityFieldLogCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel5.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        rereadButton.setText("reread");
        rereadButton.setEnabled(false);
        rereadButton.setMaximumSize(new java.awt.Dimension(90, 20));
        rereadButton.setMinimumSize(new java.awt.Dimension(90, 20));
        rereadButton.setPreferredSize(new java.awt.Dimension(90, 20));
        rereadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rereadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 1);
        jPanel3.add(rereadButton, gridBagConstraints);

        showCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        showCB.setText("show");
        showCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(showCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(jPanel3, gridBagConstraints);

        fieldDescription.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fieldDescription.setText(null);
        fieldDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(fieldDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
   {//GEN-HEADEREND:event_selectButtonActionPerformed
       if (lastPath == null) {
           dataFileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getUsableDataPath(ExtendedGadgetReader.class)));       
       } else {
           dataFileChooser.setCurrentDirectory(new File(lastPath));
       }

       int returnVal = dataFileChooser.showOpenDialog(this);
       if (returnVal == JFileChooser.APPROVE_OPTION) {
           File[] files = dataFileChooser.getSelectedFiles();
           ArrayList<String> filePaths = new ArrayList<String>();
           for (int i = 0; i < files.length; i++) {
               filePaths.add(files[i].getAbsolutePath());
           }           
           Collections.sort(filePaths);
           String[] txt = new String[filePaths.size()];
           for (int i = 0; i < txt.length; i++) {
               txt[i] = filePaths.get(i);
           }
           fileNameList.setListData(txt);           
           lastPath = txt[0].substring(0, txt[0].lastIndexOf(File.separator));
           VisNow.get().getMainConfig().setLastDataPath(lastPath, ExtendedGadgetReader.class);
           rereadButton.setEnabled(true);
           rereadButtonActionPerformed(null);
       }
   }//GEN-LAST:event_selectButtonActionPerformed

private void rereadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rereadButtonActionPerformed
    String[] txt = new String[fileNameList.getModel().getSize()];
    for (int i = 0; i < txt.length; i++) {
        txt[i] = (String) fileNameList.getModel().getElementAt(i);
    }
    if (txt != null && txt.length > 0) {
        params.setFilePaths(txt);
    }
}//GEN-LAST:event_rereadButtonActionPerformed

private void readVelocityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readVelocityCBActionPerformed
    if(!readVelocityCB.isSelected() && getNSelected() == 1) {
        readVelocityCB.setSelected(true);
        return;
    }
    params.setReadVelocity(readVelocityCB.isSelected());
}//GEN-LAST:event_readVelocityCBActionPerformed

private void readIdCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readIdCBActionPerformed
    if(!readIdCB.isSelected() && getNSelected() == 1) {
        readIdCB.setSelected(true);
        return;
    }
    params.setReadId(readIdCB.isSelected());
}//GEN-LAST:event_readIdCBActionPerformed

private void readTypeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readTypeCBActionPerformed
    if(!readTypeCB.isSelected() && getNSelected() == 1) {
        readTypeCB.setSelected(true);
        return;
    }
    params.setReadType(readTypeCB.isSelected());
}//GEN-LAST:event_readTypeCBActionPerformed

private void readMassCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMassCBActionPerformed
    if(!readMassCB.isSelected() && getNSelected() == 1) {
        readMassCB.setSelected(true);
        return;
    }

    params.setReadMass(readMassCB.isSelected());
    updateGUI();
}//GEN-LAST:event_readMassCBActionPerformed

private void readEnergyCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readEnergyCBActionPerformed
    if((!readEnergyCB.isSelected() && getNSelected() == 1) ||
            (!readEnergyCB.isSelected() && readTempCB.isSelected() && getNSelected() == 2)) {
        readEnergyCB.setSelected(true);
        return;
    }

    params.setReadEnergy(readEnergyCB.isSelected());
    if(!readEnergyCB.isSelected() && readTempCB.isSelected()) {
        readTempCB.setSelected(false);
        params.setReadTemperature(false);
    }
    readTempCB.setEnabled(readEnergyCB.isSelected());
    

}//GEN-LAST:event_readEnergyCBActionPerformed

private void readDensityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readDensityCBActionPerformed
//    if(!readDensityCB.isSelected() && getNSelected() == 1) {
//        readDensityCB.setSelected(true);
//        return;
//    }
//    params.setReadDensity(readDensityCB.isSelected());
}//GEN-LAST:event_readDensityCBActionPerformed

private void readTempCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readTempCBActionPerformed
    if(!readTempCB.isSelected() && getNSelected() == 1) {
        readTempCB.setSelected(true);
        return;
    }
    params.setReadTemperature(readTempCB.isSelected());
}//GEN-LAST:event_readTempCBActionPerformed

private void downsizeSPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_downsizeSPStateChanged
    int v = (Integer)downsizeSP.getValue();
    if(v < 1) {
        downsizeSP.setValue(1);
        return;
    }
    
    if(!silent) {
        params.setDownsize(v);
    }
}//GEN-LAST:event_downsizeSPStateChanged

    private void showCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCBActionPerformed
        params.setShow(showCB.isSelected());
    }//GEN-LAST:event_showCBActionPerformed

    private void downsizeRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_downsizeRBStateChanged

    }//GEN-LAST:event_downsizeRBStateChanged

    private void downsizeRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downsizeRBActionPerformed
        manageDownsize();
    }//GEN-LAST:event_downsizeRBActionPerformed

    private void autoDownsizeRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDownsizeRBActionPerformed
        manageDownsize();
    }//GEN-LAST:event_autoDownsizeRBActionPerformed

    private void dfDimxTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfDimxTFActionPerformed
        int[] dfd =  params.getDensityFieldDims();
        try {
            int v = Integer.parseInt(dfDimxTF.getText());
            dfd[0] = v;
            params.setDensityFieldDims(dfd);
        } catch(NumberFormatException ex) {
            dfDimxTF.setText(""+dfd[0]);
        }
    }//GEN-LAST:event_dfDimxTFActionPerformed

    private void dfDimyTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfDimyTFActionPerformed
        int[] dfd =  params.getDensityFieldDims();
        try {
            int v = Integer.parseInt(dfDimyTF.getText());
            dfd[1] = v;
            params.setDensityFieldDims(dfd);
        } catch(NumberFormatException ex) {
            dfDimyTF.setText(""+dfd[1]);
        }
    }//GEN-LAST:event_dfDimyTFActionPerformed

    private void dfDimzTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfDimzTFActionPerformed
        int[] dfd =  params.getDensityFieldDims();
        try {
            int v = Integer.parseInt(dfDimzTF.getText());
            dfd[2] = v;
            params.setDensityFieldDims(dfd);
        } catch(NumberFormatException ex) {
            dfDimzTF.setText(""+dfd[2]);
        }
    }//GEN-LAST:event_dfDimzTFActionPerformed

    private void densityFieldLogCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_densityFieldLogCBActionPerformed
        params.setDensityFieldLog(densityFieldLogCB.isSelected());
    }//GEN-LAST:event_densityFieldLogCBActionPerformed

    private void dfDimxTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dfDimxTFFocusLost
        dfDimxTFActionPerformed(null);
    }//GEN-LAST:event_dfDimxTFFocusLost

    private void dfDimyTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dfDimyTFFocusLost
        dfDimyTFActionPerformed(null);
    }//GEN-LAST:event_dfDimyTFFocusLost

    private void dfDimzTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dfDimzTFFocusLost
        dfDimzTFActionPerformed(null);
    }//GEN-LAST:event_dfDimzTFFocusLost

    private void manageDownsize() {
        if(downsizeRB.isSelected()) {
            downsizeSP.setEnabled(true);
            int v = (Integer)downsizeSP.getValue();
            params.setDownsize(v);
        } else {
            downsizeSP.setEnabled(false);
            params.setDownsize(-1);
        }                
    }
    
    
    
    public void setFieldDescription(String s) {
        fieldDescription.setText(s);
    }

    /**
     * @param params the params to set
     */
    public void setParams(Params params) {
        this.params = params;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton autoDownsizeRB;
    private javax.swing.JCheckBox densityFieldLogCB;
    private javax.swing.JTextField dfDimxTF;
    private javax.swing.JTextField dfDimyTF;
    private javax.swing.JTextField dfDimzTF;
    private javax.swing.JLabel dfdLabel;
    private javax.swing.ButtonGroup downsizeGroup;
    private javax.swing.JRadioButton downsizeRB;
    private javax.swing.JSpinner downsizeSP;
    private javax.swing.JLabel fieldDescription;
    private javax.swing.JList fileNameList;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox readDensityCB;
    private javax.swing.JCheckBox readEnergyCB;
    private javax.swing.JCheckBox readIdCB;
    private javax.swing.JCheckBox readMassCB;
    private javax.swing.JCheckBox readTempCB;
    private javax.swing.JCheckBox readTypeCB;
    private javax.swing.JCheckBox readVelocityCB;
    protected javax.swing.JButton rereadButton;
    protected javax.swing.JButton selectButton;
    private javax.swing.JCheckBox showCB;
    // End of variables declaration//GEN-END:variables

    private void updateGUI() {
        silent = true;
        //readDensityCB.setSelected(params.isReadDensity());
        readEnergyCB.setSelected(params.isReadEnergy());
        readIdCB.setSelected(params.isReadId());
        readMassCB.setSelected(params.isReadMass());
        readTempCB.setSelected(params.isReadTemperature());
        readTypeCB.setSelected(params.isReadType());
        readVelocityCB.setSelected(params.isReadVelocity());

        
        int[] dfd = params.getDensityFieldDims();
        dfDimxTF.setText(""+dfd[0]);
        dfDimyTF.setText(""+dfd[1]);
        dfDimzTF.setText(""+dfd[2]);
        densityFieldLogCB.setSelected(params.isDensityFieldLog());
        
        if(params.getDownsize() == -1) {
            autoDownsizeRB.setSelected(true);
            downsizeSP.setEnabled(false);            
        } else {
            downsizeRB.setSelected(true);
            downsizeSP.setEnabled(true);            
        }
        downsizeSP.setValue(params.getDownsize());
        
        silent = false;
    }

    private int getNSelected() {
        int out = 0;
        //if(params.isReadDensity()) out++;
        if(params.isReadEnergy()) out++;
        if(params.isReadId()) out++;
        if(params.isReadMass()) out++;
        if(params.isReadTemperature()) out++;
        if(params.isReadType()) out++;
        if(params.isReadVelocity()) out++;
        return out;
    }

    public void activateOpenDialog() {
        selectButtonActionPerformed(null);        
    }

}
