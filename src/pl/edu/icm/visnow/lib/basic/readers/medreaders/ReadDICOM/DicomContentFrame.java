/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.readers.medreaders.ReadDICOM;

import com.pixelmed.dicom.*;
import java.awt.BorderLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author babor
 */
public class DicomContentFrame extends javax.swing.JFrame {

    private String parentDirPath = "";
    private ArrayList<String> currentNameList = null;
    private String selectedString = "";
    private DicomInfoFrame infoFrame = new DicomInfoFrame();

    /**
     * Creates new form DicomContentFrame
     */
    public DicomContentFrame() {
        initComponents();
        dicomTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        dicomTree.setCellRenderer(new CountingDicomDirectoryTreeCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dicomTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        framesAsLabel = new javax.swing.JLabel();
        framesAsSpaceRB = new javax.swing.JRadioButton();
        framesAsTimeRB = new javax.swing.JRadioButton();
        framesRangeSlider = new pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider();
        rightPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        readButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DICOMDIR");
        setIconImage(new ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/big/visnow.png")).getImage());
        setMinimumSize(new java.awt.Dimension(400, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Select elements to read:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 400));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 400));

        dicomTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                dicomTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(dicomTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(296, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 60));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        framesAsLabel.setText("Read frames as: ");
        framesAsLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(framesAsLabel, gridBagConstraints);

        buttonGroup1.add(framesAsSpaceRB);
        framesAsSpaceRB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        framesAsSpaceRB.setSelected(true);
        framesAsSpaceRB.setText("space");
        framesAsSpaceRB.setEnabled(false);
        framesAsSpaceRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                framesAsSpaceRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(framesAsSpaceRB, gridBagConstraints);

        buttonGroup1.add(framesAsTimeRB);
        framesAsTimeRB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        framesAsTimeRB.setText("time");
        framesAsTimeRB.setEnabled(false);
        framesAsTimeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                framesAsTimeRBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(framesAsTimeRB, gridBagConstraints);

        framesRangeSlider.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(framesRangeSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        rightPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        rightPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(rightPanel, gridBagConstraints);

        jPanel3.setMinimumSize(new java.awt.Dimension(64, 35));
        jPanel3.setPreferredSize(new java.awt.Dimension(64, 35));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        readButton.setText("Read");
        readButton.setEnabled(false);
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        jPanel3.add(readButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
private void dicomTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_dicomTreeValueChanged
    updateInfoPanel(evt.getPaths());
    currentNameList = new ArrayList<String>();
    selectedString = "";
    readButton.setEnabled(false);
    framesAsLabel.setEnabled(false);
    framesAsTimeRB.setEnabled(false);
    framesAsSpaceRB.setEnabled(false);

    TreePath[] selectionPaths = dicomTree.getSelectionPaths();
    if (selectionPaths == null || selectionPaths.length == 0) {
        return;
    }

    Object obj;
    String objStr;
    for (int i = 0; i < selectionPaths.length; i++) {
        obj = selectionPaths[i].getLastPathComponent();
        objStr = obj.toString();
        if(objStr != null) {
            if((objStr.startsWith("Series") || objStr.startsWith("All")) && selectionPaths.length > 1)
                return;
            
            if(!(objStr.startsWith("Series") || objStr.startsWith("All")) && !objStr.startsWith("Image"))
                return;
        }
        
        if (obj instanceof DicomDirectoryRecord) {
            currentNameList.addAll(DicomDirectory.findAllContainedReferencedFileNames((DicomDirectoryRecord) obj, parentDirPath));
        } else if (obj instanceof String && ((String) obj).startsWith("All") && dicomTree.getModel() instanceof GUI.SimplifiedDicomDirectory) {
            currentNameList = ((GUI.SimplifiedDicomDirectory) dicomTree.getModel()).getReferencedNameList();
        }

        if (selectionPaths.length == 1) {
            for (int j = 1; j < selectionPaths[0].getPathCount(); j++) {
                selectedString += " : " + ((DicomDirectoryRecord) selectionPaths[0].getPathComponent(j)).toString();
            }
            String str = selectionPaths[0].getLastPathComponent().toString();
            if(str != null && str.contains("frames]")) {
                framesAsLabel.setEnabled(true);
                framesAsTimeRB.setEnabled(true);
                framesAsSpaceRB.setEnabled(true);
                String tmp = str.substring(0, str.indexOf("frames]")-1);
                tmp = tmp.substring(tmp.lastIndexOf("[")+1);
                int nFrames = Integer.parseInt(tmp);                
                framesRangeSlider.setMin(0);
                framesRangeSlider.setLow(0);
                framesRangeSlider.setMax(nFrames-1);
                framesRangeSlider.setUp(nFrames-1);
                framesRangeSlider.setEnabled(framesAsTimeRB.isSelected());
            }       
        }
    }

    filterCurrentNameList();

    if (currentNameList.size() < 1) {
        return;
    }

    readButton.setEnabled(true);

}//GEN-LAST:event_dicomTreeValueChanged

    @SuppressWarnings("unchecked")
private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        infoFrame.dispose();
        this.dispose();
        fireStateChanged();
}//GEN-LAST:event_readButtonActionPerformed

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    infoFrame.dispose();
}//GEN-LAST:event_formWindowClosed

    private void framesAsTimeRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_framesAsTimeRBActionPerformed
        framesRangeSlider.setEnabled(framesAsTimeRB.isSelected());
    }//GEN-LAST:event_framesAsTimeRBActionPerformed

    private void framesAsSpaceRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_framesAsSpaceRBActionPerformed
        framesRangeSlider.setEnabled(framesAsTimeRB.isSelected());
    }//GEN-LAST:event_framesAsSpaceRBActionPerformed

    public void setDicomTreeModel(TreeModel tm, String parentDirPath) {
        dicomTree.setModel(tm);
        this.parentDirPath = parentDirPath;
    }
    /**
     * Utility field holding list of ChangeListeners.
     */
    private transient ArrayList<ChangeListener> changeListenerList =
            new ArrayList<ChangeListener>();

    /**
     * Registers ChangeListener to receive events.
     *
     * @param listener The listener to register.
     */
    public synchronized void addChangeListener(ChangeListener listener) {
        changeListenerList.add(listener);
    }

    /**
     * Removes ChangeListener from the list of listeners.
     *
     * @param listener The listener to remove.
     */
    public synchronized void removeChangeListener(ChangeListener listener) {
        changeListenerList.remove(listener);
    }

    /**
     * Notifies all registered listeners about the event.
     *
     * @param object Parameter #1 of the
     * <CODE>ChangeEvent<CODE> constructor.
     */
    private void fireStateChanged() {
        ChangeEvent e = new ChangeEvent(this);
        for (ChangeListener listener : changeListenerList) {
            listener.stateChanged(e);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTree dicomTree;
    private javax.swing.JLabel framesAsLabel;
    private javax.swing.JRadioButton framesAsSpaceRB;
    private javax.swing.JRadioButton framesAsTimeRB;
    private pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider framesRangeSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readButton;
    private javax.swing.JPanel rightPanel;
    // End of variables declaration//GEN-END:variables

    public ArrayList<String> getCurrentNameList() {
        return currentNameList;
    }

    /**
     * @return the selectedString
     */
    public String getSelectedString() {
        return selectedString;
    }

    private JPanel emptyInfoPanel = new JPanel();
    private DICOMPatientInfoPanel patientInfoPanel = new DICOMPatientInfoPanel(infoFrame);
    private DICOMImageInfoPanel imageInfoPanel = new DICOMImageInfoPanel(infoFrame);
    private DICOMSeriesInfoPanel seriesInfoPanel = new DICOMSeriesInfoPanel(infoFrame);
    private DICOMStudyInfoPanel studyInfoPanel = new DICOMStudyInfoPanel(infoFrame);

    private void updateInfoPanel(TreePath[] changedPaths) {
        rightPanel.removeAll();
        Object obj = null;
        DicomDirectoryRecord ddr = null;
        if (changedPaths != null && dicomTree.getSelectionPaths() != null && dicomTree.getSelectionPaths().length > 1) {
            obj = changedPaths[changedPaths.length - 1].getLastPathComponent();
        } else if (dicomTree.getSelectionPath() != null) {
            obj = dicomTree.getSelectionPath().getLastPathComponent();
        }

        if (obj instanceof DicomDirectoryRecord) {
            ddr = (DicomDirectoryRecord) obj;
        }

        if (ddr == null) {
            rightPanel.add(emptyInfoPanel, BorderLayout.CENTER);
            rightPanel.revalidate();
            rightPanel.repaint();
            return;
        }

        try {
            if (ddr.toString().startsWith("Patient")) {
                patientInfoPanel.setDicomDirectoryRecord(ddr);
                rightPanel.add(patientInfoPanel, BorderLayout.CENTER);
            } else if (ddr.toString().startsWith("Study")) {
                studyInfoPanel.setDicomDirectoryRecord(ddr);
                rightPanel.add(studyInfoPanel, BorderLayout.CENTER);
            } else if (ddr.toString().startsWith("Series")) {
                seriesInfoPanel.setDicomDirectoryRecord(ddr);
                rightPanel.add(seriesInfoPanel, BorderLayout.CENTER);
            } else if (ddr.toString().startsWith("Image")) {
                imageInfoPanel.setDicomDirectoryRecord(ddr, parentDirPath);
                rightPanel.add(imageInfoPanel, BorderLayout.CENTER);
            } else {
                rightPanel.add(emptyInfoPanel, BorderLayout.CENTER);
                infoFrame.setTreeModel(new AttributeTree(ddr.getAttributeList()));
            }
        } catch (DicomException ex) {
        }
        rightPanel.revalidate();
        rightPanel.repaint();

    }

    private void filterCurrentNameList() {
        if (currentNameList == null || currentNameList.size() < 1) {
            return;
        }

        String tmp;
        File f;
        for (int i = 0; i < currentNameList.size(); i++) {
            tmp = currentNameList.get(i);

            //----------------check file existance-------------------------
            f = new File(tmp);
            if (!f.exists()) {
                //check if lowercase does work
                if (!tmp.contains(parentDirPath)) {
                    System.err.println("WARNING! File does not exist: " + tmp);
                    currentNameList.remove(i);
                    i--;
                    continue;
                }

                String relPath = tmp.replace(parentDirPath, "");
                f = new File(parentDirPath + File.separator + relPath.toLowerCase());
                if (!f.exists()) {
                    System.err.println("WARNING! File does not exist: " + tmp);
                    currentNameList.remove(i);
                    i--;
                    continue;
                }

                currentNameList.set(i, parentDirPath + File.separator + relPath.toLowerCase());
            }
        }
    }

    public boolean isFramesAsTime() {
        return this.framesAsTimeRB.isSelected();
    }
    
    public int[] getFramesRange() {
        int[] out = new int[2];
        out[0] = framesRangeSlider.getLow();
        out[1] = framesRangeSlider.getUp();        
        return out;
    }
}
