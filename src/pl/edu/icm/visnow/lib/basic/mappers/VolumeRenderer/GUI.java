/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.VolumeRenderer;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.geometries.events.ColorListener;
import pl.edu.icm.visnow.geometries.parameters.AbstractDataMappingParams;
import pl.edu.icm.visnow.geometries.parameters.DataMappingParams;
import pl.edu.icm.visnow.gui.widgets.MultistateButton;
import pl.edu.icm.visnow.lib.gui.CropUI;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends JPanel
{

   /**
    * Holds value of property parentModule.
    */
   private Params params = new Params();
   protected DataMappingParams dataMappingParams;
   protected RegularField field = null;
   private boolean syncing = false;

   /** Creates new form VolRenderUI */
   public GUI()
   {
      initComponents();
      cropUI.setDynamic(true);
      dataMappingGUI.setStartNullTransparencyComponent(false);
      dataMappingGUI.setShowNodeCellPanel(false);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fillPanel = new javax.swing.JPanel();
        mainPane = new javax.swing.JTabbedPane();
        dataMappingGUI = new pl.edu.icm.visnow.geometries.gui.DataMappingGUI();
        cropPanel = new javax.swing.JPanel();
        cropUI = new pl.edu.icm.visnow.lib.gui.CropUI();
        outButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        extentsBox = new javax.swing.JCheckBox();
        guiPresentationButton = new MultistateButton(new String[]{"show simple GUI","show expert GUI"}, null);

        setMinimumSize(new java.awt.Dimension(180, 680));
        setPreferredSize(new java.awt.Dimension(200, 680));
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(fillPanel, gridBagConstraints);

        mainPane.setMinimumSize(new java.awt.Dimension(155, 635));
        mainPane.setPreferredSize(new java.awt.Dimension(200, 647));
        mainPane.addTab("data mapping", dataMappingGUI);

        cropPanel.setMaximumSize(new java.awt.Dimension(234, 234));
        cropPanel.setMinimumSize(new java.awt.Dimension(231, 234));
        cropPanel.setPreferredSize(new java.awt.Dimension(240, 234));
        cropPanel.setLayout(new java.awt.GridBagLayout());

        cropUI.setMinimumSize(new java.awt.Dimension(180, 186));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        cropPanel.add(cropUI, gridBagConstraints);

        outButton.setText("output cropped field");
        outButton.setMaximumSize(new java.awt.Dimension(179, 23));
        outButton.setMinimumSize(new java.awt.Dimension(179, 23));
        outButton.setName(""); // NOI18N
        outButton.setPreferredSize(new java.awt.Dimension(179, 23));
        outButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        cropPanel.add(outButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        cropPanel.add(jPanel3, gridBagConstraints);

        extentsBox.setSelected(true);
        extentsBox.setText("update cropped field extents");
        extentsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extentsBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        cropPanel.add(extentsBox, gridBagConstraints);

        mainPane.addTab("crop", cropPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(mainPane, gridBagConstraints);

        guiPresentationButton.setBackground(new java.awt.Color(204, 204, 204));
        guiPresentationButton.setForeground(new java.awt.Color(0, 51, 153));
        guiPresentationButton.setText("multistateButton1");
        guiPresentationButton.setMaximumSize(new java.awt.Dimension(54, 24));
        guiPresentationButton.setMinimumSize(new java.awt.Dimension(54, 24));
        guiPresentationButton.setPreferredSize(new java.awt.Dimension(54, 24));
        guiPresentationButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                guiPresentationButtonStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(guiPresentationButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void outButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outButtonActionPerformed
    {//GEN-HEADEREND:event_outButtonActionPerformed
       params.setOutCroppedField(true);
       fireStateChanged();
    }//GEN-LAST:event_outButtonActionPerformed

    private void extentsBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extentsBoxActionPerformed
    {//GEN-HEADEREND:event_extentsBoxActionPerformed
       params.setCropExtents(extentsBox.isSelected());
    }//GEN-LAST:event_extentsBoxActionPerformed

   private void guiPresentationButtonStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_guiPresentationButtonStateChanged
   {//GEN-HEADEREND:event_guiPresentationButtonStateChanged
       setPresentation(guiPresentationButton.getState() == VisNow.SIMPLE_GUI);
   }//GEN-LAST:event_guiPresentationButtonStateChanged
   
   boolean silent = false;

   public void setInField(RegularField inField, AbstractDataMappingParams mapParams)
   {
      
      silent = true;
      this.field = inField;
      if (inField == null)
      {
         int[] tmp = {10, 10, 10};
         cropUI.setNewExtents(tmp);
         cropUI.setEnabled(false);
         dataMappingGUI.setInData(null, mapParams);
         return;
      }

      cropUI.setNewExtents(inField.getDims());
      cropUI.setEnabled(true);
      dataMappingGUI.setInData(inField, mapParams);
      silent = false;
   }
   
   public void setPresentation(boolean simple)
   {
      GridBagConstraints gridBagConstraints;
      Dimension expertDim = new Dimension(200, 690);
      Dimension cropSimpleDim = new Dimension(200,230);
      if (simple)
      {
         remove(mainPane);
         mainPane.removeAll();
         remove(fillPanel);
         dataMappingGUI.setPresentation(simple);
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.weightx = 1.0;
         gridBagConstraints.weighty = 0.5;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         add(dataMappingGUI, gridBagConstraints);
         cropPanel.setMinimumSize(cropSimpleDim);
         cropPanel.setPreferredSize(cropSimpleDim); 
         cropPanel.setMaximumSize(cropSimpleDim);  
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 2;
         gridBagConstraints.weightx = 1.0;
         gridBagConstraints.weighty = 0.0;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         add(cropPanel, gridBagConstraints);
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 3;
         gridBagConstraints.weighty = 1.0;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         add(fillPanel, gridBagConstraints);
      }
      else
      {
         remove(dataMappingGUI);
         setMinimumSize(expertDim);
         setPreferredSize(expertDim);
         setMaximumSize(expertDim);
         dataMappingGUI.setPresentation(simple);
         mainPane.addTab("datamap", dataMappingGUI);
         mainPane.addTab("crop", cropPanel);
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.weightx = 1.0;
         gridBagConstraints.weighty = 1.0;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         add(mainPane, gridBagConstraints);
      }
      validate();
   }
   
   
   public final void setDataMappingParams(AbstractDataMappingParams params)
   {
      dataMappingGUI.setInData(field, params);
   }

   public CropUI getCropUI()
   {
      return cropUI;
   }

   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList = new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove(listener);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    */
   private void fireStateChanged()
   {
      if (silent)
         return;
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener listener : changeListenerList)
      {
         listener.stateChanged(e);
      }
   }
   
   public ColorListener getBackgroundColorListener()
   {
      return dataMappingGUI.getBackgroundColorListener();
   }

   public void setParams(Params params)
   {
      this.params = params;
      dataMappingParams = params.getDataMappingParams();
      dataMappingGUI.setParams(dataMappingParams);
   }
   
   public void setGUIPresentation()
   {
      guiPresentationButton.setState(VisNow.guiLevel);
      guiPresentationButton.setVisible(VisNow.allowGUISwitch);
   }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cropPanel;
    private pl.edu.icm.visnow.lib.gui.CropUI cropUI;
    private pl.edu.icm.visnow.geometries.gui.DataMappingGUI dataMappingGUI;
    private javax.swing.JCheckBox extentsBox;
    private javax.swing.JPanel fillPanel;
    private pl.edu.icm.visnow.gui.widgets.MultistateButton guiPresentationButton;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane mainPane;
    private javax.swing.JButton outButton;
    // End of variables declaration//GEN-END:variables

 
}
