/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.RegularFieldSlice;

public class RegularFieldSliceGUI extends javax.swing.JPanel
{

   protected RegularFieldSliceParams params = null;
   protected int[] dims = null;

   /**
    * Set the value of dims
    *
    * @param dims new value of dims
    */
   public void setDims(int[] dims)
   {
      params.setActive(false);     
      sliceSlider.setMax(dims[params.getAxis()]-1);
      if (this.dims == null || this.dims[0] != dims[0]  || this.dims[1] != dims[1]  || this.dims[2] != dims[2]  || 
          params.getSlice() < 0 || params.getSlice() >= dims[params.getAxis()])
      {
         sliceSlider.setVal(dims[params.getAxis()] / 2);
         params.setSlice(dims[params.getAxis()] / 2);
      }            
      this.dims = dims;
      params.setActive(true);
   }

   /** Creates new form EmptyVisnowModuleGUI */
   public RegularFieldSliceGUI()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        axesGroup = new javax.swing.ButtonGroup();
        iButton = new javax.swing.JRadioButton();
        jButton = new javax.swing.JRadioButton();
        kButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        sliceSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider();
        jPanel1 = new javax.swing.JPanel();
        recalculateMinMaxCB = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        axesGroup.add(iButton);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/basic/mappers/RegularFieldSlice/Bundle"); // NOI18N
        iButton.setText(bundle.getString("RegularFieldSliceGUI.iButton.text")); // NOI18N
        iButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 4);
        add(iButton, gridBagConstraints);

        axesGroup.add(jButton);
        jButton.setText(bundle.getString("RegularFieldSliceGUI.jButton.text")); // NOI18N
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        add(jButton, gridBagConstraints);

        axesGroup.add(kButton);
        kButton.setSelected(true);
        kButton.setText(bundle.getString("RegularFieldSliceGUI.kButton.text")); // NOI18N
        kButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        add(kButton, gridBagConstraints);

        jLabel1.setText(bundle.getString("RegularFieldSliceGUI.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        add(jLabel1, gridBagConstraints);

        sliceSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("RegularFieldSliceGUI.sliceSlider.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        sliceSlider.setMinimumSize(new java.awt.Dimension(90, 64));
        sliceSlider.setPreferredSize(new java.awt.Dimension(200, 70));
        sliceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliceSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(sliceSlider, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        recalculateMinMaxCB.setText(bundle.getString("RegularFieldSliceGUI.recalculateMinMaxCB.text")); // NOI18N
        recalculateMinMaxCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalculateMinMaxCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(recalculateMinMaxCB, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   /**
    * Set the value of params
    *
    * @param params new value of params
    */
   public void setParams(RegularFieldSliceParams params)
   {
      this.params = params;
   }

   private void setAxis()
   {
      if (dims == null)
         return;
      int axis = 0;
      if (jButton.isSelected())
         axis = 1;
      if (kButton.isSelected())
         axis = 2;
      params.setActive(false);
      params.setAxis(axis);
      sliceSlider.setMax(dims[params.getAxis()]);
      sliceSlider.setVal(dims[params.getAxis()] / 2);
      params.setSlice(dims[params.getAxis()] / 2);
      params.setActive(true);
      //params.fireStateChanged();
   }

    private void iButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iButtonActionPerformed
    {//GEN-HEADEREND:event_iButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_iButtonActionPerformed

    private void jButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonActionPerformed
    {//GEN-HEADEREND:event_jButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_jButtonActionPerformed

    private void kButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_kButtonActionPerformed
    {//GEN-HEADEREND:event_kButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_kButtonActionPerformed

    private void sliceSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_sliceSliderStateChanged
    {//GEN-HEADEREND:event_sliceSliderStateChanged
       params.setAdjusting(sliceSlider.isAdjusting());
       params.setSlice(sliceSlider.getVal());
    }//GEN-LAST:event_sliceSliderStateChanged

    private void recalculateMinMaxCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalculateMinMaxCBActionPerformed
        params.setRecalculate(recalculateMinMaxCB.isSelected());
    }//GEN-LAST:event_recalculateMinMaxCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup axesGroup;
    private javax.swing.JRadioButton iButton;
    private javax.swing.JRadioButton jButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton kButton;
    private javax.swing.JCheckBox recalculateMinMaxCB;
    private pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider sliceSlider;
    // End of variables declaration//GEN-END:variables
}
