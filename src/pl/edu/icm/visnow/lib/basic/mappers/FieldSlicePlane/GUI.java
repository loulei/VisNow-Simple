/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.FieldSlicePlane;

import pl.edu.icm.visnow.datasets.Field;

public class GUI extends javax.swing.JPanel
{

   protected Params params;
   protected Field inField;

   /** Creates new form EmptyVisnowModuleGUI */
   public GUI()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        transformPanel = new pl.edu.icm.visnow.geometries.gui.TransformPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        xButton = new javax.swing.JRadioButton();
        yButton = new javax.swing.JRadioButton();
        zButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        treeCreationLabel = new javax.swing.JLabel();
        threadSpinner = new javax.swing.JSpinner();
        iResolutionSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider();
        jResolutionSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider();

        setLayout(new java.awt.GridBagLayout());

        transformPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        transformPanel.setMaximumSize(new java.awt.Dimension(300, 300));
        transformPanel.setMinimumSize(new java.awt.Dimension(164, 280));
        transformPanel.setPreferredSize(new java.awt.Dimension(210, 285));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 46;
        gridBagConstraints.ipady = 169;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(transformPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroup1.add(xButton);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/basic/mappers/FieldSlicePlane/Bundle"); // NOI18N
        xButton.setText(bundle.getString("GUI.xButton.text")); // NOI18N
        xButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xButtonActionPerformed(evt);
            }
        });
        jPanel2.add(xButton);

        buttonGroup1.add(yButton);
        yButton.setText(bundle.getString("GUI.yButton.text")); // NOI18N
        yButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yButtonActionPerformed(evt);
            }
        });
        jPanel2.add(yButton);

        buttonGroup1.add(zButton);
        zButton.setSelected(true);
        zButton.setText(bundle.getString("GUI.zButton.text")); // NOI18N
        zButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zButtonActionPerformed(evt);
            }
        });
        jPanel2.add(zButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("GUI.jLabel2.text")); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(45, 15));
        jLabel2.setMinimumSize(new java.awt.Dimension(45, 15));
        jLabel2.setPreferredSize(new java.awt.Dimension(45, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(jLabel2, gridBagConstraints);

        treeCreationLabel.setText("cell tree not found");
        treeCreationLabel.setMaximumSize(new java.awt.Dimension(250, 25));
        treeCreationLabel.setMinimumSize(new java.awt.Dimension(180, 20));
        treeCreationLabel.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(treeCreationLabel, gridBagConstraints);

        threadSpinner.setModel(new javax.swing.SpinnerNumberModel(Runtime.getRuntime().availableProcessors(), 1, Runtime.getRuntime().availableProcessors(), 1));
        threadSpinner.setValue(Runtime.getRuntime().availableProcessors());
        threadSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                threadSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(threadSpinner, gridBagConstraints);

        iResolutionSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("GUI.iResolutionSlider.border.title"))); // NOI18N
        iResolutionSlider.setMax(500);
        iResolutionSlider.setMinimumSize(new java.awt.Dimension(90, 63));
        iResolutionSlider.setPreferredSize(new java.awt.Dimension(200, 65));
        iResolutionSlider.setVal(100);
        iResolutionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                iResolutionSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(iResolutionSlider, gridBagConstraints);

        jResolutionSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("GUI.jResolutionSlider.border.title"))); // NOI18N
        jResolutionSlider.setMax(500);
        jResolutionSlider.setMinimumSize(new java.awt.Dimension(90, 63));
        jResolutionSlider.setPreferredSize(new java.awt.Dimension(200, 65));
        jResolutionSlider.setVal(100);
        jResolutionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jResolutionSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jResolutionSlider, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void setAxis()
   {
      if (xButton.isSelected())
         params.setAxis(0);
      if (yButton.isSelected())
         params.setAxis(1);
      if (zButton.isSelected())
         params.setAxis(2);
      resetTransform();
   }

   public void setInField(Field inField)
   {
      this.inField = inField;
      transformPanel.setTransSensitivity(inField.getDiameter()/1000);
   }

    private void xButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xButtonActionPerformed
    {//GEN-HEADEREND:event_xButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_xButtonActionPerformed

    private void yButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yButtonActionPerformed
    {//GEN-HEADEREND:event_yButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_yButtonActionPerformed

    private void zButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zButtonActionPerformed
    {//GEN-HEADEREND:event_zButtonActionPerformed
       setAxis();
    }//GEN-LAST:event_zButtonActionPerformed

    private void threadSpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_threadSpinnerStateChanged
    {//GEN-HEADEREND:event_threadSpinnerStateChanged
       params.setThreads((Integer) threadSpinner.getValue());
    }//GEN-LAST:event_threadSpinnerStateChanged

   private void iResolutionSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_iResolutionSliderStateChanged
   {//GEN-HEADEREND:event_iResolutionSliderStateChanged
      if (!iResolutionSlider.isAdjusting())
         params.setResolution(new int[]{Math.max(10, iResolutionSlider.getVal()), 
                                        Math.max(10, jResolutionSlider.getVal())});
   }//GEN-LAST:event_iResolutionSliderStateChanged

   private void jResolutionSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jResolutionSliderStateChanged
   {//GEN-HEADEREND:event_jResolutionSliderStateChanged
      if (!jResolutionSlider.isAdjusting())
         params.setResolution(new int[]{Math.max(10, iResolutionSlider.getVal()), 
                                        Math.max(10, jResolutionSlider.getVal())});
   }//GEN-LAST:event_jResolutionSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider iResolutionSlider;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider jResolutionSlider;
    private javax.swing.JSpinner threadSpinner;
    private pl.edu.icm.visnow.geometries.gui.TransformPanel transformPanel;
    private javax.swing.JLabel treeCreationLabel;
    private javax.swing.JRadioButton xButton;
    private javax.swing.JRadioButton yButton;
    private javax.swing.JRadioButton zButton;
    // End of variables declaration//GEN-END:variables

   /**
    * Set the value of params
    *
    * @param params new value of params
    */
   public void setParams(Params params)
   {
      this.params = params;
      transformPanel.setTransformParams(params.getTransform());
   }

   public void resetTransform()
   {
      transformPanel.resetTransform();
   }

   public void creatingTreeInfo(boolean exec)
   {
      if (exec)
         treeCreationLabel.setText("Creating cell tree. Please wait.");
      else
         treeCreationLabel.setText("Cell tree created.");
   }
   
}
