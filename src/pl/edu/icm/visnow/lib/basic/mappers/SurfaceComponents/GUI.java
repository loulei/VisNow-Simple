/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.SurfaceComponents;

import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import pl.edu.icm.visnow.datasets.IrregularField;
import pl.edu.icm.visnow.lib.utils.SwingInstancer;


/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends JPanel
{
   private Params params = null;
   private Hashtable<Integer,JLabel> downLabels = new Hashtable<Integer, JLabel>();
   private int[] scale = {0,5,10,20,50,100,200,500,1000,2000,5000,10000};
   private String[] downTexts = {"0","","10","","","100","","","1000","","","10000"};
   private static final String [] tableHeader = new String [] {"component name","size"," "};
   private static final Class[] tableTypes = new Class [] {String.class, Integer.class, Boolean.class};
   private DefaultTableModel componentModel;
   private Object[][] tableContent = null;
   private IrregularField fld;

   /** Creates new form SurfaceComponentsUI */
   public GUI()
   {
      initComponents();
//      componentTable.getColumnModel().getColumn(0).setPreferredWidth(140);
//      componentTable.getColumnModel().getColumn(1).setPreferredWidth(60);
//      componentTable.getColumnModel().getColumn(2).setPreferredWidth(30);
      componentModel = (DefaultTableModel)componentTable.getModel();
      componentModel.addTableModelListener(new TableModelListener()
      {
         @Override
         public void tableChanged(TableModelEvent e)
         {
            int row = e.getFirstRow();
            if (row >= 0 && row < componentTable.getRowCount() &&
                fld != null && fld.getNCellSets() == componentTable.getRowCount())
            {
                params.setModifiedName((String)componentTable.getValueAt(row, 0));
                params.setModifiedSelection((Boolean)componentTable.getValueAt(row, 2));
                params.setModifiedComponent(row);
            }
         }
      });
      for (int i = 0; i < downTexts.length; i++)
      {
         downLabels.put(i,new JLabel(downTexts[i]));
         downLabels.get(i).setFont(new java.awt.Font("Dialog", 0, 8));
      }
      minSizeSlider.setLabelTable(downLabels);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        minSizeSlider = new javax.swing.JSlider();
        maxComponentsSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider();
        componentTable = new javax.swing.JTable();
        outButton = new javax.swing.JButton();

        setVerifyInputWhenFocusTarget(false);
        setLayout(new java.awt.GridBagLayout());

        minSizeSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        minSizeSlider.setMajorTickSpacing(1);
        minSizeSlider.setMaximum(12);
        minSizeSlider.setPaintLabels(true);
        minSizeSlider.setPaintTicks(true);
        minSizeSlider.setValue(3);
        minSizeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "minimum component size", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        minSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSizeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(minSizeSlider, gridBagConstraints);

        maxComponentsSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "max shown components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        maxComponentsSlider.setVal(20);
        maxComponentsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxComponentsSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(maxComponentsSlider, gridBagConstraints);

        componentTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        componentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "component name", "size", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        componentTable.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(componentTable, gridBagConstraints);

        outButton.setText("output selected sets");
        outButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(outButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void minSizeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_minSizeSliderStateChanged
   {//GEN-HEADEREND:event_minSizeSliderStateChanged
      if (params != null && !minSizeSlider.getValueIsAdjusting())
      {
         params.setMinComponentSize(scale[minSizeSlider.getValue()]);
      }
   }//GEN-LAST:event_minSizeSliderStateChanged

   private void outButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outButtonActionPerformed
   {//GEN-HEADEREND:event_outButtonActionPerformed
      params.setOutput(true);
   }//GEN-LAST:event_outButtonActionPerformed

   private void maxComponentsSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_maxComponentsSliderStateChanged
   {//GEN-HEADEREND:event_maxComponentsSliderStateChanged
      if (params != null && !maxComponentsSlider.isAdjusting())
         params.setSeparateComponents(maxComponentsSlider.getVal());
   }//GEN-LAST:event_maxComponentsSliderStateChanged

   public void setParams(Params params)
   {
      params.setActive(false);
      this.params = params;
   }

   public void setSelection(int component, boolean selection)
   {
      if (component >= componentTable.getRowCount())
         return;
      componentTable.setValueAt(selection, component, 2);
   }
   

   public void updateComponentTable(IrregularField outField)
   {
      if (outField != null)
      {
         params.setActive(false);
         fld = outField;
         updateComponentTable();
         params.setActiveValue(true);
      }
   }

   public void updateComponentTable()
   {
      if (fld == null || fld.getNCellSets() < 1)
         return;
      int nComponents = fld.getNCellSets();
      tableContent = new Object[nComponents][3];
      for (int i = 0; i < fld.getNCellSets(); i++)
      {
         tableContent[i][0] = fld.getCellSet(i).getName();
         tableContent[i][1] = "" + fld.getCellSet(i).getnActiveNodes();
         tableContent[i][2] = fld.getCellSet(i).isSelected();
      }
      SwingInstancer.swingRunAndWait(new Runnable()
      {
         @Override
         public void run()
         {
            componentModel.setDataVector(tableContent, tableHeader);
//            componentTable.getColumnModel().getColumn(0).setPreferredWidth(140);
//            componentTable.getColumnModel().getColumn(1).setPreferredWidth(60);
//            componentTable.getColumnModel().getColumn(2).setPreferredWidth(30);
            componentTable.repaint();
         }
      });
   }

   protected ChangeListener newCmpListener = new ChangeListener()
      {
         @Override
         public void stateChanged(ChangeEvent evt)
         {
            updateComponentTable();
         }
      };

   public ChangeListener getNewCmpListener()
   {
      return newCmpListener;
   }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable componentTable;
    private pl.edu.icm.visnow.gui.widgets.EnhancedIntSlider maxComponentsSlider;
    private javax.swing.JSlider minSizeSlider;
    private javax.swing.JButton outButton;
    // End of variables declaration//GEN-END:variables
   
}
