/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.TubeGlyphs;

import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.geometries.parameters.AbstractDataMappingParams;
import pl.edu.icm.visnow.geometries.parameters.AbstractRenderingParams;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{
   private Params params = new Params();
   private Field inField = null;
   private float smax = 1;


   /** Creates new form VNgraph3DUI */
   public GUI()
   {
      initComponents();
      mapComboBox.setAddNullComponent(true);
      mapComboBox.setTitle("tube radius");
   }


   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      scaleSlider = new pl.edu.icm.visnow.gui.widgets.LogarithmicSlider();
      mapComboBox = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
      lodSlider = new javax.swing.JSlider();
      bgrBox = new javax.swing.JCheckBox();
      jPanel3 = new javax.swing.JPanel();
      colorPanel = new pl.edu.icm.visnow.geometries.gui.ColorMappedComponentPanel();

      setMinimumSize(new java.awt.Dimension(150, 710));
      setOpaque(false);
      setPreferredSize(new java.awt.Dimension(200, 710));
      setLayout(new java.awt.GridBagLayout());

      scaleSlider.setAdjusting(true);
      scaleSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "tube scale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
      scaleSlider.setMinimumSize(new java.awt.Dimension(65, 60));
      scaleSlider.setPreferredSize(new java.awt.Dimension(200, 60));
      scaleSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            scaleSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      add(scaleSlider, gridBagConstraints);

      mapComboBox.setMinimumSize(new java.awt.Dimension(82, 36));
      mapComboBox.setPreferredSize(new java.awt.Dimension(182, 36));
      mapComboBox.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            mapComboBoxStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      add(mapComboBox, gridBagConstraints);

      lodSlider.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
      lodSlider.setMajorTickSpacing(5);
      lodSlider.setMaximum(50);
      lodSlider.setMinimum(5);
      lodSlider.setMinorTickSpacing(1);
      lodSlider.setSnapToTicks(true);
      lodSlider.setValue(10);
      lodSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "tube smoothness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
      lodSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            lodSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      add(lodSlider, gridBagConstraints);

      bgrBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      bgrBox.setText("background ");
      bgrBox.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            bgrBoxActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
      add(bgrBox, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 6;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      add(jPanel3, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(colorPanel, gridBagConstraints);
   }// </editor-fold>//GEN-END:initComponents

   private void mapComboBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mapComboBoxStateChanged
      params.setActive(false);
      params.setComponent(mapComboBox.getComponent());
      setScaleMinMax();
      params.setActive(true);
}//GEN-LAST:event_mapComboBoxStateChanged

   private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
      params.setScale(scaleSlider.getVal());
}//GEN-LAST:event_scaleSliderStateChanged

   private void lodSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lodSliderStateChanged
      if (lodSlider.getValueIsAdjusting())
         return;
      params.setLod(lodSlider.getValue());
}//GEN-LAST:event_lodSliderStateChanged

   private void bgrBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bgrBoxActionPerformed
   {//GEN-HEADEREND:event_bgrBoxActionPerformed
      params.setBgr(bgrBox.isSelected());
   }//GEN-LAST:event_bgrBoxActionPerformed


private String[] lastInComponents = null;

   private boolean componentsChanged(String[] inComponents)
   {
      if (lastInComponents == null || lastInComponents.length != inComponents.length)
      {
         lastInComponents = inComponents;
         return true;
      }
      for (int i = 0; i < inComponents.length; i++)
         if (inComponents[i].compareTo(lastInComponents[i]) != 0)
            return true;
      return false;
   }

   public void setInData(Field inField)
   {
      params.setActive(false);
      this.inField = inField;
      String[] inComponents = new String[inField.getNData()];
      for (int i = 0; i < inField.getNData(); i++)
         inComponents[i] = inField.getData(i).getName();
      if (componentsChanged(inComponents))
      {
         mapComboBox.setDataSchema(inField.getSchema());
         params.setComponent(mapComboBox.getComponent());
      }
      setScaleMinMax();
      colorPanel.setData(inField.getDataSchema());
      params.setActive(true);
   }

   private void setScaleMinMax()
   {
      float max = 1;
      if (inField.getData(params.getComponent()) != null)
         max = inField.getData(params.getComponent()).getMaxv();
      float[][] ext = inField.getExtents();
      double diam = 0;
      for (int i = 0; i < 3; i++)
         diam += (ext[1][i] - ext[0][i]) * (ext[1][i] - ext[0][i]);
      if (max <= 0)
         max = .001f;
      smax = (float) (Math.sqrt(diam / 30) / max);
      scaleSlider.setMax(smax);
      scaleSlider.setMin(smax/100);
      scaleSlider.setVal(smax/10);
   }

   public void setParams(Params params,  AbstractDataMappingParams mapParams, AbstractRenderingParams renderParams)
   {
      colorPanel.setParams(mapParams);
      colorPanel.setParams(renderParams);
      this.params = params;
   }

   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox bgrBox;
   private pl.edu.icm.visnow.geometries.gui.ColorMappedComponentPanel colorPanel;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JSlider lodSlider;
   private pl.edu.icm.visnow.lib.gui.DataComponentSelector mapComboBox;
   private pl.edu.icm.visnow.gui.widgets.LogarithmicSlider scaleSlider;
   // End of variables declaration//GEN-END:variables
}
