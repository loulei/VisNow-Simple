/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.mappers.LineSlice;

import javax.swing.JFrame;
import javax.swing.WindowConstants;

public class LineSliceGUI extends javax.swing.JPanel
{
   protected LineSliceParams params = null;
   protected int[] dims =  {1, 1};

   /** Creates new form EmptyVisnowModuleGUI */
   public LineSliceGUI()
   {
      initComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        axisGroup = new javax.swing.ButtonGroup();
        iRadioButton = new javax.swing.JRadioButton();
        jRadioButton = new javax.swing.JRadioButton();
        kRadioButton = new javax.swing.JRadioButton();
        iSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider();
        jSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider();
        kSlider = new pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider();
        recomputeMinMaxCB = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        setLayout(new java.awt.GridBagLayout());

        axisGroup.add(iRadioButton);
        iRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        iRadioButton.setSelected(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/basic/mappers/LineSlice/Bundle"); // NOI18N
        iRadioButton.setText(bundle.getString("LineSliceGUI.iRadioButton.text_1")); // NOI18N
        iRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(iRadioButton, gridBagConstraints);

        axisGroup.add(jRadioButton);
        jRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jRadioButton.setText(bundle.getString("LineSliceGUI.jRadioButton.text_1")); // NOI18N
        jRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(jRadioButton, gridBagConstraints);

        axisGroup.add(kRadioButton);
        kRadioButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        kRadioButton.setText(bundle.getString("LineSliceGUI.kRadioButton.text_1")); // NOI18N
        kRadioButton.setEnabled(false);
        kRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        kRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(kRadioButton, gridBagConstraints);

        iSlider.setMinimumSize(new java.awt.Dimension(10, 250));
        iSlider.setPreferredSize(new java.awt.Dimension(60, 250));
        iSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                iSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(iSlider, gridBagConstraints);

        jSlider.setMinimumSize(new java.awt.Dimension(10, 250));
        jSlider.setPreferredSize(new java.awt.Dimension(60, 250));
        jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(jSlider, gridBagConstraints);

        kSlider.setMinimumSize(new java.awt.Dimension(10, 250));
        kSlider.setPreferredSize(new java.awt.Dimension(60, 250));
        kSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        add(kSlider, gridBagConstraints);

        recomputeMinMaxCB.setText(bundle.getString("LineSliceGUI.recomputeMinMaxCB.text")); // NOI18N
        recomputeMinMaxCB.setEnabled(false);
        recomputeMinMaxCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recomputeMinMaxCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        add(recomputeMinMaxCB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(filler3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void iRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iRadioButtonActionPerformed
    {//GEN-HEADEREND:event_iRadioButtonActionPerformed
       updateAxis();
}//GEN-LAST:event_iRadioButtonActionPerformed

    private void jRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButtonActionPerformed
    {//GEN-HEADEREND:event_jRadioButtonActionPerformed
       updateAxis();
}//GEN-LAST:event_jRadioButtonActionPerformed

    private void kRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_kRadioButtonActionPerformed
    {//GEN-HEADEREND:event_kRadioButtonActionPerformed
       updateAxis();
}//GEN-LAST:event_kRadioButtonActionPerformed

    private void iSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_iSliderStateChanged
    {//GEN-HEADEREND:event_iSliderStateChanged
        params.setXCoord(iSlider.getVal()); 
    }//GEN-LAST:event_iSliderStateChanged

    private void jSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderStateChanged
    {//GEN-HEADEREND:event_jSliderStateChanged
        params.setYCoord(jSlider.getVal());
    }//GEN-LAST:event_jSliderStateChanged

    private void kSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_kSliderStateChanged
    {//GEN-HEADEREND:event_kSliderStateChanged
        params.setZCoord(kSlider.getVal()); 
    }//GEN-LAST:event_kSliderStateChanged

    private void recomputeMinMaxCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recomputeMinMaxCBActionPerformed
        params.setRecalculateMinMax(recomputeMinMaxCB.isSelected());
    }//GEN-LAST:event_recomputeMinMaxCBActionPerformed

    private void updateAxis()
    {
       iSlider.setEnabled(!iRadioButton.isSelected());
       jSlider.setEnabled(!jRadioButton.isSelected());
       kSlider.setEnabled(!kRadioButton.isSelected() && dims.length > 2);
       if (iRadioButton.isSelected())
          params.setAxis(0);
       else if (jRadioButton.isSelected())
          params.setAxis(1);
       else
          params.setAxis(2);
    }
    
   public void setParams(LineSliceParams params)
   {
      this.params = params;
   }

   public void setDims(int[] dims)
   {
      if (this.dims != null && this.dims.length == dims.length)
      {
         boolean unchanged = true;
         for (int i = 0; i < dims.length; i++)
            unchanged = unchanged && (dims[i] == this.dims[i]);
         if (unchanged)
            return;
      }
      params.setActive(false);
      iSlider.setEnabled(false);
      kSlider.setVisible(dims.length>2);
      kSlider.setEnabled(dims.length>2);
      kRadioButton.setVisible(dims.length>2);
      kRadioButton.setEnabled(dims.length>2);
      jSlider.setVisible(dims.length>1);
      jRadioButton.setVisible(dims.length>1);
      this.dims = dims;
      iRadioButton.setSelected(true);
      iSlider.setMax(dims[0]-1);
      if (iSlider.getVal()>dims[0]-1)
         iSlider.setVal(dims[0]/2);
      jSlider.setMax(dims[1]-1);
      if (jSlider.getVal()>dims[1]-1)
         jSlider.setVal(dims[1]/2);
      if (dims.length>2)
      {
         kSlider.setMax(dims[2]-1);
         if (kSlider.getVal()>dims[2]-1)
            kSlider.setVal(dims[2]/2);
      }
      params.setXCoord(iSlider.getVal());
      params.setYCoord(jSlider.getVal());
      params.setZCoord(kSlider.getVal());
      if (iRadioButton.isSelected())
         params.setAxis(0);
      else if (jRadioButton.isSelected())
         params.setAxis(1);
      else
         params.setAxis(2);
      params.setActive(true);
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup axisGroup;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JRadioButton iRadioButton;
    private pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider iSlider;
    private javax.swing.JRadioButton jRadioButton;
    private pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider jSlider;
    private javax.swing.JRadioButton kRadioButton;
    private pl.edu.icm.visnow.gui.widgets.EnhancedVerticalIntSlider kSlider;
    private javax.swing.JCheckBox recomputeMinMaxCB;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        final LineSliceGUI p = new LineSliceGUI();
        f.add(p);
        f.pack();
        f.setVisible(true);
    }
}
