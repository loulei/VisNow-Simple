//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
University of Warsaw, Interdisciplinary Centre for Mathematical and
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version.
*/
//</editor-fold>

package pl.edu.icm.visnow.lib.basic.mappers.RibbonPlot;

import pl.edu.icm.visnow.datasets.RegularField;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{

   private RegularField inField = null;
   private Params params = new Params();
   private float smax;

   /** Creates new form GUI */
   public GUI()
   {
      initComponents();
      dataComponentSelector.setScalarComponentsOnly(true);
      dataComponentSelector.setTitle("graph component");
      axesGUI.setVisible(false);
      showAxesBox.setVisible(false);   //TO DO
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        scaleSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        xButton = new javax.swing.JRadioButton();
        yButton = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        ribbonButton = new javax.swing.JRadioButton();
        zeroBaseButton = new javax.swing.JRadioButton();
        areaButton = new javax.swing.JRadioButton();
        minBaseButton = new javax.swing.JRadioButton();
        dataComponentSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        axesGUI = new pl.edu.icm.visnow.lib.basic.mappers.Axes3D.Axes3DGUI();
        showAxesBox = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(150, 850));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(200, 850));
        setLayout(new java.awt.GridBagLayout());

        scaleSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("graph scale"));
        scaleSlider.setMinimumSize(new java.awt.Dimension(180, 60));
        scaleSlider.setPreferredSize(new java.awt.Dimension(200, 65));
        scaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(scaleSlider, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("direction"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroup1.add(xButton);
        xButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        xButton.setSelected(true);
        xButton.setText("x");
        xButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xButtonActionPerformed(evt);
            }
        });
        jPanel2.add(xButton);

        buttonGroup1.add(yButton);
        yButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        yButton.setText("y");
        yButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yButtonActionPerformed(evt);
            }
        });
        jPanel2.add(yButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("graph type"));
        jPanel3.setLayout(new java.awt.GridLayout(2, 2));

        buttonGroup2.add(ribbonButton);
        ribbonButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ribbonButton.setSelected(true);
        ribbonButton.setText("ribbon");
        ribbonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ribbonButtonActionPerformed(evt);
            }
        });
        jPanel3.add(ribbonButton);

        buttonGroup3.add(zeroBaseButton);
        zeroBaseButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        zeroBaseButton.setSelected(true);
        zeroBaseButton.setText("zero based");
        zeroBaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroBaseButtonActionPerformed(evt);
            }
        });
        jPanel3.add(zeroBaseButton);

        buttonGroup2.add(areaButton);
        areaButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        areaButton.setText("area");
        areaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaButtonActionPerformed(evt);
            }
        });
        jPanel3.add(areaButton);

        buttonGroup3.add(minBaseButton);
        minBaseButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        minBaseButton.setText("min based");
        minBaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBaseButtonActionPerformed(evt);
            }
        });
        jPanel3.add(minBaseButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel3, gridBagConstraints);

        dataComponentSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dataComponentSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(dataComponentSelector, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(axesGUI, gridBagConstraints);

        showAxesBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        showAxesBox.setText("show axes");
        showAxesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAxesBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(showAxesBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void scaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderStateChanged
      params.setScale(scaleSlider.getVal());
   }//GEN-LAST:event_scaleSliderStateChanged

private void xButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xButtonActionPerformed
{//GEN-HEADEREND:event_xButtonActionPerformed
   if (xButton.isSelected())
      params.setAxis(0);
   else
      params.setAxis(1);
}//GEN-LAST:event_xButtonActionPerformed

private void yButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yButtonActionPerformed
{//GEN-HEADEREND:event_yButtonActionPerformed
   if (xButton.isSelected())
      params.setAxis(0);
   else
      params.setAxis(1);
}//GEN-LAST:event_yButtonActionPerformed

private void ribbonButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ribbonButtonActionPerformed
{//GEN-HEADEREND:event_ribbonButtonActionPerformed
   params.setRibbon(ribbonButton.isSelected());
}//GEN-LAST:event_ribbonButtonActionPerformed

private void areaButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_areaButtonActionPerformed
{//GEN-HEADEREND:event_areaButtonActionPerformed
   params.setRibbon(ribbonButton.isSelected());
}//GEN-LAST:event_areaButtonActionPerformed

private void dataComponentSelectorStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_dataComponentSelectorStateChanged
{//GEN-HEADEREND:event_dataComponentSelectorStateChanged
   params.setComponent(dataComponentSelector.getComponent());
}//GEN-LAST:event_dataComponentSelectorStateChanged

private void zeroBaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zeroBaseButtonActionPerformed
{//GEN-HEADEREND:event_zeroBaseButtonActionPerformed
   params.setZeroBased(zeroBaseButton.isSelected());
}//GEN-LAST:event_zeroBaseButtonActionPerformed

private void minBaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minBaseButtonActionPerformed
{//GEN-HEADEREND:event_minBaseButtonActionPerformed
   params.setZeroBased(zeroBaseButton.isSelected());
}//GEN-LAST:event_minBaseButtonActionPerformed

   private void showAxesBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showAxesBoxActionPerformed
   {//GEN-HEADEREND:event_showAxesBoxActionPerformed
      params.setShowAxes(showAxesBox.isSelected());
      axesGUI.setVisible(showAxesBox.isSelected());
   }//GEN-LAST:event_showAxesBoxActionPerformed

   public void setInField(RegularField inField)
   {
      params.setActive(false);
      if (inField.getDims() == null || inField.getDims().length != 2)
         return;
      this.inField = inField;
      dataComponentSelector.setDataSchema(inField.getSchema());
      params.setComponent(0);
      setScaleMinMax();
      params.setActive(true);
   }

   private void setScaleMinMax()
   {
      float min = inField.getData(params.getComponent()).getMinv();
      float max = inField.getData(params.getComponent()).getMaxv();
      int[] dims = inField.getDims();
      if (max <= min)
         max = min + .001f;
      long k = Math.round(Math.log10(.1 * (dims[0] + dims[1]) / (max - min)));
      smax = 10.f;
      if (k > 0)
         for (int i = 0; i < k; i++)
            smax *= 10;
      else
         for (int i = 0; i < -k; i++)
            smax /= 10;
      scaleSlider.setMin(-smax);
      scaleSlider.setMax(smax);
      scaleSlider.setVal(0.1f * smax);
      params.setScale(scaleSlider.getVal());
   }
   
   public pl.edu.icm.visnow.lib.basic.mappers.Axes3D.Axes3DGUI getAxesGUI()
   {
      return axesGUI;
   }
   
   public boolean isAdjusting()
   {
      return scaleSlider.isAdjusting();
   }

   public void setParams(Params params)
   {
      this.params = params;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton areaButton;
    private pl.edu.icm.visnow.lib.basic.mappers.Axes3D.Axes3DGUI axesGUI;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector dataComponentSelector;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton minBaseButton;
    private javax.swing.JRadioButton ribbonButton;
    private pl.edu.icm.visnow.gui.widgets.FloatSlider scaleSlider;
    private javax.swing.JCheckBox showAxesBox;
    private javax.swing.JRadioButton xButton;
    private javax.swing.JRadioButton yButton;
    private javax.swing.JRadioButton zeroBaseButton;
    // End of variables declaration//GEN-END:variables
}
