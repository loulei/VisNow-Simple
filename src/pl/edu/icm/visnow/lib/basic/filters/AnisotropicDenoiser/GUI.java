/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.filters.AnisotropicDenoiser;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import pl.edu.icm.visnow.datasets.RegularFieldSchema;
import pl.edu.icm.visnow.datasets.dataarrays.DataArraySchema;
import pl.edu.icm.visnow.lib.basic.filters.AnisotropicDenoiser.Params.CoreType;
import pl.edu.icm.visnow.system.main.VisNow;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends JPanel
{
   protected Params params = new Params();
   protected RegularFieldSchema s = null;
   protected RegularFieldSchema as = null;
   protected int nComps = 0;
   protected int nAnisoComps = 0;
   protected int[] anisoCompIndices;
   protected Vector<String> compNames = new Vector<String>();
   protected Vector<String> anisoCompNames = new Vector<String>();

   /** Creates new form InterpolateFieldUI */
   public GUI()
   {
      initComponents();
      JTableHeader header = componentTable.getTableHeader();
      componentPanel.add(header, BorderLayout.NORTH);   
      slopeSlider.setVal(3);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        radiusSlider = new javax.swing.JSlider();
        methodSelector = new javax.swing.JComboBox();
        slopeSlider = new pl.edu.icm.visnow.gui.widgets.ExtendedSlider();
        gradientSlopeSlider = new pl.edu.icm.visnow.gui.widgets.ExtendedSlider();
        weightsButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        componentPanel = new javax.swing.JPanel();
        componentTable = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        iterationsField = new javax.swing.JTextField();
        presmoothDiameterSpinner = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        computeSigmaBox = new javax.swing.JCheckBox();
        normalizeSigmaBox = new javax.swing.JCheckBox();
        presmoothButton = new javax.swing.JButton();
        bySlicesBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMinimumSize(new java.awt.Dimension(150, 540));
        setPreferredSize(new java.awt.Dimension(200, 545));
        setLayout(new java.awt.GridBagLayout());

        radiusSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        radiusSlider.setMajorTickSpacing(5);
        radiusSlider.setMaximum(20);
        radiusSlider.setMinorTickSpacing(1);
        radiusSlider.setPaintLabels(true);
        radiusSlider.setPaintTicks(true);
        radiusSlider.setSnapToTicks(true);
        radiusSlider.setValue(3);
        radiusSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "radius", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(radiusSlider, gridBagConstraints);

        methodSelector.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        methodSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "weighted average", "weighted median" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(methodSelector, gridBagConstraints);

        slopeSlider.setScaleType(pl.edu.icm.visnow.gui.widgets.ExtendedSlider.ScaleType.LOGARITHMIC);
        slopeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "width", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9))); // NOI18N
        slopeSlider.setMin(1.0F);
        slopeSlider.setMinimumSize(new java.awt.Dimension(90, 60));
        slopeSlider.setPreferredSize(new java.awt.Dimension(200, 60));
        slopeSlider.setVal(3.0F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(slopeSlider, gridBagConstraints);

        gradientSlopeSlider.setScaleType(pl.edu.icm.visnow.gui.widgets.ExtendedSlider.ScaleType.LOGARITHMIC);
        gradientSlopeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "gradient direction width", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 9))); // NOI18N
        gradientSlopeSlider.setMin(0.1F);
        gradientSlopeSlider.setMinimumSize(new java.awt.Dimension(90, 60));
        gradientSlopeSlider.setPreferredSize(new java.awt.Dimension(200, 60));
        gradientSlopeSlider.setVal(6.0F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(gradientSlopeSlider, gridBagConstraints);

        weightsButton.setText("show weights");
        weightsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        add(weightsButton, gridBagConstraints);

        runButton.setText("run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(runButton, gridBagConstraints);

        componentPanel.setLayout(new java.awt.BorderLayout());

        componentTable.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        componentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "component", "anisotropy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        componentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        componentTable.setMinimumSize(new java.awt.Dimension(180, 100));
        componentTable.setPreferredSize(new java.awt.Dimension(200, 100));
        componentTable.getTableHeader().setResizingAllowed(false);
        componentTable.getTableHeader().setReorderingAllowed(false);
        componentPanel.add(componentTable, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 4, 0);
        add(componentPanel, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CPU", "GPU" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jComboBox1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("iterations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel1, gridBagConstraints);

        iterationsField.setText("1");
        iterationsField.setMinimumSize(new java.awt.Dimension(40, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(iterationsField, gridBagConstraints);

        presmoothDiameterSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 1, 50, 1));
        presmoothDiameterSpinner.setValue(5);
        presmoothDiameterSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                presmoothDiameterSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        add(presmoothDiameterSpinner, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("standard deviation"));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        computeSigmaBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        computeSigmaBox.setText("compute");
        jPanel1.add(computeSigmaBox);

        normalizeSigmaBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        normalizeSigmaBox.setText("normalize");
        jPanel1.add(normalizeSigmaBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel1, gridBagConstraints);

        presmoothButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        presmoothButton.setText("presmooth");
        presmoothButton.setMargin(new java.awt.Insets(1, 5, 1, 5));
        presmoothButton.setMaximumSize(new java.awt.Dimension(78, 21));
        presmoothButton.setMinimumSize(new java.awt.Dimension(78, 21));
        presmoothButton.setOpaque(false);
        presmoothButton.setPreferredSize(new java.awt.Dimension(78, 21));
        presmoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presmoothButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(presmoothButton, gridBagConstraints);

        bySlicesBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        bySlicesBox.setText("smooth by slices");
        bySlicesBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bySlicesBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        add(bySlicesBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
      setParameters();
      params.setCompute(true);
}//GEN-LAST:event_runButtonActionPerformed

private void weightsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightsButtonActionPerformed
   setParameters();
   params.setComputeWeights(true);
}//GEN-LAST:event_weightsButtonActionPerformed

private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSliderStateChanged
   slopeSlider.setVal(1.f * radiusSlider.getValue());
   gradientSlopeSlider.setVal(2.f * radiusSlider.getValue());
}//GEN-LAST:event_radiusSliderStateChanged

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
   params.setCore(CoreType.values()[jComboBox1.getSelectedIndex()]);
}//GEN-LAST:event_jComboBox1ActionPerformed

private void presmoothDiameterSpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_presmoothDiameterSpinnerStateChanged
{//GEN-HEADEREND:event_presmoothDiameterSpinnerStateChanged
   params.setPresmoothRadius((Integer) presmoothDiameterSpinner.getValue());
}//GEN-LAST:event_presmoothDiameterSpinnerStateChanged

private void presmoothButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_presmoothButtonActionPerformed
{//GEN-HEADEREND:event_presmoothButtonActionPerformed
   setParameters();
   params.setPresmooth(true);
}//GEN-LAST:event_presmoothButtonActionPerformed

   private void bySlicesBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bySlicesBoxActionPerformed
   {//GEN-HEADEREND:event_bySlicesBoxActionPerformed
      params.setComputeBySlice(bySlicesBox.isSelected());
   }//GEN-LAST:event_bySlicesBoxActionPerformed

   public void setParams(Params params)
   {
      this.params = params;
   }
   
   public void setFieldSchemas(RegularFieldSchema sch, RegularFieldSchema asch)
   {
      JComboBox comboBox = new JComboBox();
      JComboBox anComboBox = new JComboBox();
      s = sch;
      as = asch;
      ArrayList<DataArraySchema> components = s.getComponentSchemas();
      nComps = components.size();
      for (int i = 0; i < components.size(); i++)
      {
          comboBox.addItem(components.get(i).getName());
          compNames.add(components.get(i).getName());
      }
      comboBox.addItem("null");
      setUpComponentColumn(comboBox, componentTable.getColumnModel().getColumn(0));
      componentTable.setValueAt(components.get(0).getName(), 0, 0);
      nAnisoComps = 0;
      componentTable.setValueAt("null",0,1);
      if (as!=null)
      {
         ArrayList<DataArraySchema> anisoComponents = as.getComponentSchemas();
         anisoCompIndices = new int[anisoComponents.size()+1];
         for (int i = 0; i < anisoComponents.size(); i++)
         {
            DataArraySchema cs = anisoComponents.get(i);
            if (cs.getVeclen()==1 || cs.getVeclen()==as.getNDims())
            {
               anisoCompNames.add(cs.getName());
               anisoCompIndices[nAnisoComps] = i;
               anComboBox.addItem(cs.getName());
               nAnisoComps += 1;
            }
         }
         if (nAnisoComps > 0)
            componentTable.setValueAt(anisoComponents.get(anisoCompIndices[0]).getName(), 0, 1);       
      }
      anComboBox.addItem("null");
      setUpComponentColumn(anComboBox, componentTable.getColumnModel().getColumn(1));
    }
   
    public void setUpComponentColumn(JComboBox comboBox,
                                     TableColumn componentColumn) 
    {
        componentColumn.setCellEditor(new DefaultCellEditor(comboBox));
        DefaultTableCellRenderer renderer =
                new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for components");
        componentColumn.setCellRenderer(renderer);
    }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void setParameters()
   {
      params.setMethod(methodSelector.getSelectedIndex());
      int n = 0;
      for (int j = 0; j < 6; j++)
         if (compNames.indexOf((String)componentTable.getValueAt(j,0)) >= 0) 
         n+=1;
      int[][] components = new int[n][2];
      for (int j = 0, i=0; j < 6; j++)
      {
         if (compNames.indexOf((String)componentTable.getValueAt(j,0)) >= 0) 
         {
            components[i][0] = compNames.indexOf((String)componentTable.getValueAt(j,0));
            if (componentTable.getValueAt(j,1) == null ||
                ((String)(componentTable.getValueAt(j,1))).equalsIgnoreCase("null") ||
                ((String)(componentTable.getValueAt(j,1))).equalsIgnoreCase(""))
               components[i][1] = -1;
            else
               components[i][1] = anisoCompNames.indexOf((String)componentTable.getValueAt(j,1));
            i+=1;
         }
      }
      params.setComponents(components);
      params.setRadius(radiusSlider.getValue());
      try
      {
         params.setIterations(Integer.parseInt(iterationsField.getText()));
      } catch (NumberFormatException e)
      {
         params.setIterations(1);
      }
      params.setSlope(slopeSlider.getVal());
      params.setSlope1(gradientSlopeSlider.getVal());
      params.setNThreads(VisNow.availableProcessors());
      params.setComputeSigma(computeSigmaBox.isSelected());
      params.setNormalizeSigma(normalizeSigmaBox.isSelected());
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bySlicesBox;
    private javax.swing.JPanel componentPanel;
    private javax.swing.JTable componentTable;
    private javax.swing.JCheckBox computeSigmaBox;
    private pl.edu.icm.visnow.gui.widgets.ExtendedSlider gradientSlopeSlider;
    private javax.swing.JTextField iterationsField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox methodSelector;
    private javax.swing.JCheckBox normalizeSigmaBox;
    private javax.swing.JButton presmoothButton;
    private javax.swing.JSpinner presmoothDiameterSpinner;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JButton runButton;
    private pl.edu.icm.visnow.gui.widgets.ExtendedSlider slopeSlider;
    private javax.swing.JButton weightsButton;
    // End of variables declaration//GEN-END:variables
   
}
