/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.filters.MulticomponentHistogram;

import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.ListCellRenderer;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.EventListenerList;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import pl.edu.icm.visnow.datasets.dataarrays.DataArraySchema;
import pl.edu.icm.visnow.datasets.Field;
import pl.edu.icm.visnow.datasets.IrregularField;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.gui.widgets.MultistateButton;
import pl.edu.icm.visnow.gui.widgets.SteppedComboBox;

/**
 * @author  Bartosz Borucki (babor@icm.edu.pl)
 * Warsaw University, Interdisciplinary Centre
 * for Mathematical and Computational Modelling
 */
public class GUI extends javax.swing.JPanel {
    
    private Params params = new Params();
    private Field inField = null;
    private boolean silent = false;
    private int[] compIndices;
    private ArrayList<String> compNames = new ArrayList<String>();
    private int nScalarComps = 0;
    private Condition.Logic[] column0 = Condition.Logic.values();
    private Object[] column1 = null;
    private Condition.Operator[] column2 = Condition.Operator.values();
    private Object[] column3 = null;

    /** Creates new form GUI */
    public GUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        basicPanel = new javax.swing.JPanel();
        resolutionPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        d1RB = new javax.swing.JRadioButton();
        d2RB = new javax.swing.JRadioButton();
        d3RB = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        xSizeLabel = new javax.swing.JLabel();
        ySizeLabel = new javax.swing.JLabel();
        zSizeLabel = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        ySizeSP = new javax.swing.JSpinner();
        xSizeSP = new javax.swing.JSpinner();
        zSizeSP = new javax.swing.JSpinner();
        roundByteCB = new javax.swing.JCheckBox();
        binningPanel = new javax.swing.JPanel();
        binningTP = new javax.swing.JTabbedPane();
        binByComponentsPanel = new javax.swing.JPanel();
        xCompSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        yCompSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        zCompSelector = new pl.edu.icm.visnow.lib.gui.DataComponentSelector();
        outGeometryCB = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        binByCoordsPanel = new javax.swing.JPanel();
        xCoordCB = new javax.swing.JComboBox();
        yCoordCB = new javax.swing.JComboBox();
        zCoordCB = new javax.swing.JComboBox();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        logCB = new javax.swing.JCheckBox();
        dropbgCB = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        logConstantTF = new javax.swing.JTextField();
        advancedPanel = new javax.swing.JPanel();
        operationsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        operationsTable = new javax.swing.JTable();
        filtersPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        filterTable = new javax.swing.JTable();
        computeButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        basicPanel.setLayout(new java.awt.GridBagLayout());

        resolutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "histogram resolution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        resolutionPanel.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel1.setText("Dimensions:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 4);
        jPanel3.add(jLabel1, gridBagConstraints);

        buttonGroup1.add(d1RB);
        d1RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        d1RB.setText("1D");
        d1RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d1RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(d1RB, gridBagConstraints);

        buttonGroup1.add(d2RB);
        d2RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        d2RB.setText("2D");
        d2RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d2RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(d2RB, gridBagConstraints);

        buttonGroup1.add(d3RB);
        d3RB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        d3RB.setText("3D");
        d3RB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d3RBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(d3RB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        resolutionPanel.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        xSizeLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        xSizeLabel.setText("x");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 0, 3);
        jPanel4.add(xSizeLabel, gridBagConstraints);

        ySizeLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        ySizeLabel.setText("y");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 0, 3);
        jPanel4.add(ySizeLabel, gridBagConstraints);

        zSizeLabel.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        zSizeLabel.setText("z");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 3, 0, 3);
        jPanel4.add(zSizeLabel, gridBagConstraints);

        jPanel9.setPreferredSize(new java.awt.Dimension(1, 1));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel9, gridBagConstraints);

        ySizeSP.setMinimumSize(new java.awt.Dimension(40, 20));
        ySizeSP.setPreferredSize(new java.awt.Dimension(60, 20));
        ySizeSP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ySizeSPStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(ySizeSP, gridBagConstraints);

        xSizeSP.setMinimumSize(new java.awt.Dimension(40, 20));
        xSizeSP.setPreferredSize(new java.awt.Dimension(60, 20));
        xSizeSP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xSizeSPStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(xSizeSP, gridBagConstraints);

        zSizeSP.setMinimumSize(new java.awt.Dimension(40, 20));
        zSizeSP.setPreferredSize(new java.awt.Dimension(60, 20));
        zSizeSP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zSizeSPStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        jPanel4.add(zSizeSP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        resolutionPanel.add(jPanel4, gridBagConstraints);

        roundByteCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        roundByteCB.setText("round dims to 32 for byte data");
        roundByteCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundByteCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        resolutionPanel.add(roundByteCB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        basicPanel.add(resolutionPanel, gridBagConstraints);

        binningPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "binning", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        binningPanel.setLayout(new java.awt.GridBagLayout());

        binningTP.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        binningTP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                binningTPStateChanged(evt);
            }
        });

        binByComponentsPanel.setLayout(new java.awt.GridBagLayout());

        xCompSelector.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "x", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        xCompSelector.setScalarComponentsOnly(true);
        xCompSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xCompSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByComponentsPanel.add(xCompSelector, gridBagConstraints);

        yCompSelector.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        yCompSelector.setScalarComponentsOnly(true);
        yCompSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yCompSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByComponentsPanel.add(yCompSelector, gridBagConstraints);

        zCompSelector.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "z", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        zCompSelector.setScalarComponentsOnly(true);
        zCompSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zCompSelectorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByComponentsPanel.add(zCompSelector, gridBagConstraints);

        outGeometryCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        outGeometryCB.setText("set geometry to data ranges");
        outGeometryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outGeometryCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByComponentsPanel.add(outGeometryCB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        binByComponentsPanel.add(filler1, gridBagConstraints);

        binningTP.addTab("by components", binByComponentsPanel);

        binByCoordsPanel.setLayout(new java.awt.GridBagLayout());

        xCoordCB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        xCoordCB.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "x", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        xCoordCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xCoordCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByCoordsPanel.add(xCoordCB, gridBagConstraints);

        yCoordCB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        yCoordCB.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        yCoordCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yCoordCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByCoordsPanel.add(yCoordCB, gridBagConstraints);

        zCoordCB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        zCoordCB.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "z", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        zCoordCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zCoordCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        binByCoordsPanel.add(zCoordCB, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.weighty = 1.0;
        binByCoordsPanel.add(filler2, gridBagConstraints);

        binningTP.addTab("by coordinates", binByCoordsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        binningPanel.add(binningTP, gridBagConstraints);

        logCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        logCB.setText("logarithmic scale");
        logCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        binningPanel.add(logCB, gridBagConstraints);

        dropbgCB.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        dropbgCB.setText("drop background count");
        dropbgCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropbgCBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        binningPanel.add(dropbgCB, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        jLabel2.setText("log constant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 27, 0, 0);
        binningPanel.add(jLabel2, gridBagConstraints);

        logConstantTF.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        logConstantTF.setText("1.0");
        logConstantTF.setMinimumSize(new java.awt.Dimension(60, 17));
        logConstantTF.setPreferredSize(new java.awt.Dimension(60, 17));
        logConstantTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logConstantTFActionPerformed(evt);
            }
        });
        logConstantTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                logConstantTFFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 0, 0);
        binningPanel.add(logConstantTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        basicPanel.add(binningPanel, gridBagConstraints);

        jTabbedPane1.addTab("basic", basicPanel);

        advancedPanel.setLayout(new java.awt.GridBagLayout());

        operationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "histogram operations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        operationsPanel.setMinimumSize(new java.awt.Dimension(180, 200));
        operationsPanel.setPreferredSize(new java.awt.Dimension(180, 200));
        operationsPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(180, 100));

        operationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Component", "sum", "min", "max", "avg", "std", "vstd"
            }
        ));
        operationsTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(operationsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        operationsPanel.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        advancedPanel.add(operationsPanel, gridBagConstraints);

        filtersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "data filtering", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        filtersPanel.setMinimumSize(new java.awt.Dimension(180, 200));
        filtersPanel.setPreferredSize(new java.awt.Dimension(180, 200));
        filtersPanel.setLayout(new java.awt.BorderLayout());

        filterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "Component", "Operator", "Value/Component"
            }
        ));
        filterTable.getTableHeader().setResizingAllowed(false);
        filterTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(filterTable);

        filtersPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        advancedPanel.add(filtersPanel, gridBagConstraints);

        jTabbedPane1.addTab("advanced", advancedPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jTabbedPane1, gridBagConstraints);

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(computeButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        if (inField != null) {
            params.fireAction();
        }
    }//GEN-LAST:event_computeButtonActionPerformed
    
    private void d1RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d1RBActionPerformed
        if (silent) {
            return;
        }
        
        params.setNDims(1);
        updateNDims();
        xCoordCBActionPerformed(null);
    }//GEN-LAST:event_d1RBActionPerformed
    
    private void d2RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d2RBActionPerformed
        if (silent) {
            return;
        }
        
        params.setNDims(2);
        updateNDims();
        xCoordCBActionPerformed(null);
    }//GEN-LAST:event_d2RBActionPerformed
    
    private void d3RBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d3RBActionPerformed
        if (silent) {
            return;
        }
        
        params.setNDims(3);
        updateNDims();
        xCoordCBActionPerformed(null);
    }//GEN-LAST:event_d3RBActionPerformed
    
    private void xSizeSPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xSizeSPStateChanged
        if (silent) {
            return;
        }
        int[] size = new int[3];
        size[0] = (Integer) xSizeSP.getValue();
        size[1] = (Integer) ySizeSP.getValue();
        size[2] = (Integer) zSizeSP.getValue();
        params.setDims(size);
    }//GEN-LAST:event_xSizeSPStateChanged
    
    private void ySizeSPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ySizeSPStateChanged
        xSizeSPStateChanged(evt);
    }//GEN-LAST:event_ySizeSPStateChanged
    
    private void zSizeSPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zSizeSPStateChanged
        xSizeSPStateChanged(evt);
    }//GEN-LAST:event_zSizeSPStateChanged
    
    private void xCoordCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xCoordCBActionPerformed
        if (silent) {
            return;
        }
        
        int[] sel = null;
        switch(params.getNDims()) {
            case 1:
                sel = new int[1];
                sel[0] = xCoordCB.getSelectedIndex();
                break;
            case 2:
                sel = new int[2];
                sel[0] = xCoordCB.getSelectedIndex();
                sel[1] = yCoordCB.getSelectedIndex();
                break;
            case 3:
                sel = new int[3];
                sel[0] = xCoordCB.getSelectedIndex();
                sel[1] = yCoordCB.getSelectedIndex();
                sel[2] = zCoordCB.getSelectedIndex();
                break;                
        }
        params.setSelectedCoords(sel);
    }//GEN-LAST:event_xCoordCBActionPerformed
    
    private void yCoordCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yCoordCBActionPerformed
        xCoordCBActionPerformed(evt);
    }//GEN-LAST:event_yCoordCBActionPerformed
    
    private void zCoordCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zCoordCBActionPerformed
        xCoordCBActionPerformed(evt);
    }//GEN-LAST:event_zCoordCBActionPerformed
    
    private void xCompSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xCompSelectorStateChanged
        if (silent) {
            return;
        }
        int[] sel = new int[3];
        sel[0] = xCompSelector.getComponent();
        sel[1] = yCompSelector.getComponent();
        sel[2] = zCompSelector.getComponent();
        params.setSelectedComponents(sel);
    }//GEN-LAST:event_xCompSelectorStateChanged
    
    private void yCompSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yCompSelectorStateChanged
        xCompSelectorStateChanged(evt);
    }//GEN-LAST:event_yCompSelectorStateChanged
    
    private void zCompSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zCompSelectorStateChanged
        xCompSelectorStateChanged(evt);
    }//GEN-LAST:event_zCompSelectorStateChanged
    
    private void binningTPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_binningTPStateChanged
        if (silent) {
            return;
        }
        switch (binningTP.getSelectedIndex()) {
            case 0:
                params.setBinning(Params.BINNING_BY_COMPONENTS);
                break;
            case 1:
                params.setBinning(Params.BINNING_BY_COORDINATES);
                break;
        }
        roundByteCB.setEnabled(params.getBinning() == Params.BINNING_BY_COMPONENTS);
        
    }//GEN-LAST:event_binningTPStateChanged
    
    private void logCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logCBActionPerformed
        if (silent) {
            return;
        }
        params.setCountLogScale(logCB.isSelected());
        logConstantTF.setEnabled(logCB.isSelected());
    }//GEN-LAST:event_logCBActionPerformed
    
    private void dropbgCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropbgCBActionPerformed
        if (silent) {
            return;
        }
        params.setCountDropBackground(dropbgCB.isSelected());
    }//GEN-LAST:event_dropbgCBActionPerformed

    private void logConstantTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logConstantTFActionPerformed
        if(silent) {
            return;
        }
        
        try {
            float v = Float.parseFloat(logConstantTF.getText());
            params.setLogConstant(v);
        } catch(NumberFormatException ex) {
            logConstantTF.setText(String.format("%s", params.getLogConstant()));                                   
        }
    }//GEN-LAST:event_logConstantTFActionPerformed

    private void logConstantTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_logConstantTFFocusLost
        logConstantTFActionPerformed(null);
    }//GEN-LAST:event_logConstantTFFocusLost

    private void outGeometryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outGeometryCBActionPerformed
        if(silent)
            return;
        
        params.setOutGeometryToData(outGeometryCB.isSelected());
    }//GEN-LAST:event_outGeometryCBActionPerformed

    private void roundByteCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundByteCBActionPerformed
        params.setRoundByteDimsTo32(roundByteCB.isSelected());
    }//GEN-LAST:event_roundByteCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JPanel basicPanel;
    private javax.swing.JPanel binByComponentsPanel;
    private javax.swing.JPanel binByCoordsPanel;
    private javax.swing.JPanel binningPanel;
    private javax.swing.JTabbedPane binningTP;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton computeButton;
    private javax.swing.JRadioButton d1RB;
    private javax.swing.JRadioButton d2RB;
    private javax.swing.JRadioButton d3RB;
    private javax.swing.JCheckBox dropbgCB;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JTable filterTable;
    private javax.swing.JPanel filtersPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox logCB;
    private javax.swing.JTextField logConstantTF;
    private javax.swing.JPanel operationsPanel;
    private javax.swing.JTable operationsTable;
    private javax.swing.JCheckBox outGeometryCB;
    private javax.swing.JPanel resolutionPanel;
    private javax.swing.JCheckBox roundByteCB;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector xCompSelector;
    private javax.swing.JComboBox xCoordCB;
    private javax.swing.JLabel xSizeLabel;
    private javax.swing.JSpinner xSizeSP;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector yCompSelector;
    private javax.swing.JComboBox yCoordCB;
    private javax.swing.JLabel ySizeLabel;
    private javax.swing.JSpinner ySizeSP;
    private pl.edu.icm.visnow.lib.gui.DataComponentSelector zCompSelector;
    private javax.swing.JComboBox zCoordCB;
    private javax.swing.JLabel zSizeLabel;
    private javax.swing.JSpinner zSizeSP;
    // End of variables declaration//GEN-END:variables

    public void setParams(Params params) {
        this.params = params;
        updateGUI();
    }
    
    public void setInField(Field field) {
        this.inField = field;
        
        final ArrayList<DataArraySchema> components = inField.getSchema().getComponentSchemas();
        int nComps = components.size();
        compIndices = new int[nComps];
        nScalarComps = 0;
        for (int i = 0; i < nComps; i++) {
            if (components.get(i).getVeclen() == 1) {
                compIndices[nScalarComps] = i;
                nScalarComps++;
            }
        }
        
        int nSpace = field.getNSpace();
        int c = 0;
        if (inField instanceof RegularField) {
            int nDims = ((RegularField) field).getDims().length;
            
            column1 = new Object[nScalarComps + nSpace + 1 + nDims + 1];
            for (c = 0; c < nScalarComps; c++) {
                column1[c] = compIndices[c];
            }
            
            column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEX;
            if (nSpace > 1) {
                column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEY;
                if (nSpace > 2) {
                    column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEZ;
                }                
            }            
            column1[c++] = FieldSpaceCondition.SpatialComponent.NODE;
            column1[c++] = FieldSpaceCondition.SpatialComponent.INDEX0;
            if (nDims > 1) {
                column1[c++] = FieldSpaceCondition.SpatialComponent.INDEX1;
                if (nDims > 2) {
                    column1[c++] = FieldSpaceCondition.SpatialComponent.INDEX2;
                }
            }            
            column1[c] = null;            
            
        } else if (inField instanceof IrregularField) {
            column1 = new Object[nScalarComps + nSpace + 1 + 1];
            for (c = 0; c < nScalarComps; c++) {
                column1[c] = compIndices[c];
            }
            column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEX;
            if (nSpace > 1) {
                column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEY;
                if (nSpace > 2) {
                    column1[c++] = FieldSpaceCondition.SpatialComponent.SPACEZ;
                }
            }
            column1[c++] = FieldSpaceCondition.SpatialComponent.NODE;
            column1[c] = null;            
        }
        
        
        column3 = new Object[nScalarComps];
        for (c = 0; c < nScalarComps; c++) {
            column3[c] = compIndices[c];
        }
        
        updateGUI();
    }
    
    private void updateGUI() {
        boolean oldSilent = silent;
        silent = true;
        if (inField == null) {
            computeButton.setEnabled(false);
            silent = oldSilent;
            return;
        }
        
        computeButton.setEnabled(true);
        updateNDims();
        
        int[] size = params.getDims();
        xSizeSP.setValue(size[0]);
        ySizeSP.setValue(size[1]);
        zSizeSP.setValue(size[2]);
        roundByteCB.setSelected(params.isRoundByteDimsTo32());
        updateBinning();
        updateComponents();
        logCB.setSelected(params.isCountLogScale());
        logConstantTF.setEnabled(params.isCountLogScale());
        logConstantTF.setText(String.format("%s", params.getLogConstant()));
        dropbgCB.setSelected(params.isCountDropBackground());
        updateCoords();
        
        updateFilters();
        
        updateOperations();
        
        
        
        
        
        silent = oldSilent;
    }
    
    private void updateNDims() {
        boolean oldSilent = silent;
        silent = true;
        xCompSelector.setVisible(true);
        xSizeLabel.setVisible(true);
        xSizeSP.setVisible(true);
        xCoordCB.setVisible(true);
        switch (params.getNDims()) {
            case 1:
                d1RB.setSelected(true);
                ySizeLabel.setVisible(false);
                ySizeSP.setVisible(false);
                zSizeLabel.setVisible(false);
                zSizeSP.setVisible(false);
                yCompSelector.setVisible(false);
                zCompSelector.setVisible(false);
                yCoordCB.setVisible(false);
                zCoordCB.setVisible(false);
                break;
            case 2:
                d2RB.setSelected(true);
                ySizeLabel.setVisible(true);
                ySizeSP.setVisible(true);
                zSizeLabel.setVisible(false);
                zSizeSP.setVisible(false);
                yCompSelector.setVisible(true);
                zCompSelector.setVisible(false);
                yCoordCB.setVisible(true);
                zCoordCB.setVisible(false);
                break;
            case 3:
                d3RB.setSelected(true);
                ySizeLabel.setVisible(true);
                ySizeSP.setVisible(true);
                zSizeLabel.setVisible(true);
                zSizeSP.setVisible(true);
                yCompSelector.setVisible(true);
                zCompSelector.setVisible(true);
                yCoordCB.setVisible(true);
                zCoordCB.setVisible(true);
                break;
        }
        silent = oldSilent;
    }
    
    private void updateBinning() {
        boolean oldSilent = silent;
        silent = true;
        switch (params.getBinning()) {
            case Params.BINNING_BY_COMPONENTS:
                binningTP.setSelectedIndex(0);
                break;
            case Params.BINNING_BY_COORDINATES:
                binningTP.setSelectedIndex(1);
                break;
        }
        roundByteCB.setEnabled(params.getBinning() == Params.BINNING_BY_COMPONENTS);
        silent = oldSilent;
    }
    
    private void updateCoords() {
        if (inField == null) {
            return;
        }
        boolean oldSilent = silent;
        silent = true;
        
        String[] modelStrings = null;
        switch (inField.getNSpace()) {
            case 1:
                modelStrings = new String[1];
                modelStrings[0] = "field x coordinate";
                break;
            case 2:
                modelStrings = new String[2];
                modelStrings[0] = "field x coordinate";
                modelStrings[1] = "field y coordinate";
                break;
            case 3:
                modelStrings = new String[3];
                modelStrings[0] = "field x coordinate";
                modelStrings[1] = "field y coordinate";
                modelStrings[2] = "field z coordinate";
                break;
        }
        DefaultComboBoxModel xDcbm = new DefaultComboBoxModel(modelStrings);
        DefaultComboBoxModel yDcbm = new DefaultComboBoxModel(modelStrings);
        DefaultComboBoxModel zDcbm = new DefaultComboBoxModel(modelStrings);
        xCoordCB.setModel(xDcbm);
        yCoordCB.setModel(yDcbm);
        zCoordCB.setModel(zDcbm);
        
        int[] sel = params.getSelectedCoords();
        xCoordCB.setSelectedIndex(sel[0]);
        yCoordCB.setSelectedIndex(sel[1]);
        zCoordCB.setSelectedIndex(sel[2]);
        
        silent = oldSilent;
    }
    
    private void updateComponents() {
        if (inField == null) {
            return;
        }
        boolean oldSilent = silent;
        silent = true;
        
        xCompSelector.setDataSchema(inField.getSchema());
        yCompSelector.setDataSchema(inField.getSchema());
        zCompSelector.setDataSchema(inField.getSchema());
        
        int[] sel = params.getSelectedComponents();
        xCompSelector.setComponent(sel[0]);
        yCompSelector.setComponent(sel[1]);
        zCompSelector.setComponent(sel[2]);
        
        outGeometryCB.setSelected(params.isOutGeometryToData());
        
        silent = oldSilent;
    }
    
    private void updateFilters() {
        if (inField == null) {
            return;
        }
        boolean oldSilent = silent;
        silent = true;
        
        JComboBox[] cbs = new JComboBox[4];
        
        cbs[0] = new SteppedComboBox(column0);
        
        cbs[1] = new SteppedComboBox(column1);
        cbs[1].setRenderer(new ConditionTableListCellRenderer1(inField));
        
        cbs[2] = new SteppedComboBox(column2);
        
        cbs[3] = new SteppedComboBox(column3);        
        cbs[3].setRenderer(new ConditionTableListCellRenderer1(inField));
        cbs[3].setEditable(true);
        
        
        
        filterTable.setModel(new ConditionTableModel(inField, params.getFilterConditions(), params.getFilterConditionsLogic()));
        for (int i = 0; i < 4; i++) {
            filterTable.getColumnModel().getColumn(i).setCellEditor(new DefaultCellEditor(cbs[i]));
        }
        
        filterTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        filterTable.getColumnModel().getColumn(0).setMaxWidth(40);
        
        filterTable.getColumnModel().getColumn(2).setPreferredWidth(40);
        filterTable.getColumnModel().getColumn(2).setMaxWidth(40);
        DefaultTableCellRenderer cr2 = new DefaultTableCellRenderer();
        cr2.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        filterTable.getColumnModel().getColumn(2).setCellRenderer(cr2);
        
        DefaultTableCellRenderer hr0 = new DefaultTableCellRenderer();
        hr0.setText("Logic");
        hr0.setToolTipText("Logic - logical operation between ");
        hr0.setBackground(Color.LIGHT_GRAY);
        filterTable.getColumnModel().getColumn(0).setHeaderRenderer(hr0);
        
        DefaultTableCellRenderer hr1 = new DefaultTableCellRenderer();
        hr1.setText("Component/Space");
        hr1.setToolTipText("Component/Space - component or spatial variable for left-hand side of condition");
        hr1.setBackground(Color.LIGHT_GRAY);
        filterTable.getColumnModel().getColumn(1).setHeaderRenderer(hr1);
        
        DefaultTableCellRenderer hr2 = new DefaultTableCellRenderer();
        hr2.setText("Operator");
        hr2.setToolTipText("Operator - logical operator for condition");
        hr2.setBackground(Color.LIGHT_GRAY);
        filterTable.getColumnModel().getColumn(2).setHeaderRenderer(hr2);
        
        DefaultTableCellRenderer hr3 = new DefaultTableCellRenderer();
        hr3.setText("Component/Value");
        hr3.setToolTipText("Component/Value - component or value for right-hand side of condition");
        hr3.setBackground(Color.LIGHT_GRAY);
        filterTable.getColumnModel().getColumn(3).setHeaderRenderer(hr3);
        
        
        filterTable.getModel().addTableModelListener(new TableModelListener() {
            
            public void tableChanged(TableModelEvent e) {
                params.setFilterConditions(((ConditionTableModel) filterTable.getModel()).getConditions());
                params.setFilterConditionsLogic(((ConditionTableModel) filterTable.getModel()).getConditionsLogic());
            }
        });
        
        silent = oldSilent;
    }
    
    private void updateOperations() {
        if (inField == null) {
            return;
        }
        boolean oldSilent = silent;
        silent = true;
        
        
        HistogramOperation[] hops = params.getHistogramOperations();
        int[][] map = new int[6][inField.getNData()];
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < map[0].length; j++) {
                map[i][j] = 0;                
            }
        }
        
        
        if (hops != null && hops.length > 0) {
            for (int i = 0; i < hops.length; i++) {
                int ci = hops[i].getComponentIndex();
                int oi = -1;
                switch (hops[i].getOperation()) {
                    case SUM:
                        oi = 0;
                        break;
                    case MIN:
                        oi = 1;
                        break;
                    case MAX:
                        oi = 2;
                        break;
                    case AVG:
                        oi = 3;
                        break;
                    case STD:
                        oi = 4;
                        break;
                    case VSTD:
                        oi = 5;
                        break;
                }
                
                if (oi != -1) {
                    if (hops[i].isLog()) {
                        map[oi][ci] = 2;
                    } else {
                        map[oi][ci] = 1;
                    }                    
                }
            }
        }
        
        
        operationsTable.setModel(new OperationsTableModel(inField, map));
        operationsTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        final String[] opts = {"off", "on", "log"};
        for (int i = 0; i < 6; i++) {
            operationsTable.getColumnModel().getColumn(i + 1).setPreferredWidth(30);
            operationsTable.getColumnModel().getColumn(i + 1).setMaxWidth(30);
            
            operationsTable.getColumnModel().getColumn(i + 1).setCellRenderer(new MultistateButtonCellRenderer(opts));
            operationsTable.getColumnModel().getColumn(i + 1).setCellEditor(new MultistateButtonCellEditor(opts, operationsTable));
        }

        operationsTable.getModel().addTableModelListener(new TableModelListener() {
            
            public void tableChanged(TableModelEvent e) {
                int[][] map = ((OperationsTableModel) operationsTable.getModel()).getMap();
                if (map == null || map[0] == null || map[0].length < 1) {
                    return;
                }
                
                int nComps = map[0].length;
                ArrayList<HistogramOperation> hops = new ArrayList<HistogramOperation>();
                for (int i = 0; i < nComps; i++) {
                    for (int j = 0; j < 6; j++) {
                        if (map[j][i] > 0) {
                            HistogramOperation.Operation op = null;
                            switch (j) {
                                case 0:
                                    op = HistogramOperation.Operation.SUM;
                                    break;
                                case 1:
                                    op = HistogramOperation.Operation.MIN;
                                    break;
                                case 2:
                                    op = HistogramOperation.Operation.MAX;
                                    break;
                                case 3:
                                    op = HistogramOperation.Operation.AVG;
                                    break;
                                case 4:
                                    op = HistogramOperation.Operation.STD;
                                    break;
                                case 5:
                                    op = HistogramOperation.Operation.VSTD;
                                    break;
                            }
                            if (op == null) {
                                continue;
                            }
                            
                            boolean log = (map[j][i] == 2);
                            hops.add(new HistogramOperation(op, i, inField, log, params.getLogConstant(), false));
                        }                        
                    }
                }
                
                HistogramOperation[] hopsArr = new HistogramOperation[hops.size()];
                for (int i = 0; i < hopsArr.length; i++) {
                    hopsArr[i] = hops.get(i);                    
                }
                params.setHistogramOperations(hopsArr);                
            }
        });
        
        
        
        silent = oldSilent;        
    }
    
    public class ConditionTableListCellRenderer1 extends JLabel implements ListCellRenderer {

        private Field field;
        
        public ConditionTableListCellRenderer1(Field field) {
            this.field = field;
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(TOP);
        }
        
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value == null) {
                this.setText("<remove>");
            } else if (value instanceof Integer) {
                this.setText(field.getData((Integer) value).getName());
            } else {
                this.setText(value.toString());
            }
            
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            return this;
            
        }
    }
    
    private class MultistateButtonCellRenderer extends MultistateButton implements TableCellRenderer {
        
        public MultistateButtonCellRenderer(String[] texts) {
            super(texts, null);
            this.setMargin(new Insets(2, 2, 2, 2));
            this.setFont(new java.awt.Font("Dialog", 0, 10));
        }
        
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if(column == 6) { //turns off cell renderer for VSTD for scalar components              
                int[] veclens = ((OperationsTableModel)table.getModel()).getComponentsVeclen();
                if(veclens[row] == 1)
                    return null;
            }
            
            if (value instanceof Integer) {
                int n = (Integer) value;
                this.setState(n);                
            }
            return this;
        }        
    }
    
    private class MultistateButtonCellEditor extends MultistateButton implements TableCellEditor {
        
        protected EventListenerList listenerList2 = new EventListenerList();
        
        public MultistateButtonCellEditor(String[] texts, final JTable table) {
            super(texts, null);
            this.setMargin(new Insets(2, 2, 2, 2));
            this.setFont(new java.awt.Font("Dialog", 0, 10));
        }
        
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            if(column == 6) {                
                int[] veclens = ((OperationsTableModel)table.getModel()).getComponentsVeclen();
                if(veclens[row] == 1)
                    return null;
            }
            
            if (value instanceof Integer) {
                int n = (Integer) value;
                this.setState(n+1);  //+1 for reacting on first click (entering edit mode)
            }
            return this;
        }
        
        public Object getCellEditorValue() {
            return (Integer) this.getState();
        }
        
        public boolean isCellEditable(EventObject anEvent) {            
	    return true;
        }
        
        public boolean shouldSelectCell(EventObject anEvent) {
            return true;
        }
        
        public boolean stopCellEditing() {
            fireEditingStopped();            
            return true;
        }
        
        public void cancelCellEditing() {
            fireEditingCanceled();            
        }
        
        public void addCellEditorListener(CellEditorListener l) {
            listenerList2.add(CellEditorListener.class, l);
        }
        
        public void removeCellEditorListener(CellEditorListener l) {
            listenerList2.remove(CellEditorListener.class, l);
        }
        
        protected void fireEditingStopped() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList2.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (changeEvent == null) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }                
            }
        }
        
        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList2.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (changeEvent == null) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }                
            }
        }
    }


}
