/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.filters.RegularFieldDifferentialOperations;

import javax.swing.JTable;
import pl.edu.icm.visnow.datasets.RegularField;
import pl.edu.icm.visnow.system.main.VisNow;


/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class GUI extends javax.swing.JPanel
{
   private Params params = new Params();
   private int nNumericScalarComponents = 0;
   private int[] numericScalarComponentIndices = null;
   private int nNumericVectorComponents = 0;
   private int[] numericVectorComponentIndices = null;
   private static final String [] scalarTableHeader = new String [] {"scalar component",
                                                                     "<html>\u2207</html>", 
                                                                     "<html>|\u2207|</html>", 
                                                                     "<html>\u2207/|\u2207|</html>",
                                                                     "<html>\u0394</html>",
                                                                     "<html>D<sup>2</sup></html>",
                                                                     "<html>D<sup>2</sup>eig</html>"};
   private static final Class[] scalarTableColumnTypes = new Class [] {String.class, 
                                                                       Boolean.class, 
                                                                       Boolean.class, 
                                                                       Boolean.class, 
                                                                       Boolean.class, 
                                                                       Boolean.class, 
                                                                       Boolean.class};
   private static final int[] preferredScalarComponentTableColumnWidth = new int[]{0,22,22,42,22,32,40};
   private static final String [] vectorTableHeader = new String [] {"vector component","D", "div", "rot"};
   private static final int[] preferredVectorComponentTableColumnWidth = new int[]{0,22,22,22};
   
   /** Creates new form GUI */
   public GUI()
   {
      initComponents();
      for (int i = 1; i < 7; i++)
         scalarComponentTable.getColumnModel().getColumn(i).setPreferredWidth(preferredScalarComponentTableColumnWidth[i]);
      scalarComponentTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
      for (int i = 1; i < 4; i++)
         vectorComponentTable.getColumnModel().getColumn(i).setPreferredWidth(preferredVectorComponentTableColumnWidth[i]);
      vectorComponentTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        scalarComponentTable = new javax.swing.JTable();
        computeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        vectorComponentTable = new javax.swing.JTable();
        autoRunBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(180, 110));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(220, 150));

        scalarComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "component", "<html>\u2207</html>", "<html>|\u2207|</html>", "<html>\u2207/|\u2207|</html>", "\u0394", "<html>D<sup>2</sup></html>", "<html>D<sup>2</sup>eig</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scalarComponentTable.setMaximumSize(new java.awt.Dimension(500, 200));
        scalarComponentTable.setMinimumSize(new java.awt.Dimension(210, 200));
        scalarComponentTable.setPreferredSize(new java.awt.Dimension(280, 300));
        jScrollPane1.setViewportView(scalarComponentTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jScrollPane1, gridBagConstraints);

        computeButton.setText("run");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        add(computeButton, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(180, 110));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(220, 150));

        vectorComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "component", "D", "rot", "div"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        vectorComponentTable.setMaximumSize(new java.awt.Dimension(500, 300));
        vectorComponentTable.setMinimumSize(new java.awt.Dimension(175, 200));
        vectorComponentTable.setPreferredSize(new java.awt.Dimension(220, 300));
        jScrollPane2.setViewportView(vectorComponentTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jScrollPane2, gridBagConstraints);

        autoRunBox.setText("auto");
        autoRunBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRunBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(autoRunBox, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(200, 10));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed

      if (nNumericScalarComponents + nNumericVectorComponents == 0)
         return;
      try
      {
         params.setThreads(VisNow.availableProcessors());
      } catch (NumberFormatException e)
      {
         params.setThreads(1);
      }
      boolean[][] operations = params.getScalarOperations();
      for (int i = 0; i < nNumericScalarComponents; i++)
         for (int j = 0; j < 6; j++)
            operations[i][j] = (Boolean)(scalarComponentTable.getValueAt(i, j+1));
      operations = params.getVectorOperations();
      for (int i = 0; i < nNumericVectorComponents; i++)
      {
         for (int j = 0; j < 3; j++)
            operations[i][j] = (Boolean)(vectorComponentTable.getValueAt(i, j+1));
      }
      params.fireStateChanged();
   }//GEN-LAST:event_computeButtonActionPerformed

   private void autoRunBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_autoRunBoxActionPerformed
   {//GEN-HEADEREND:event_autoRunBoxActionPerformed
      params.setAutoRun(autoRunBox.isSelected());
   }//GEN-LAST:event_autoRunBoxActionPerformed

   public void reset(RegularField inField)
   {
      numericScalarComponentIndices = params.getScalarComponents();
      if (numericScalarComponentIndices == null || numericScalarComponentIndices.length == 0)
      {
         scalarComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {{null, null, null, null, null, null, null}},scalarTableHeader)
         {
            @Override
            public Class getColumnClass(int columnIndex)
            {
               return scalarTableColumnTypes [columnIndex];
            }
         });
      }
      else
      {
         nNumericScalarComponents = numericScalarComponentIndices.length;
         Object[][] scalarTableContent = new Object[nNumericScalarComponents][7];
         for (int i = 0; i < nNumericScalarComponents; i++)
         {
            scalarTableContent[i][0] = inField.getData(numericScalarComponentIndices[i]).getName();
            for (int j = 1; j < 7; j++)
               scalarTableContent[i][j] = false;
         }
         scalarComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            scalarTableContent, scalarTableHeader)
            {
            @Override
               public Class getColumnClass(int columnIndex)
               {
                  return scalarTableColumnTypes [columnIndex];
               }
            });
         for (int i = 1; i < 7; i++)
            scalarComponentTable.getColumnModel().getColumn(i).setPreferredWidth(preferredScalarComponentTableColumnWidth[i]);
      }
      numericVectorComponentIndices = params.getVectorComponents();
      if (numericVectorComponentIndices == null || numericVectorComponentIndices.length == 0)
      {
         vectorComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {{null, null, null, null}},vectorTableHeader)
         {
            public Class getColumnClass(int columnIndex)
            {
               return scalarTableColumnTypes [columnIndex];
            }
         });
         numericVectorComponentIndices = null;
      }
      else
      { 
         nNumericVectorComponents = numericVectorComponentIndices.length;
         Object[][] vectorTableContent = new Object[nNumericVectorComponents][4];
         for (int i = 0; i < nNumericVectorComponents; i++)
         {
            vectorTableContent[i][0] = inField.getData(numericVectorComponentIndices[i]).getName();
            for (int j = 1; j < 4; j++)
               vectorTableContent[i][j] = false;
         }

         vectorComponentTable.setModel(new javax.swing.table.DefaultTableModel(
            vectorTableContent, vectorTableHeader)
            {
                public Class getColumnClass(int columnIndex)
               {
                  return scalarTableColumnTypes [columnIndex];
               }
            });
         for (int i = 1; i < 4; i++)
             vectorComponentTable.getColumnModel().getColumn(i).setPreferredWidth(preferredVectorComponentTableColumnWidth[i]);
      }
   }

   public void setParams(Params params)
   {
      this.params = params;
   }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoRunBox;
    private javax.swing.JButton computeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable scalarComponentTable;
    private javax.swing.JTable vectorComponentTable;
    // End of variables declaration//GEN-END:variables
   
}
