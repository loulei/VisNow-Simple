/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.basic.writers.UCDWriter;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import pl.edu.icm.visnow.system.main.VisNow;
import pl.edu.icm.visnow.system.swing.filechooser.VNFileChooser;

public class GUI extends javax.swing.JPanel
{

   private String path = null;
   private String lastPath = null;
   protected Params params = new Params();

   /** Creates new form EmptyVisnowModuleGUI */
   public GUI()
   {
      initComponents();
   }

   /**
    * Set the value of params
    *
    * @param params new value of params
    */
   public void setParams(Params params)
   {
      this.params = params;
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      formatGroup = new javax.swing.ButtonGroup();
      fileChooser = new javax.swing.JFileChooser();
      selectButton = new javax.swing.JButton();
      fileNameField = new javax.swing.JTextField();
      asciiButton = new javax.swing.JRadioButton();
      binaryButton = new javax.swing.JRadioButton();
      avsBox = new javax.swing.JCheckBox();
      writeButton = new javax.swing.JButton();
      resultLabel = new javax.swing.JLabel();

      setLayout(new java.awt.GridBagLayout());

      java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pl/edu/icm/visnow/lib/basic/writers/UCDWriter/Bundle"); // NOI18N
      selectButton.setText(bundle.getString("GUI.selectButton.text_1")); // NOI18N
      selectButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
      add(selectButton, gridBagConstraints);

      fileNameField.setText(bundle.getString("GUI.fileNameField.text_1")); // NOI18N
      fileNameField.setMinimumSize(new java.awt.Dimension(4, 22));
      fileNameField.setPreferredSize(new java.awt.Dimension(78, 22));
      fileNameField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            fileNameFieldActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
      add(fileNameField, gridBagConstraints);

      formatGroup.add(asciiButton);
      asciiButton.setSelected(true);
      asciiButton.setText(bundle.getString("GUI.asciiButton.text_1")); // NOI18N
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      add(asciiButton, gridBagConstraints);

      formatGroup.add(binaryButton);
      binaryButton.setText(bundle.getString("GUI.binaryButton.text_1")); // NOI18N
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(binaryButton, gridBagConstraints);

      avsBox.setSelected(true);
      avsBox.setText(bundle.getString("GUI.avsBox.text_1")); // NOI18N
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      add(avsBox, gridBagConstraints);

      writeButton.setText(bundle.getString("GUI.writeButton.text_1")); // NOI18N
      writeButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            writeButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
      add(writeButton, gridBagConstraints);

      resultLabel.setText(bundle.getString("GUI.resultLabel.text")); // NOI18N
      resultLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 5;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weighty = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(6, 2, 0, 2);
      add(resultLabel, gridBagConstraints);
   }// </editor-fold>//GEN-END:initComponents

    private void fileNameFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileNameFieldActionPerformed
    {//GEN-HEADEREND:event_fileNameFieldActionPerformed
       params.setAVS(avsBox.isSelected());
       params.setAscii(asciiButton.isSelected());
       params.setFileName(fileNameField.getText());
       params.fireStateChanged();
}//GEN-LAST:event_fileNameFieldActionPerformed

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_writeButtonActionPerformed
    {//GEN-HEADEREND:event_writeButtonActionPerformed
       if (params.getFileName() != null && params.getFileName().length() > 4 && VNFileChooser.checkForOverwrite( params.getFileName() ) )
       {
          params.setAVS(avsBox.isSelected());
          params.setAscii(asciiButton.isSelected());
          params.fireStateChanged();
       }
}//GEN-LAST:event_writeButtonActionPerformed
   public void setResultText(String s)
   {
      resultLabel.setText(s);
   }


    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
    {//GEN-HEADEREND:event_selectButtonActionPerformed
       if (lastPath == null)
          fileChooser.setCurrentDirectory(new File(VisNow.get().getMainConfig().getDataWriterPath()));
       else
          fileChooser.setCurrentDirectory(new File(lastPath));

       FileNameExtensionFilter volFilter = new FileNameExtensionFilter("UCD files", "inp", "INP", "vnf", "VNF");
       fileChooser.addChoosableFileFilter(volFilter);


       int returnVal = fileChooser.showDialog(this,"Select");
       if (returnVal == JFileChooser.APPROVE_OPTION)
       {
          path = VNFileChooser.filenameWithExtenstionAddedIfNecessary(fileChooser.getSelectedFile(), volFilter);
          fileNameField.setText(path);
          lastPath = path.substring(0, path.lastIndexOf(File.separator));
          params.setFileName(path);
       }
}//GEN-LAST:event_selectButtonActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JRadioButton asciiButton;
   private javax.swing.JCheckBox avsBox;
   private javax.swing.JRadioButton binaryButton;
   private javax.swing.JFileChooser fileChooser;
   private javax.swing.JTextField fileNameField;
   private javax.swing.ButtonGroup formatGroup;
   private javax.swing.JLabel resultLabel;
   private javax.swing.JButton selectButton;
   private javax.swing.JButton writeButton;
   // End of variables declaration//GEN-END:variables
}
