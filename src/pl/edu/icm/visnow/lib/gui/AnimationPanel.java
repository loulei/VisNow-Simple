//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
 University of Warsaw, Interdisciplinary Centre for Mathematical and
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
//</editor-fold>
package pl.edu.icm.visnow.lib.gui;

import java.awt.Container;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.border.TitledBorder;
import pl.edu.icm.visnow.geometries.viewer3d.eventslisteners.render.FrameModificationEvent;
import pl.edu.icm.visnow.geometries.viewer3d.eventslisteners.render.FrameModificationListener;
import pl.edu.icm.visnow.geometries.viewer3d.eventslisteners.render.FrameRenderedEvent;
import pl.edu.icm.visnow.geometries.viewer3d.eventslisteners.render.FrameRenderedListener;

/**
 *
 * @author Krzysztof S. Nowinski (know@icm.edu.pl) Warsaw University Interdisciplinary Centre for
 * Mathematical and Computational Modelling
 */
public class AnimationPanel extends javax.swing.JPanel
{

   public static final int FORWARD = 1;
   public static final int STOP = 0;
   public static final int BACK = -1;
   private int firstFrame = 0;
   private int currentFrame = 0;
   private float currentTime = 0;
   private int lastFrame = 100;
   float tmin = 0, tmax = 1, dt = .01f;
   float tlow = 0, tup = 1;
   private int delay = 10;
   private int step = 1;
   private int mode = STOP;
   private boolean renderDone = true;
   private boolean updatingFrame;
   private ImageIcon fwdIcon = new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/fwd.png"));
   private ImageIcon bckIcon = new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/bck.png"));
   private ImageIcon selFwdIcon = new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/selfwd.png"));
   private ImageIcon selBckIcon = new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/selbck.png"));
   private Vector<FrameModificationListener> listeners = new Vector<FrameModificationListener>();
   private String timeUnit = "";
   private Container parent = null;
   private boolean detached = false;

   /**
    * Creates new form AnimationPanel
    */
   public AnimationPanel()
   {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      modeGroup = new javax.swing.ButtonGroup();
      buttonGroup1 = new javax.swing.ButtonGroup();
      detachedFrame = new javax.swing.JFrame();
      playControlPanel = new javax.swing.JPanel();
      jPanel1 = new javax.swing.JPanel();
      firstFrameButton = new javax.swing.JButton();
      backButton = new javax.swing.JButton();
      bckFrameButton = new javax.swing.JButton();
      stopButton = new javax.swing.JButton();
      fwdFrameButton = new javax.swing.JButton();
      forwardButton = new javax.swing.JButton();
      lastFrameButton = new javax.swing.JButton();
      jPanel3 = new javax.swing.JPanel();
      onceToggle = new javax.swing.JToggleButton();
      cycleToggle = new javax.swing.JToggleButton();
      bounceToggle = new javax.swing.JToggleButton();
      jPanel5 = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      frameField = new javax.swing.JTextField();
      jLabel5 = new javax.swing.JLabel();
      timeField = new javax.swing.JTextField();
      frameSlider = new javax.swing.JSlider();
      speedSlider = new javax.swing.JSlider();
      speedResetButton = new javax.swing.JButton();
      timeRangeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider();
      jPanel4 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      framesField = new javax.swing.JTextField();
      detachButton = new javax.swing.JToggleButton();

      detachedFrame.setMinimumSize(new java.awt.Dimension(500, 85));
      detachedFrame.setUndecorated(true);

      setInheritsPopupMenu(true);
      setMinimumSize(new java.awt.Dimension(200, 258));
      setOpaque(false);
      setPreferredSize(new java.awt.Dimension(224, 258));
      setLayout(new java.awt.GridBagLayout());

      playControlPanel.setLayout(new java.awt.GridBagLayout());

      jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
      jPanel1.setMaximumSize(new java.awt.Dimension(26, 26));
      jPanel1.setMinimumSize(new java.awt.Dimension(186, 26));
      jPanel1.setPreferredSize(new java.awt.Dimension(242, 26));
      jPanel1.setLayout(new java.awt.GridBagLayout());

      firstFrameButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      firstFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/tofirst.png"))); // NOI18N
      firstFrameButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      firstFrameButton.setMaximumSize(new java.awt.Dimension(26, 24));
      firstFrameButton.setMinimumSize(new java.awt.Dimension(24, 24));
      firstFrameButton.setPreferredSize(new java.awt.Dimension(26, 24));
      firstFrameButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            firstFrameButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(firstFrameButton, gridBagConstraints);

      backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/bck.png"))); // NOI18N
      backButton.setMaximumSize(new java.awt.Dimension(58, 24));
      backButton.setMinimumSize(new java.awt.Dimension(26, 24));
      backButton.setPreferredSize(new java.awt.Dimension(26, 34));
      backButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            backButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(backButton, gridBagConstraints);

      bckFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/fbck.png"))); // NOI18N
      bckFrameButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      bckFrameButton.setMaximumSize(new java.awt.Dimension(26, 24));
      bckFrameButton.setMinimumSize(new java.awt.Dimension(24, 24));
      bckFrameButton.setPreferredSize(new java.awt.Dimension(26, 24));
      bckFrameButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            bckFrameButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(bckFrameButton, gridBagConstraints);

      stopButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/stopact.png"))); // NOI18N
      stopButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/stop.png"))); // NOI18N
      stopButton.setEnabled(false);
      stopButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
      stopButton.setMaximumSize(new java.awt.Dimension(56, 24));
      stopButton.setMinimumSize(new java.awt.Dimension(24, 24));
      stopButton.setPreferredSize(new java.awt.Dimension(26, 24));
      stopButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            stopButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(stopButton, gridBagConstraints);

      fwdFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/ffwd.png"))); // NOI18N
      fwdFrameButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      fwdFrameButton.setMaximumSize(new java.awt.Dimension(26, 24));
      fwdFrameButton.setMinimumSize(new java.awt.Dimension(24, 24));
      fwdFrameButton.setPreferredSize(new java.awt.Dimension(26, 24));
      fwdFrameButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            fwdFrameButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(fwdFrameButton, gridBagConstraints);

      forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/fwd.png"))); // NOI18N
      forwardButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
      forwardButton.setMaximumSize(new java.awt.Dimension(26, 24));
      forwardButton.setMinimumSize(new java.awt.Dimension(24, 24));
      forwardButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            forwardButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(forwardButton, gridBagConstraints);

      lastFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/icm/visnow/gui/icons/tolast.png"))); // NOI18N
      lastFrameButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
      lastFrameButton.setMaximumSize(new java.awt.Dimension(26, 24));
      lastFrameButton.setMinimumSize(new java.awt.Dimension(24, 24));
      lastFrameButton.setPreferredSize(new java.awt.Dimension(26, 24));
      lastFrameButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            lastFrameButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel1.add(lastFrameButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      playControlPanel.add(jPanel1, gridBagConstraints);

      jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel3.setMinimumSize(new java.awt.Dimension(175, 22));
      jPanel3.setOpaque(false);
      jPanel3.setPreferredSize(new java.awt.Dimension(175, 22));
      jPanel3.setLayout(new java.awt.GridLayout(1, 0));

      modeGroup.add(onceToggle);
      onceToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      onceToggle.setSelected(true);
      onceToggle.setText("once");
      onceToggle.setMargin(new java.awt.Insets(2, 2, 2, 2));
      onceToggle.setMaximumSize(new java.awt.Dimension(41, 21));
      onceToggle.setMinimumSize(new java.awt.Dimension(41, 21));
      onceToggle.setPreferredSize(new java.awt.Dimension(41, 21));
      jPanel3.add(onceToggle);

      modeGroup.add(cycleToggle);
      cycleToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      cycleToggle.setText("cycle");
      cycleToggle.setMargin(new java.awt.Insets(2, 2, 2, 2));
      cycleToggle.setMaximumSize(new java.awt.Dimension(41, 21));
      cycleToggle.setMinimumSize(new java.awt.Dimension(41, 21));
      cycleToggle.setPreferredSize(new java.awt.Dimension(41, 21));
      jPanel3.add(cycleToggle);

      modeGroup.add(bounceToggle);
      bounceToggle.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      bounceToggle.setText("bounce");
      bounceToggle.setMargin(new java.awt.Insets(2, 2, 2, 2));
      bounceToggle.setMaximumSize(new java.awt.Dimension(57, 21));
      bounceToggle.setMinimumSize(new java.awt.Dimension(57, 21));
      bounceToggle.setPreferredSize(new java.awt.Dimension(57, 21));
      jPanel3.add(bounceToggle);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 1.0;
      playControlPanel.add(jPanel3, gridBagConstraints);

      jPanel5.setMinimumSize(new java.awt.Dimension(70, 38));
      jPanel5.setPreferredSize(new java.awt.Dimension(90, 38));
      jPanel5.setLayout(new java.awt.GridBagLayout());

      jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel3.setText("frame");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
      jPanel5.add(jLabel3, gridBagConstraints);

      frameField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      frameField.setText("0");
      frameField.setMinimumSize(new java.awt.Dimension(35, 14));
      frameField.setPreferredSize(new java.awt.Dimension(35, 14));
      frameField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            frameFieldActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      jPanel5.add(frameField, gridBagConstraints);

      jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel5.setText("time");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
      jPanel5.add(jLabel5, gridBagConstraints);

      timeField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
      timeField.setText("0");
      timeField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            timeFieldActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      jPanel5.add(timeField, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      playControlPanel.add(jPanel5, gridBagConstraints);

      frameSlider.setMinorTickSpacing(10);
      frameSlider.setPaintTicks(true);
      frameSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("current frame"));
      frameSlider.addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mouseReleased(java.awt.event.MouseEvent evt)
         {
            frameSliderMouseReleased(evt);
         }
      });
      frameSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            frameSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      playControlPanel.add(frameSlider, gridBagConstraints);

      speedSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
      speedSlider.setMajorTickSpacing(50);
      speedSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("play speed"));
      speedSlider.setMaximumSize(new java.awt.Dimension(32767, 40));
      speedSlider.setMinimumSize(new java.awt.Dimension(90, 40));
      speedSlider.setPreferredSize(new java.awt.Dimension(90, 40));
      speedSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            speedSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      playControlPanel.add(speedSlider, gridBagConstraints);

      speedResetButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      speedResetButton.setText("*");
      speedResetButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      speedResetButton.setMaximumSize(new java.awt.Dimension(12, 14));
      speedResetButton.setMinimumSize(new java.awt.Dimension(12, 14));
      speedResetButton.setName(""); // NOI18N
      speedResetButton.setPreferredSize(new java.awt.Dimension(12, 14));
      speedResetButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            speedResetButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
      gridBagConstraints.insets = new java.awt.Insets(7, 0, 2, 0);
      playControlPanel.add(speedResetButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      add(playControlPanel, gridBagConstraints);

      timeRangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "time range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
      timeRangeSlider.setMinimumSize(new java.awt.Dimension(96, 64));
      timeRangeSlider.setPreferredSize(new java.awt.Dimension(216, 64));
      timeRangeSlider.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            timeRangeSliderStateChanged(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.weightx = 0.4;
      add(timeRangeSlider, gridBagConstraints);

      jPanel4.setLayout(new java.awt.GridLayout(1, 0));

      jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      jLabel2.setText("frames");
      jPanel4.add(jLabel2);

      framesField.setText("100");
      framesField.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            framesFieldActionPerformed(evt);
         }
      });
      jPanel4.add(framesField);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
      add(jPanel4, gridBagConstraints);

      detachButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
      detachButton.setText("detach");
      detachButton.setMargin(new java.awt.Insets(3, 2, 3, 2));
      detachButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            detachButtonActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      add(detachButton, gridBagConstraints);
   }// </editor-fold>//GEN-END:initComponents

   private void bckFrameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bckFrameButtonActionPerformed
   {//GEN-HEADEREND:event_bckFrameButtonActionPerformed
      if (mode != STOP)
         return;
      int frame = currentFrame - step;
      if (frame < firstFrame)
         return;
      setFrame(frame);
   }//GEN-LAST:event_bckFrameButtonActionPerformed

   private void fwdFrameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fwdFrameButtonActionPerformed
   {//GEN-HEADEREND:event_fwdFrameButtonActionPerformed
      if (mode != STOP)
         return;
      int frame = currentFrame + step;
      if (frame > lastFrame)
         return;
      setFrame(frame);
   }//GEN-LAST:event_fwdFrameButtonActionPerformed

   private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
   {//GEN-HEADEREND:event_stopButtonActionPerformed
      stopAnimation();
   }//GEN-LAST:event_stopButtonActionPerformed

   private void speedResetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_speedResetButtonActionPerformed
   {//GEN-HEADEREND:event_speedResetButtonActionPerformed
      speedSlider.setValue(50);
   }//GEN-LAST:event_speedResetButtonActionPerformed

   private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_speedSliderStateChanged
   {//GEN-HEADEREND:event_speedSliderStateChanged
      int s = speedSlider.getValue();
      step = Math.max(1, (s - 50) + 1);
      delay = Math.max(0,  10 * (50 - s));
   }//GEN-LAST:event_speedSliderStateChanged

   private void lastFrameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastFrameButtonActionPerformed
   {//GEN-HEADEREND:event_lastFrameButtonActionPerformed
      forwardButton.setSelected(false);
      backButton.setSelected(false);
      setFrame(lastFrame);
   }//GEN-LAST:event_lastFrameButtonActionPerformed

   private void firstFrameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstFrameButtonActionPerformed
   {//GEN-HEADEREND:event_firstFrameButtonActionPerformed
      forwardButton.setSelected(false);
      backButton.setSelected(false);
      setFrame(firstFrame);
   }//GEN-LAST:event_firstFrameButtonActionPerformed

   private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_forwardButtonActionPerformed
   {//GEN-HEADEREND:event_forwardButtonActionPerformed
      if (mode == STOP)
         startAnimation(FORWARD);
   }//GEN-LAST:event_forwardButtonActionPerformed

   private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
   {//GEN-HEADEREND:event_backButtonActionPerformed
      if (mode == STOP)
         startAnimation(BACK);
   }//GEN-LAST:event_backButtonActionPerformed

   //<editor-fold defaultstate="collapsed" desc=" attach/detach ">

   private void detachButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_detachButtonActionPerformed
   {//GEN-HEADEREND:event_detachButtonActionPerformed
      java.awt.GridBagConstraints gridBagConstraints;
      if (!detached)
      {
         parent = this.getParent();
         if (parent == null)
            return;
         detachedFrame.setBounds(10, 500, 600, 84);
         remove(frameSlider);
         playControlPanel.remove(jPanel1);
         playControlPanel.remove(jPanel3);
         playControlPanel.remove(jPanel5);
         detachedFrame.setLayout(new java.awt.GridBagLayout());

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.gridwidth = 4;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
         gridBagConstraints.weightx = 1.0;
         detachedFrame.add(frameSlider, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.gridwidth = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
         gridBagConstraints.weightx = 1.0;
         detachedFrame.add(jPanel1, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 3;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.gridheight = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 2;
         gridBagConstraints.gridwidth = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
         detachedFrame.add(jPanel3, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.gridheight = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
         detachedFrame.add(jPanel5, gridBagConstraints);
         detachedFrame.setVisible(true);
         revalidate();
      } else
      {
         if (parent == null)
            return;
         detachedFrame.setVisible(false);
         detachedFrame.remove(frameSlider);
         detachedFrame.remove(jPanel1);
         detachedFrame.remove(jPanel3);
         detachedFrame.remove(jPanel5);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.gridwidth = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         playControlPanel.add(frameSlider, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridwidth = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.weightx = 1.0;
         playControlPanel.add(jPanel1, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         gridBagConstraints.weightx = 0.3;

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 3;
         gridBagConstraints.gridwidth = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.weightx = 1.0;
         playControlPanel.add(jPanel3, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 2;
         gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
         gridBagConstraints.weightx = 1.0;
         playControlPanel.add(jPanel5, gridBagConstraints);
         revalidate();
      }
      detached = !detached;
   }//GEN-LAST:event_detachButtonActionPerformed

//</editor-fold>

   private void framesFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_framesFieldActionPerformed
   {//GEN-HEADEREND:event_framesFieldActionPerformed
      try
      {
         int k = Integer.parseInt(framesField.getText());
         if (k > 0)
         {
            frameSlider.setMaximum(k - 1);
            lastFrame = k - 1;
            dt = (tup - tlow) / (lastFrame);
         }
      } catch (Exception e)
      {
      }
   }//GEN-LAST:event_framesFieldActionPerformed

   private void timeRangeSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_timeRangeSliderStateChanged
   {//GEN-HEADEREND:event_timeRangeSliderStateChanged
      if (timeRangeSlider.isAdjusting())
         return;
      tlow = timeRangeSlider.getLow();
      tup = timeRangeSlider.getUp();
      dt = (tup - tlow) / (lastFrame);
      frameSlider.setValue(0);
   }//GEN-LAST:event_timeRangeSliderStateChanged

   private void frameSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_frameSliderStateChanged
   {//GEN-HEADEREND:event_frameSliderStateChanged
      if (updatingFrame)
         return;
      setFrame(frameSlider.getValue());
   }//GEN-LAST:event_frameSliderStateChanged

    private void frameSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameSliderMouseReleased
       fireFrameEvent(currentFrame);
    }//GEN-LAST:event_frameSliderMouseReleased

   private void frameFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_frameFieldActionPerformed
   {//GEN-HEADEREND:event_frameFieldActionPerformed
      try
      {
         frameSlider.setValue(Integer.parseInt(frameField.getText()));
      } catch (Exception e)
      {
      }
   }//GEN-LAST:event_frameFieldActionPerformed

   private void timeFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_timeFieldActionPerformed
   {//GEN-HEADEREND:event_timeFieldActionPerformed
      try
      {
         float t = Float.parseFloat(timeField.getText());
         frameSlider.setValue((int) ((t - tmin) / dt));
      } catch (Exception e)
      {
      }
   }//GEN-LAST:event_timeFieldActionPerformed

   private void startAnimation(int m)
   {
      if (m == FORWARD)
      {
         forwardButton.setIcon(selFwdIcon);
         backButton.setEnabled(false);
      } else
      {
         backButton.setIcon(selBckIcon);
         forwardButton.setEnabled(false);
      }
      stopButton.setEnabled(true);
      firstFrameButton.setEnabled(false);
      fwdFrameButton.setEnabled(false);
      bckFrameButton.setEnabled(false);
      lastFrameButton.setEnabled(false);
      mode = m;
      new Thread(new Animation()).start();
   }

   public int getCurrentFrame()
   {
      return currentFrame;
   }

   public float getCurrentVal()
   {
      return currentTime;
   }

   private void updateTimeCoeff()
   {
      dt = (tup - tlow) / (lastFrame);
   }

   public void setTimeRange(float tmin, float tmax)
   {
      this.tmin = this.tlow = tmin;
      this.tmax = this.tup = tmax;
      timeRangeSlider.setParams(tmin, tmax, tmin, tmax);
      dt = (tup - tlow) / (lastFrame);
   }

   public void setTime(float t)
   {
      setFrame((int)((t - tmin) / dt + .5f));
   }

   public void setFrame(int n)
   {
      if (n == currentFrame)
         return;
      currentFrame = n;
      updatingFrame = true;
      if (frameSlider.getValue() != n)
      {
         frameSlider.setValue(n);
      }
      currentTime = tlow + n * dt;
      frameField.setText("" + currentFrame);
      timeField.setText(String.format("%7.2f ", currentTime) + timeUnit);
      updatingFrame = false;
      fireFrameEvent(currentFrame);
   }

   public void stopAnimation()
   {
      mode = STOP;
      stopButton.setEnabled(false);
      forwardButton.setIcon(fwdIcon);
      forwardButton.setEnabled(true);
      backButton.setIcon(bckIcon);
      backButton.setEnabled(true);
      firstFrameButton.setEnabled(true);
      fwdFrameButton.setEnabled(true);
      bckFrameButton.setEnabled(true);
      lastFrameButton.setEnabled(true);
   }

   public void setTimeUnit(String timeUnit)
   {
      this.timeUnit = timeUnit;
      ((TitledBorder) timeRangeSlider.getBorder()).setTitle("time range (" + timeUnit + ")");
   }

   public void setRenderDone(boolean val)
   {
      renderDone = val;
   }

   private class Animation implements Runnable
   {

      public Animation()
      {
      }

      @Override
      public synchronized void run()
      {
         if (mode == STOP)
         {
            return;
         }
         int frame;
         int dir = mode;
         int startFrame = frameSlider.getValue();
         frame = startFrame;
         while (mode != STOP)
         {
            renderDone = false;
            frame += dir * step;
            if (dir == 1 && frame > frameSlider.getMaximum())
            {
               if (cycleToggle.isSelected())
                  frame = 0;
               else if (bounceToggle.isSelected())
               {
                  dir = -dir;
                  frame = frameSlider.getMaximum() - 1;
               } else
               {
                  stopAnimation();
                  break;
               }
            } else if (dir == -1 && frame <= 0)
            {
               if (cycleToggle.isSelected())
                  frame = frameSlider.getMaximum() - 1;
               else if (bounceToggle.isSelected())
               {
                  dir = -dir;
                  frame = 0;
               } else
               {
                  stopAnimation();
                  break;
               }
            }
            setFrame(frame);
            try
            {
               while (!renderDone)
                  wait(10);
               wait(delay);
            } catch (InterruptedException c)
            {
               stopAnimation();
            }
         }
         stopAnimation();
      }
   }

   public void addListener(FrameModificationListener l)
   {
      listeners.add(l);
   }

   public void removeListener(FrameModificationListener l)
   {
      listeners.remove(l);
   }

   protected void fireFrameEvent(int frame)
   {
      FrameModificationEvent e = new FrameModificationEvent(this, currentFrame, currentTime);
      Iterator it = listeners.iterator();
      while (it.hasNext())
      {
         ((FrameModificationListener) it.next()).frameChanged(e);
      }
   }

   public int getFirstFrame()
   {
      return firstFrame;
   }

   public int getLastFrame()
   {
      return lastFrame;
   }

   public void setNFrames(int nFrames)
   {
      this.lastFrame = nFrames - 1;
      frameSlider.setMaximum(lastFrame);
      framesField.setText("" + nFrames);
   }

   private FrameRenderedListener frameRenderedListener = new FrameRenderedListener()
   {
      public void frameRendered(FrameRenderedEvent evt)
      {
         renderDone = true;
      }
   };

   public FrameRenderedListener getFrameRenderedListener()
   {
      return frameRenderedListener;
   }

   public boolean isAdjusting()
   {
      return frameSlider.getValueIsAdjusting() || mode != STOP;
   }

   public void setFrameSliderEnabled(boolean enabled)
   {
      this.frameSlider.setEnabled(enabled);
   }

   public void setLabels(String rangeLabel, String currentLabel)
   {
      ((TitledBorder)timeRangeSlider.getBorder()).setTitle(rangeLabel);
      jLabel5.setText(currentLabel);
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton backButton;
   private javax.swing.JButton bckFrameButton;
   private javax.swing.JToggleButton bounceToggle;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JToggleButton cycleToggle;
   private javax.swing.JToggleButton detachButton;
   private javax.swing.JFrame detachedFrame;
   private javax.swing.JButton firstFrameButton;
   private javax.swing.JButton forwardButton;
   private javax.swing.JTextField frameField;
   private javax.swing.JSlider frameSlider;
   private javax.swing.JTextField framesField;
   private javax.swing.JButton fwdFrameButton;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JPanel jPanel4;
   private javax.swing.JPanel jPanel5;
   private javax.swing.JButton lastFrameButton;
   private javax.swing.ButtonGroup modeGroup;
   private javax.swing.JToggleButton onceToggle;
   private javax.swing.JPanel playControlPanel;
   private javax.swing.JButton speedResetButton;
   private javax.swing.JSlider speedSlider;
   private javax.swing.JButton stopButton;
   private javax.swing.JTextField timeField;
   private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider timeRangeSlider;
   // End of variables declaration//GEN-END:variables
}
