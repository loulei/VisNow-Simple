//<editor-fold defaultstate="collapsed" desc=" COPYRIGHT AND LICENSE ">
/* VisNow
 Copyright (C) 2006-2013 University of Warsaw, ICM

 This file is part of GNU Classpath.

 GNU Classpath is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.

 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
 University of Warsaw, Interdisciplinary Centre for Mathematical and
 Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland.

 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
 conditions of the GNU General Public License cover the whole
 combination.

 As a special exception, the copyright holders of this library give you
 permission to link this library with independent modules to produce an
 executable, regardless of the license terms of these independent
 modules, and to copy and distribute the resulting executable under
 terms of your choice, provided that you also meet, for each linked
 independent module, the terms and conditions of the license of that
 module.  An independent module is a module which is not derived from
 or based on this library.  If you modify this library, you may extend
 this exception to your version of the library, but you are not
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
//</editor-fold>

package pl.edu.icm.visnow.lib.gui;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.gui.widgets.SubRangeSlider.SubRangeModel;

/**
 *
 * @author  Krzysztof S. Nowinski, University of Warsaw, ICM
 */
public class CropUI extends javax.swing.JPanel
{
   boolean sleep = false;
   private boolean dynamic = false;
   private boolean lockInitialRange = true;
   private int[] initialXRange = null;
   private int[] initialYRange = null;
   private int[] initialZRange = null;
   
   /** Creates new form CropUI */
   public CropUI()
   {
      initComponents();
   }
   
   public CropUI(boolean dynamic)
   {
      initComponents();
      this.dynamic = dynamic;
      xCropSlider.setExtent(2);
      xCropSlider.setPolicy(SubRangeModel.PUSH);
      yCropSlider.setExtent(2);
      yCropSlider.setPolicy(SubRangeModel.PUSH);
      zCropSlider.setExtent(2);
      zCropSlider.setPolicy(SubRangeModel.PUSH);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        xCropSlider = new pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider();
        yCropSlider = new pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider();
        zCropSlider = new pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "data volume crop", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        setRequestFocusEnabled(false);
        setLayout(new java.awt.GridBagLayout());

        xCropSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "x", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        xCropSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        xCropSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xCropSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(xCropSlider, gridBagConstraints);

        yCropSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "y", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        yCropSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        yCropSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yCropSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(yCropSlider, gridBagConstraints);

        zCropSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "z", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        zCropSlider.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        zCropSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zCropSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(zCropSlider, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

   private void xCropSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_xCropSliderStateChanged
   {//GEN-HEADEREND:event_xCropSliderStateChanged
      if(lockInitialRange && initialXRange != null) {
           boolean fix = false;
           if(xCropSlider.getMin() < initialXRange[0]) {
               xCropSlider.setMin(initialXRange[0]);
               fix = true;
           }
           if(xCropSlider.getMax() > initialXRange[1]) {
               xCropSlider.setMax(initialXRange[1]);
               fix = true;
           }
           if(fix) return;
      }
       
      if ((!dynamic && xCropSlider.isAdjusting()) || sleep)
         return;
      fireStateChanged();
   }//GEN-LAST:event_xCropSliderStateChanged

   private void yCropSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_yCropSliderStateChanged
   {//GEN-HEADEREND:event_yCropSliderStateChanged
      if(lockInitialRange && initialYRange != null) {
           boolean fix = false;
           if(yCropSlider.getMin() < initialYRange[0]) {
               yCropSlider.setMin(initialYRange[0]);
               fix = true;
           }
           if(yCropSlider.getMax() > initialYRange[1]) {
               yCropSlider.setMax(initialYRange[1]);
               fix = true;
           }
           if(fix) return;
      }
      if ((!dynamic && yCropSlider.isAdjusting()) || sleep)
         return;
      fireStateChanged();
   }//GEN-LAST:event_yCropSliderStateChanged

   private void zCropSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_zCropSliderStateChanged
   {//GEN-HEADEREND:event_zCropSliderStateChanged
       if(lockInitialRange && initialZRange != null) {
           boolean fix = false;
           if(zCropSlider.getMin() < initialZRange[0]) {
               zCropSlider.setMin(initialZRange[0]);
               fix = true;
           }
           if(zCropSlider.getMax() > initialZRange[1]) {
               zCropSlider.setMax(initialZRange[1]);
               fix = true;
           }
           if(fix) return;
       }
       
      if ((!dynamic && zCropSlider.isAdjusting()) || sleep)
         return;
      fireStateChanged();
   }//GEN-LAST:event_zCropSliderStateChanged
                                                      

    /**
     * Setter for property parent.
     * @param parent New value of property parent.
     */
    public void setNewExtents(int[] dims)
    {
       sleep = true;
       initialXRange = new int[]{0,dims[0]-1};
       initialYRange = null;
       initialZRange = null;
       xCropSlider.setMin(0);
       xCropSlider.setMax(dims[0]-1);
       xCropSlider.setLow(0);
       xCropSlider.setUp(dims[0]-1);
       if (dims.length>1)
       {
          initialYRange = new int[]{0,dims[1]-1}; 
          yCropSlider.setMin(0);
          yCropSlider.setMax(dims[1]-1);
          yCropSlider.setLow(0);
          yCropSlider.setUp(dims[1]-1);
          yCropSlider.setEnabled(true);
       }
       else 
          yCropSlider.setEnabled(false);
       if (dims.length>2)
       {
          initialZRange = new int[]{0,dims[2]-1}; 
          zCropSlider.setMin(0);
          zCropSlider.setMax(dims[2]-1);
          zCropSlider.setLow(0);
          zCropSlider.setUp(dims[2]-1);
          zCropSlider.setEnabled(true);
       }
       else 
          zCropSlider.setEnabled(false);
       sleep = false;
    }
    
    public int[] getLow()
    {
       int[] low = new int[3];
       low[0] = xCropSlider.getLow();
       low[1] = yCropSlider.getLow();
       low[2] = zCropSlider.getLow();
       return low;
    }
    
    public int[] getUp()
    {
       int[] up = new int[3];
       up[0] = xCropSlider.getUp()+1;
       up[1] = yCropSlider.getUp()+1;
       up[2] = zCropSlider.getUp()+1;
       return up;
    }


   public void setDynamic(boolean dynamic)
   {
      this.dynamic = dynamic;
   }
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider xCropSlider;
    private pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider yCropSlider;
    private pl.edu.icm.visnow.gui.widgets.SubRangeSlider.ExtendedSubRangeSlider zCropSlider;
    // End of variables declaration//GEN-END:variables

   /**
    * Utility field holding list of ChangeListeners.
    */
   private transient ArrayList<ChangeListener> changeListenerList = 
           new ArrayList<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener)
   {
      changeListenerList.add (listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener)
   {
      changeListenerList.remove (listener);
   }

   /**
    * Notifies all registered listeners about the event.
    * 
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void fireStateChanged()
   {
      ChangeEvent e = new ChangeEvent (this);
      for (ChangeListener listener: changeListenerList)
         listener.stateChanged(e);
   }

    @Override
   public void setEnabled(boolean enabled) {
        xCropSlider.setEnabled(enabled);
        yCropSlider.setEnabled(enabled);
        zCropSlider.setEnabled(enabled);
   }

    /**
     * @return the lockInitialRange
     */
    public boolean isLockInitialRange() {
        return lockInitialRange;
    }

    /**
     * @param lockInitialRange the lockInitialRange to set
     */
    public void setLockInitialRange(boolean lockInitialRange) {
        this.lockInitialRange = lockInitialRange;
    }
    public static void main(String[] args) {
        JFrame f = new JFrame();
        final CropUI p = new CropUI();
        f.add(p);
        f.pack();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        
        f.setVisible(true);
    }

}
