/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.gui;

import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import pl.edu.icm.visnow.datasets.dataarrays.DataArray;

/**
 *
 * @author babor
 */
public class LowUpMappingUI extends javax.swing.JPanel {
    public static final int TYPE_INTEGER = 0;
    public static final int TYPE_FLOAT = 1;
    private int type = TYPE_FLOAT;

    private boolean silent = false;
    private boolean empty = true;

    private boolean updateOnAdjusting = false;


    /** Creates new form LowUpMappingUI */
    public LowUpMappingUI() {
        initComponents();
    }

    public void reset() {
        updateRanges();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mappingPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        windowCenterLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        windowWidthLabel = new javax.swing.JLabel();
        rangeSlider = new pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider();

        setMinimumSize(new java.awt.Dimension(180, 118));
        setPreferredSize(new java.awt.Dimension(200, 200));
        setLayout(new java.awt.BorderLayout());

        mappingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "mapping range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        mappingPanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("Window center:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        mappingPanel.add(jLabel2, gridBagConstraints);

        windowCenterLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        mappingPanel.add(windowCenterLabel, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setText("Window width:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mappingPanel.add(jLabel4, gridBagConstraints);

        windowWidthLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        mappingPanel.add(windowWidthLabel, gridBagConstraints);

        rangeSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        rangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        mappingPanel.add(rangeSlider, gridBagConstraints);

        add(mappingPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void rangeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeSliderStateChanged
        updateWindowRanges();
        if((rangeSlider.isAdjusting() && updateOnAdjusting) || !rangeSlider.isAdjusting())
            fireStateChanged();
    }//GEN-LAST:event_rangeSliderStateChanged


    public void updateRanges() {
        if(data != null) {
            min = data.getMinv();
            max = data.getMaxv();
            physMin = data.getPhysMin();
            physMax = data.getPhysMax();
        }
        if (physMin == physMax) {
            d = 1;
        } else {
            d = (max - min) / (physMax - physMin);
        }        
        rangeSlider.setParams(physMin, physMax, physMin, physMax);
        updateWindowRanges();
    }

    public void updateWindowRanges() {
        if(empty) {
            windowCenterLabel.setText("");
            windowWidthLabel.setText("");
        } else {
            DecimalFormat df = new DecimalFormat("#");
            if(type == TYPE_INTEGER) {
                df = new DecimalFormat("#");
            } else {
                df = new DecimalFormat("#.##");
            }
            windowCenterLabel.setText(df.format((rangeSlider.getUp()+rangeSlider.getLow())/2.0f));
            windowWidthLabel.setText(df.format(rangeSlider.getUp()-rangeSlider.getLow()));
        }
    }
    
   private Vector<ChangeListener> changeListeners = new Vector<ChangeListener>();

   /**
    * Registers ChangeListener to receive events.
    * @param listener The listener to register.
    */
   public synchronized void addChangeListener(ChangeListener listener) {
      changeListeners.add(listener);
   }

   /**
    * Removes ChangeListener from the list of listeners.
    * @param listener The listener to remove.
    */
   public synchronized void removeChangeListener(ChangeListener listener) {
      changeListeners.remove(listener);
   }

   /**
    * Notifies all registered listeners about the event.
    *
    * @param object Parameter #1 of the <CODE>ChangeEvent<CODE> constructor.
    */
   private void fireStateChanged() {
       if(silent)
           return;
       
      ChangeEvent e = new ChangeEvent(this);
      for (ChangeListener listener : changeListeners) {
         listener.stateChanged(e);
      }
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel mappingPanel;
    private pl.edu.icm.visnow.gui.widgets.FloatSubRangeSlider.ExtendedFloatSubRangeSlider rangeSlider;
    private javax.swing.JLabel windowCenterLabel;
    private javax.swing.JLabel windowWidthLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the low
     */
    public float getLow() {
        return (min + d * (rangeSlider.getLow() - physMin));
    }

    /**
     * @return the up
     */
    public float getUp() {
        return (min + d * (rangeSlider.getUp() - physMin));
    }


    private DataArray data = null;
    private float min = 0;
    private float max = 1;
    private float physMin = 0;
    private float physMax = 1;
    float d;

    public void setData(DataArray data) {
        if(data == null) {
            this.data = null;
            this.empty = true;
            updateRanges();
            return;
        }
        
        if(this.data == null || this.data != data) {
            this.data = data;
            this.silent = true;
            this.empty = false;
            updateRanges();
            this.silent = false;            
        }
    }

    /**
     * @return the empty
     */
    public boolean isEmpty() {
        return empty;
    }

    /**
     * @param empty the empty to set
     */
    public void setEmpty(boolean empty) {
        this.silent = true;
        this.empty = empty;
        updateRanges();
        this.silent = false;
    }

    public void setLowUp(float low, float up) {
        this.silent = true;
        rangeSlider.setLow(physMin + (low - min)/d);
        rangeSlider.setUp(physMin + (up - min)/d);
        updateWindowRanges();
        this.silent = false;
    }

    @Override
    public void setEnabled(boolean enabled) {
        this.rangeSlider.setEnabled(enabled);
    }

    /**
     * @return the updateOnAdjusting
     */
    public boolean isUpdateOnAdjusting() {
        return updateOnAdjusting;
    }

    /**
     * @param updateOnAdjusting the updateOnAdjusting to set
     */
    public void setUpdateOnAdjusting(boolean updateOnAdjusting) {
        this.updateOnAdjusting = updateOnAdjusting;
    }

    public void setTitle(String title) {        
        Border b = mappingPanel.getBorder();
        if(b instanceof TitledBorder) {
            ((TitledBorder)b).setTitle(title);            
        } else {
            mappingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "mapping range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        }
    }
    
    public String getTitle() {
        Border b = mappingPanel.getBorder();
        if(b instanceof TitledBorder) {
            return ((TitledBorder)b).getTitle(); 
        } else {
            return "";
        }
    }
}
