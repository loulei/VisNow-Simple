/* VisNow
   Copyright (C) 2006-2013 University of Warsaw, ICM

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the 
University of Warsaw, Interdisciplinary Centre for Mathematical and 
Computational Modelling, Pawinskiego 5a, 02-106 Warsaw, Poland. 

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package pl.edu.icm.visnow.lib.utils;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.Vector;
import pl.edu.icm.visnow.datasets.Hashable;

/**
 * @author  Bruno Martins, XLDB group of the 
 * Department of Informatics of the Faculty of Sciences 
 * of the University of Lisbon in Portugal.
 */
/**
 * Distributed under BSD license.
 * We compute the checksum using Broder s implementation of
 * Rabin s fingerprinting algorithm. Fingerprints offer 
 * provably strong probabilistic guarantees that two 
 * different strings will not have the same fingerprint. 
 * Other checksum algorithms, such as MD5 and SHA, do not 
 * offer such provable guarantees, and are also more 
 * expensive to compute than Rabin fingerprint.
 *
 * A disadvantage is that these faster functions are 
 * efficiently invertible (that is, one can easily build an 
 * URL that hashes to a particular location), a fact that  
 * might be used by malicious users to nefarious purposes.
 *
 * Using the Rabin's fingerprinting function, the probability of
 * collision of two strings s1 and s2 can be bounded (in a adversarial
 * model for s1 and s2) by max(|s1|,|s2|)/2**(l-1), where |s1| is the 
 * length of the string s1 in bits.
 * 
 * The advantage of choosing Rabin fingerprints (which are based on random
 * irreducible polynomials) rather than some arbitrary hash function is that
 * their probability of collision os well understood. Furthermore Rabin 
 * fingerprints can be computed very efficiently in software and we can
 * take advantage of their algebraic properties when we compute the
 * fingerprints of "sliding windows".
 *
 * M. O. Rabin
 * Fingerprinting by random polynomials.
 * Center for Research in Computing Technology
 * Harvard University Report TR-15-81
 * 1981
 * 
 * A. Z. Broder
 * Some applications of Rabin's fingerprinting method
 * In R.Capicelli, A. De Santis and U. Vaccaro editors
 * Sequences II:Methods in Communications, Security, and Computer Science
 * pages 143-152
 * Springer-Verlag
 * 1993
 *
 */
public final class RabinHashFunction implements Serializable
{

   private final static int P_DEGREE = 64;
   private final static int READ_BUFFER_SIZE = 2048;
   private final static int X_P_DEGREE = 1 << (P_DEGREE - 1);

   public static void main(String args[])
   {
      RabinHashFunction h = new RabinHashFunction();
      h.printout();
   }
   private static long POLY = Long.decode("0x0060034000F0D50A").longValue();
   private static final long[] table32 =
   {
      0L, 27025171192796426L, 45042318483488542L, 54050342385592852L, 81074414066740022L, 90084636966977084L, 108100684771185704L, 135123656915517730L,
      153143003263042406L, 162148828133480044L, 180169273933954168L, 207187848048486770L, 216201369542371408L, 243222142671813978L, 261243687992285006L, 270247313831035460L,
      297280181655688134L, 306286006526084812L, 324297656266960088L, 351316230381533650L, 360338547867908336L, 387359320997309946L, 405372070258182126L, 414375696096973540L,
      432402739084742816L, 459427910277498282L, 477436261441482686L, 486444285343627956L, 513477153084373910L, 522487375984570012L, 540494627662070920L, 567517599806443906L,
      585554538438816390L, 594560363311376268L, 612572013052169624L, 639590587164711058L, 648595312533920176L, 675616085661289658L, 693628834922112686L, 702632460763067300L,
      720677095735816672L, 747702266926408938L, 765710618090442494L, 774718641994619892L, 801733917614136022L, 810744140516364252L, 828751392193947080L, 855774364336156866L,
      864805478169485632L, 891830649360118858L, 909847796650860126L, 918855820554996564L, 945862299980696182L, 954872522882965372L, 972888570687255912L, 999911542829424738L,
      1017948481296146982L, 1026954306168747820L, 1044974751969140024L, 1071993326081640498L, 1080989255324141840L, 1108010028451552282L, 1126031573771974158L, 1135035199612887812L,
      1162103252011331590L, 1171109076877632780L, 1189120726622752536L, 1216139300733164050L, 1225144026104339248L, 1252164799229644346L, 1270177548494791726L, 1279181174329422116L,
      1297190625067840352L, 1324215796256368234L, 1342224147424726142L, 1351232171322579316L, 1378247446948255830L, 1387257669844225372L, 1405264921526134600L, 1432287893666214466L,
      1441354191471633344L, 1468379362660136650L, 1486396509954940126L, 1495404533852817876L, 1522411013284940022L, 1531421236180884988L, 1549437283989239784L, 1576460256129344226L,
      1594462010361995430L, 1603467835228272044L, 1621488281032728504L, 1648506855143164594L, 1657502784387894160L, 1684523557513174682L, 1702545102837658766L, 1711548728672313732L,
      1729610956338971264L, 1756636127525443466L, 1774653274820197790L, 1783661298720237716L, 1810685370403613110L, 1819695593301720252L, 1837711641109993128L, 1864734613248066466L,
      1882718775093084646L, 1891724599961392364L, 1909745045765930744L, 1936763619874204658L, 1945777141374511824L, 1972797914497630170L, 1990819459822163406L, 1999823085658849476L,
      2026891137723961670L, 2035896962592293964L, 2053908612337495640L, 2080927186445744978L, 2089949503938280048L, 2116970277061422970L, 2134983026326619502L, 2143986652163280996L,
      2161978510648283680L, 2189003681834780458L, 2207012033003089214L, 2216020056903104564L, 2243052924645816598L, 2252063147543948316L, 2270070399225775624L, 2297093371363824386L,
      2315200679143847174L, 2324206504022663180L, 2342218153755265560L, 2369236727878197010L, 2378241453245505072L, 2405262226366548794L, 2423274975635956014L, 2432278601466328100L,
      2450288052208678496L, 2477313223393076074L, 2495321574565562750L, 2504329598459288692L, 2531344874080968022L, 2540355096989583452L, 2558362348658844232L, 2585385320811575106L,
      2594381250135680704L, 2621406421320053706L, 2639423568618985950L, 2648431592512736468L, 2675438071940861430L, 2684448294849452284L, 2702464342645158632L, 2729487314797914082L,
      2747489069017720230L, 2756494893896511660L, 2774515339688450744L, 2801533913811406770L, 2810529843052269200L, 2837550616173288346L, 2855572161502032270L, 2864575787332428932L,
      2882708382943266688L, 2909733554125476490L, 2927750701424490654L, 2936758725320273300L, 2963782796999257270L, 2972793019909880252L, 2990809067705635752L, 3017832039856228002L,
      3035816201688925414L, 3044822026569880044L, 3062842472361769976L, 3089861046482693874L, 3098874567978479568L, 3125895341097466586L, 3143916886426128590L, 3152920512258688452L,
      3179918195843011654L, 3188924020723990860L, 3206935670456544088L, 3233954244577443410L, 3242976562065457008L, 3269997335184468602L, 3288010084453793902L, 3297013710286329188L,
      3315005568775788320L, 3342030739958022698L, 3360039091130591294L, 3369047115026349364L, 3396079982764669974L, 3405090205675317532L, 3423097457344627464L, 3450120429495195138L,
      3459221912677942528L, 3486247083858087946L, 3504264231161428510L, 3513272255050886932L, 3540296326736031286L, 3549306549640395580L, 3567322597440475432L, 3594345569588937762L,
      3612364915932530278L, 3621370740807226220L, 3639391186603440504L, 3666409760722234482L, 3675423282219986256L, 3702444055336908890L, 3720465600669897294L, 3729469226496132932L,
      3756431725311514310L, 3765437550186169292L, 3783449199922784728L, 3810467774041619666L, 3819490091531861488L, 3846510864648743162L, 3864523613922132718L, 3873527239748409316L,
      3891554282749023648L, 3918579453929128106L, 3936587805105760958L, 3945595828995260340L, 3972628696740003478L, 3981638919644326812L, 3999646171317698952L, 4026669143466202242L,
      4044776450571237254L, 4053782275447923340L, 4071793925184587928L, 4098812499301260690L, 4107817224674991280L, 4134837997789710778L, 4152850747063182254L, 4161854372891489956L,
      4179899007876560096L, 4206924179054633450L, 4224932530231184382L, 4233940554122845940L, 4260955829746753494L, 4269966052653239004L, 4287973304326561992L, 4314996276473034178L,
      4323957021296567360L, 4350982192474681674L, 4368999339777940318L, 4378007363669560916L, 4405013843099651958L, 4414024066006178428L, 4432040113806209128L, 4459063085952640354L,
      4477100024414906150L, 4486105849291633196L, 4504126295087896632L, 4531144869204528434L, 4540140798451551248L, 4567161571566311706L, 4585183116899382030L, 4594186742727648772L,
   };
   private static final long[] table40 =
   {
      0L, 4621395533431947014L, -9212958831713998074L, -4609856422997781504L, 11820585406923526L, 4614922989836581888L, -9219712845995563008L, -4598317316866992378L,
      14635345951838982L, 4616611854751788032L, -9216898094036387840L, -4596628460537526522L, 7318381718425600L, 4627588010930728710L, -9205640458589701370L, -4603663954093128704L,
      2250468538413830L, 4622241375839505408L, -9213520364205975552L, -4611265129208256762L, 12947885636775936L, 4615203116331126534L, -9220277144446608634L, -4600286241432083456L,
      14636763436851200L, 4618017898350845702L, -9218588275232273658L, -4597471467998104576L, 8442933152260870L, 4629559736083061760L, -9207327908186257408L, -4603946777558829306L,
      31523909227393798L, 4633500418035911680L, -9202261322030540800L, -4581991688506693882L, 19703345297600512L, 4639972974518079238L, -9195507286272238842L, -4593530781750287360L,
      25895771273551872L, 4647291304680120070L, -9189314868890416378L, -4586212460182375424L, 33212756979507974L, 4636315161384180736L, -9200572482864166912L, -4579176953744165114L,
      29273526873702400L, 4632654661779259142L, -9201699703354103034L, -4580582896145050624L, 18576096892470022L, 4639692899814964224L, -9194942935996209152L, -4591561805394028794L,
      25894439939379974L, 4645885347265719296L, -9187624601543428096L, -4585369366537402618L, 32088257337036800L, 4634343488056504070L, -9198884981476508922L, -4578894078453545984L,
      54041993578066694L, 4656018501321165824L, -9179743237637728256L, -4559473605195946234L, 42221429648470016L, 4662491057803661062L, -9172989201879622906L, -4571012698439867392L,
      39406690595201024L, 4660802222936481542L, -9175803949527020794L, -4572701541901175808L, 46723676300960518L, 4649826079640214528L, -9187061563500574720L, -4565666035462637818L,
      51791542547103744L, 4655172676370464518L, -9179181687722972410L, -4558064881579207680L, 41094112565543686L, 4662210914405972992L, -9172424920364750848L, -4569043790827989242L,
      39405290583233286L, 4659396196827507712L, -9174113750941190144L, -4571858517000583418L, 45599107981217792L, 4647854337618489094L, -9185374130874598650L, -4565383228916923392L,
      58547053747404800L, 4679942586097155846L, -9154411778008863994L, -4551309370357935104L, 70367639154000646L, 4673470042501594112L, -9161165792290101248L, -4539770264226949370L,
      64175165950219014L, 4666151673668103168L, -9167358274079623168L, -4547088641646180602L, 56858201717133312L, 4677127829847240454L, -9156100638633264378L, -4554124135201979392L,
      60797453524136710L, 4680788359759809536L, -9154973379178113024L, -4552718145262459130L, 71494870622695424L, 4673750100251758342L, -9161730159418942714L, -4541739257486613504L,
      64176514674073600L, 4667557648522780422L, -9169048523953304826L, -4547931717801331712L, 57982684389286662L, 4679099486254668800L, -9157788156907091968L, -4554407027361728762L,
      81063214030893830L, 4701054671096122368L, -9134707071067219968L, -4532452385833638138L, 87257598434095104L, 4689512279381085958L, -9145967983506646266L, -4525976530744761344L,
      84442859296940032L, 4687823444463574790L, -9148782731237930234L, -4527665374256401408L, 73744896804119302L, 4694862249499057152L, -9142025396879734784L, -4538644816016443642L,
      78813381190402048L, 4700208364858081030L, -9134146002473358586L, -4531043043992873984L, 86129800029225734L, 4689232754206374912L, -9145403083802351616L, -4524008104421271802L,
      84440977996583686L, 4686418036544023552L, -9147091914429122560L, -4526822830677752058L, 72620946708402176L, 4692890026156437254L, -9140338445541098746L, -4538361391280258048L,
      103583085094207488L, 4706963670235496198L, -9127390697074971898L, -4506273340101651456L, 97388722167743238L, 4718506074837728256L, -9116129763158415360L, -4512749182303725818L,
      91196249014293254L, 4711187706088123392L, -9122322244897605632L, -4520067559639070970L, 101894232980049920L, 4704148913935249158L, -9129079557783258362L, -4509088104996027392L,
      105833003548734214L, 4707810062121389056L, -9127951680054536192L, -4507682596294826234L, 98516571827171328L, 4718785651300290310L, -9116694611608413434L, -4514717557339102208L,
      91198215962435584L, 4712593199621644038L, -9124012976058889466L, -4520910017603488768L, 103018234363552518L, 4706121188532362240L, -9130766457833846784L, -4509371478477981946L,
      117094107494809600L, 4720474691570810630L, -9113879674632099066L, -4492762318740974592L, 110899744568673030L, 4732017096173239296L, -9102618740715870208L, -4499238160943245562L,
      113714505163920134L, 4733705961172331520L, -9099803988706363392L, -4497549304529893626L, 124412489129349120L, 4726667169019260678L, -9106561301591688442L, -4486569849886653440L,
      119343957272064774L, 4721321014762654720L, -9114440726373345280L, -4494171643679054074L, 112027525550305280L, 4732296603941228294L, -9103183657927025914L, -4501206604723002368L,
      113716403434266624L, 4735111386011279110L, -9101494788628804858L, -4498391831238691840L, 125536421835580166L, 4728639374922324992L, -9108248270403958784L, -4486853292113512698L,
      130602930950320902L, 4750594386933484544L, -9085167354189932544L, -4482912670021769466L, 136797315353325568L, 4739051995218120454L, -9096428266629162234L, -4476436814932564992L,
      142989741245390848L, 4746370325329829638L, -9090235849331225850L, -4469118493414984704L, 132291778752766726L, 4753409130365639680L, -9083478514973227008L, -4480097935175354618L,
      128353029348147200L, 4749748011950538502L, -9084606354273342714L, -4481503396875054080L, 135669448187298566L, 4738772401299028992L, -9095863435602663424L, -4474468457303648506L,
      142987791183876870L, 4744964848665897984L, -9088545101200214016L, -4468276018530908410L, 131167759895367680L, 4751436838278115078L, -9081791632311862522L, -4479814579133217792L,
   };
   private static final long[] table48 =
   {
      0L, 171135001711325958L, 351280226341729030L, 468376429979238400L, 711564628284388102L, 828664680753659904L, 936752859958476800L, 1107882913326412550L,
      1432140029245764358L, 1261014099046432768L, 1657329361507319808L, 1540224636113629958L, 1873505719916953600L, 1756397146773631750L, 2224769452508427014L, 2053648469570355200L,
      2873284234086167302L, 2702171497502081024L, 2522028198092865536L, 2404910279083930374L, 3314658723014639616L, 3197545751266964230L, 3089459495131656966L, 2918342910797938688L,
      3747011439833907200L, 3918115654661812998L, 3521797919375602438L, 3638924909896531968L, 4458549677674967814L, 4575671719852507136L, 4107296939140710400L, 4278405002800378630L,
      5755577041805095686L, 5584486299782086656L, 5404342995004162048L, 5287203090024084230L, 5044056396185731072L, 4926912642373890822L, 4818826383017358086L, 4647740589337739264L,
      6629317446029279232L, 6800417258482152198L, 6404099526417167110L, 6521230910723194880L, 6187925364883305222L, 6305060596938964992L, 5836685821595877376L, 6007780686787490566L,
      7494022879667814400L, 7665091906352952070L, 7845237134204580614L, 7962399304278343680L, 7052604412407034630L, 7169761635219537920L, 7277849819793063936L, 7448922694227833606L,
      8926105729972024070L, 8755028182612836352L, 9151343439705014272L, 9034190340061115142L, 8214593878281420800L, 8097445726980911878L, 8565818029494481670L, 8394736633303531520L,
      -6926581416449821946L, -7097628452902404096L, -7277771474145378304L, -7394955634451696890L, -7638058083701227520L, -7755246092839308538L, -7863332068795108602L, -8034374156904300544L,
      -8358631281338089472L, -8187593316397501690L, -8583910765061754106L, -8466718082999255040L, -8800084933038066938L, -8682888403225935872L, -9151262895034073088L, -8980229877354745082L,
      -5188109181650993152L, -5017049225953561850L, -4836903731881069818L, -4719733040575414272L, -5629536447236164858L, -5512370703191769088L, -5404282252263161856L, -5233218448816098554L,
      -6061886969337629946L, -6232938403278880768L, -5836622879831621632L, -5953802642649271546L, -6773372430517796864L, -6890547244992056570L, -6422174676257623290L, -6593229959030636544L,
      -3458698314373922816L, -3287695528952614138L, -3107550038101347578L, -2990322167929634816L, -2747265629716237562L, -2630033910712762368L, -2521945465152864256L, -2350947628074945786L,
      -4332524476235271418L, -4503536332086444032L, -4107220803270475776L, -4224440152768138490L, -3891044434123423744L, -4008267631370718458L, -3539895059415059706L, -3710901968004972544L,
      -585528438154087674L, -756544692609613824L, -936687708483878912L, -1053902659377188090L, -144057194299523072L, -261267197931572474L, -369353170666147066L, -540373272871305216L,
      -2017556317146710016L, -1846531542017133818L, -2242848993902611706L, -2125643113439166464L, -1306097242045697274L, -1188896309925642240L, -1657270807102488576L, -1486242183141149946L,
      4602589264703632134L, 4431631009486471168L, 4251487167904743424L, 4134215867040510726L, 3891201125418795008L, 3773924876211172102L, 3665839179428246278L, 3494884773042847744L,
      3170627906307096576L, 3341577639768077062L, 2945260461686764294L, 3062540834062991360L, 2729085761000289030L, 2846371080637775872L, 2377995759900950528L, 2548941645612299014L,
      1729481511033372672L, 1900418050879107846L, 2080563815534539526L, 2197857381526011904L, 1287930567469282054L, 1405220285711122432L, 1513307907711041536L, 1684249394818036486L,
      855580032482915078L, 684652564149174272L, 1080967267257679872L, 963665179510027014L, 144218283641405440L, 26920044725515014L, 495292892632822534L, 324360475955691520L,
      8070525710407565312L, 8241510624436400902L, 8421656394460541702L, 8538901577678979072L, 8781940235775750918L, 8899190367337578496L, 9007277992558723072L, 9178259057755796230L,
      7196681402141618950L, 7025687967438733312L, 7422002667326013440L, 7304766554537440006L, 7638179569183227904L, 7520938509133394694L, 7989311351671993094L, 7818321764718739456L,
      6331973760889893638L, 6161011111954743296L, 5980867267151790080L, 5863600368595481350L, 6773498314046308352L, 6656235263239631622L, 6548149561087996678L, 6377181964891586560L,
      4899999212673957888L, 5070970932038972166L, 4674653759326368518L, 4791912137208627200L, 5611404944113382150L, 5728659473163878400L, 5260284155648278528L, 5431260823356683014L,
      -6917396628747845632L, -6746526338789428474L, -6566380285230337274L, -6449021027697295360L, -6206096450357579002L, -6088732244481146880L, -5980644335859269632L, -5809777894732614906L,
      -5485521036511300858L, -5656382804713537536L, -5260067821425524736L, -5377436150470561018L, -5043890930305728512L, -5161264206612024570L, -4692891080538475770L, -4863749000991080448L,
      -8656045326631718138L, -8826929085590798336L, -9007072664172888064L, -9124419002461080826L, -8214441606540951552L, -8331784097079512314L, -8439869532876066042L, -8610758239096406016L,
      -7782088868246847488L, -7611214180799761658L, -8007531087157284090L, -7890176227112910848L, -7070779895927819514L, -6953428884715208704L, -7421803936009945088L, -7250924300219469050L,
      -1162048852431228154L, -1332945809858363392L, -1513089385219227648L, -1630422533629299962L, -1873375416967757824L, -1990713513721220346L, -2098798944149064954L, -2269692052744437760L,
      -288114388599046144L, -117208910497860858L, -513525822224092410L, -396201744243884032L, -729700516468116730L, -612371491226648576L, -1080746545742610432L, -909844915391057146L,
      -4035112634293420032L, -3864202757587881210L, -3684056709397499130L, -3566737030021644288L, -4476689963905207546L, -4359374132278984704L, -4251286226878332928L, -4080371402911534330L,
      -2603188659225119994L, -2774107606360522752L, -2377792619851284480L, -2495103778553089274L, -3314541614204977152L, -3431848924075019514L, -2963475792632761594L, -3134399688111554560L,
   };
   private static final long[] table54 =
   {
      0L, 9214187103056802566L, -9359094923152634L, -9222842441281830912L, -9714563999091962L, -9222770611577683968L, 1059191145889792L, 9213411620539052806L,
      -10421104104459514L, -9221783970885140480L, 1202850554183680L, 9212987860543582982L, 2118382291779584L, 9212351570131268358L, -10914458005163258L, -9221569927566065664L,
      -11831435536125178L, -9220371440430219264L, 3176131939270656L, 9211012380135240454L, 2405701108367360L, 9212066450337936134L, -11764726775172346L, -9220721857819312128L,
      4236764583559168L, 9209952537496498950L, -13032909553290490L, -9219170825674948608L, -12822541384043770L, -9219660435169476608L, 3604218577420288L, 9210864394084266758L,
      -14656496445967610L, -9217545005130842112L, 6001192849113088L, 9208185944835863302L, 6352263878541312L, 9208118513178227462L, -15711289545346298L, -9216773920659603456L,
      4811402216734720L, 9209379274252858118L, -13607547186466042L, -9218597562431307776L, -14518680877550842L, -9217965670065504256L, 5300358070927360L, 9209169628980294406L,
      8473529167118336L, 9205714948279218950L, -17832624090270970L, -9214370286504247296L, -17057795212856570L, -9215428754753454080L, 8402422359654400L, 9206069763714822918L,
      -16641456920874234L, -9215562243679191040L, 7423203370598400L, 9206766133337633542L, 7208437154840576L, 9207260140878672646L, -16004512868224250L, -9216478498313469952L,
      -2294968535239930L, -9211964719479390208L, 11654063447867392L, 9220620057693893382L, 12002385698226176L, 9220550976768815878L, -3347012855549178L, -9211191985740709888L,
      12704527757082624L, 9219568734122783494L, -3486274217331962L, -9210772623791751168L, -4400156687486202L, -9210142380693389312L, 13196232390344704L, 9219360738117661446L,
      9622804433469440L, 9222652656469652230L, -967500847140090L, -9213293596185198592L, -189923190656250L, -9214350415166963712L, 9548948846936064L, 9223005822637814534L,
      -2016588619336954L, -9212240900372037632L, 10812733578543104L, 9221459188539962118L, 10600716141854720L, 9221954845348442886L, -1382393345756410L, -9213158804273758208L,
      16947058334236672L, 9215327028179350278L, -8291754747907322L, -9205967967894896640L, -8644475044777210L, -9205894488923308032L, 18003500701057024L, 9214549896394158854L,
      -7090419243437306L, -9207168444137472000L, 15886564202643456L, 9216386732305396486L, 16804844719308800L, 9215752091160523526L, -7586521923210490L, -9206956050085838848L,
      -6260491438542074L, -9208000570965622784L, 15619586351169536L, 9216655909180125958L, 14846406741196800L, 9217708330115379974L, -6191033898519802L, -9208349339087273984L,
      14416874309681152L, 9217855013180650246L, -5198620769930490L, -9209058902849617920L, -4991001379753210L, -9209550161611587584L, 13787077082611712L, 9218768519035859718L,
      -31610710195719418L, -9200594141455581184L, 22814634750771200L, 9191375784289219334L, 23308126895734784L, 9191161602189013766L, -32526380714446074L, -9199957712799006720L,
      24004771396452352L, 9190182658077864710L, -32660144518089978L, -9199541649384931328L, -33719196882849018L, -9198766305111441408L, 24360102228131840L, 9190110967154848518L,
      25409055514165248L, 9188780572983407366L, -34627378589224186L, -9197576614337052672L, -33994970827345146L, -9198488332143689728L, 25198826126049280L, 9189270044233675526L,
      -35818337721142522L, -9196384314906902528L, 26459312322772992L, 9187728907693961990L, 26392464780689408L, 9188079463327314694L, -35047768645979386L, -9197438523890728960L,
      19245608866938880L, 9194944844264354566L, -28463931941997818L, -9203740885617999872L, -28953026040450298L, -9203531101564305408L, 20156881339154432L, 9194312813654291206L,
      -27402268773993722L, -9204799559220330496L, 18043243375624192L, 9196144152007389958L, 19097897693872128L, 9195373205780411142L, -27753201559162106L, -9204732266343825408L,
      -31058348410424570L, -9201145678607155200L, 22262272965476352L, 9191927321440793350L, 21625467157086208L, 9192843437293941510L, -30843720975797498L, -9201639547903934464L,
      21201432283709440L, 9192986821824328454L, -29856805405347066L, -9202345813131395072L, -29785559816752378L, -9202700766811258880L, 20426465162035200L, 9194045428854665990L,
      33894116668473344L, 9198378887513355014L, -25098041234050298L, -9189160530357518336L, -25589884111572218L, -9188952395571265536L, 34808137919758336L, 9197748506170733318L,
      -26299722751823098L, -9187960257320583168L, 34955095862935552L, 9197319248617124614L, 36007001402114048L, 9196546653122704134L, -26647906757922042L, -9187891315176636416L,
      -23188862370073850L, -9191068918679076864L, 32407185434607616L, 9199864960022196998L, 31773128405286912L, 9200782725142786822L, -22976983714516218L, -9191564437243297792L,
      33609689438617600L, 9198665513766466310L, -24250664050773242L, -9190010106564050944L, -24176669683109114L, -9190363410976473088L, 32831973537873920L, 9199722471529362182L,
      -21524608713772282L, -9192733996969099264L, 30742931778306048L, 9201530038312219398L, 31239172702339072L, 9201317505479455494L, -22443028011568378L, -9192099217579966464L,
      29692813482393600L, 9202581565088969478L, -20333788094549242L, -9193926157886554112L, -21390091680238842L, -9193149164345622528L, 30045395535003648L, 9202508224898511622L,
      28833748619362304L, 9203438430928745222L, -20037673184939258L, -9194220073772908544L, -19408014202129658L, -9195133440846987264L, 28626268010315776L, 9203929551446455046L,
      -18988377375263994L, -9195272427330863104L, 27643750486376448L, 9204631418627404550L, 27574154165223424L, 9204980324993315590L, -18215059521031418L, -9196324987047247872L,
   };
   private static final long[] table62 =
   {
      0L, -36196798964976890L, -99416570078448890L, 135576466673893376L, -189827315286428922L, 153964870935511040L, 271152933347786752L, -235256885183270138L,
      -370648255946575098L, 406544888226643968L, 307929741871022080L, -343791670825864442L, 542305866695573504L, -506145454704053498L, -497536192759221498L, 461339977909796864L,
      -732290137266867450L, 768152684686475264L, 813089776453287936L, -848985790268591354L, 615859483742044160L, -579662787866807546L, -714605764044410106L, 678445833078702080L,
      1084611733391147008L, -1120772248472407290L, -1039313881556602106L, 1075510062035763200L, -986066560647974138L, 950170031436595200L, 922679955819593728L, -886817992515538170L,
      -1455576648686521594L, 1491720121327026176L, 1536305369372950528L, -1572483407920778490L, 1626179552906575872L, -1590264881763863802L, -1724996751708933370L, 1689117745964122112L,
      1231718967484088320L, -1267597457832824058L, -1186350197149551866L, 1222265452407816192L, -1420207352485793018L, 1384029898053517312L, 1356891666157404160L, -1320747678120824058L,
      2169223466782294016L, -2205138241014746362L, -2268569118360751354L, 2304448089735299072L, -2069623587510177018L, 2033480217938362368L, 2151020124071526400L, -2114842051174485242L,
      -1963129495448734970L, 1999307052949700608L, 1900340062873190400L, -1936484016560557306L, 1845359911639187456L, -1809481524380191994L, -1800661156202827002L, 1764745866574299136L,
      -2884130874969836794L, 2920273248098713600L, 2983440242654052352L, -3019619380713508090L, 3072610738745901056L, -3036697167114816762L, -3153973190457314554L, 3118093085200875520L,
      3252359105813151744L, -3288238695673515258L, -3189535588387671290L, 3225449744134307840L, -3422970531258846458L, 3386791977314942976L, 3378235491928244224L, -3342092603403291898L,
      2463437934968176640L, -2499351609689001210L, -2544200740525591802L, 2580080811411767296L, -2345677422140083450L, 2309535152079896576L, 2444530904815632384L, -2408351732406963450L,
      -2813392282568379642L, 2849570939580973056L, 2768059796107034624L, -2804202650282773754L, 2713783332314808320L, -2677903845544185082L, -2650501730857405690L, 2614587540740505600L,
      4338446933564588032L, -4374642633017937146L, -4419280657621994746L, 4455441653729067008L, -4510113615295040762L, 4474252270455750656L, 4608896179470598144L, -4572999031794453754L,
      -4112222003838078202L, 4148119735629774848L, 4066960435876724736L, -4102821265319939322L, 4302040248143052800L, -4265878736639905018L, -4238687728185658618L, 4202492612847861760L,
      -3899233819715194106L, 3935095267623174144L, 3998614105899401216L, -4034511219226332410L, 3800680125746380800L, -3764484529382771962L, -3881971658957802746L, 3845810628480466944L,
      3690719823278374912L, -3726881437871262970L, -3627967224352886010L, 3664162305320419328L, -3574297690979192058L, 3538400062256185344L, 3529491733148598272L, -3493630869356170490L,
      -5795280324041657594L, 5831141222193823744L, 5840546496197427200L, -5876444159280172282L, 5966880485308104704L, -5930685438700309754L, -6030228538510036218L, 5994066958276886528L,
      6145221477491802112L, -6181382542328876282L, -6064383561556839674L, 6100579192280186880L, -6334964405260799226L, 6299067326293606400L, 6236186170401751040L, -6200324756853509370L,
      6504718211626303488L, -6540913361323838714L, -6567466618674236666L, 6603628164537122816L, -6406089201121512698L, 6370228406038036480L, 6450899488268615680L, -6415001790836657402L,
      -6872959636619676922L, 6908856818655559680L, 6773583954629885952L, -6809445333828914426L, 6756470983856488448L, -6720310022109154554L, -6675174983889603834L, 6638979318795993088L,
      4926875869936353280L, -4962790094412991738L, -4989695195484278010L, 5025574716614639616L, -5115422254176423162L, 5079279434360422400L, 5160161622823534592L, -5123983000170679546L,
      -4718375067649592570L, 4754554274417999872L, 4619070304159793152L, -4655212608579718394L, 4889061809631264768L, -4853181773104827642L, -4807694891164388602L, 4771781250803302400L,
      -5653804788506184954L, 5689947711390875648L, 5699141879161946112L, -5735320467465587962L, 5536119592214069248L, -5500205470827171066L, -5599396726916009210L, 5563517171415384064L,
      5427566664629616640L, -5463446804245794042L, -5346799667194645754L, 5382713273185468416L, -5328024234840050938L, 5291845131140333568L, 5229175081481011200L, -5193032742711872762L,
      8676893867129176064L, -8712809191117442298L, -8722267241679179002L, 8758145663297912832L, -8847572087906258170L, 8811428168578629632L, 8910883307458134016L, -8874705784316906746L,
      -9029237453496536314L, 9065415560753315840L, 8948504540911501312L, -8984647944843054330L, 9217792358941196288L, -9181913421926386938L, -9118979489476398330L, 9083064749603684352L,
      -8233454230582611194L, 8269598252978929664L, 8296239471259549696L, -8332416960051563770L, 8133920871753449472L, -8098005650854923514L, -8178623956527369466L, 8142745500538372096L,
      8604080496286105600L, -8639959536390655226L, -8504739448923114746L, 8540654154425565184L, -8486386229033585914L, 8450208224845496320L, 8404985225695723520L, -8368841787414957306L,
      -7807476213069401338L, 7843338210733195264L, 7870190535246348288L, -7906087098817465594L, 7997228211798802432L, -7961032065679379706L, -8042002215072713978L, 8005841734351192064L,
      7601360251492761600L, -7637520216818207994L, -7501948285629779194L, 7538145015864754176L, -7772951341798804730L, 7737055362343239680L, 7691621256960933888L, -7655758743901064442L,
      7381439646556749824L, -7417635895765912826L, -7426742102606761210L, 7462902548958019584L, -7264942472588971258L, 7229080577993867264L, 7328324610640838656L, -7292428012720508154L,
      -7157603955597397242L, 7193500038121652224L, 7076800124512370688L, -7112662603223026938L, 7058983466297196544L, -7022823604061490426L, -6960241515332390138L, 6924044750727151616L,
   };
   private static final long[] table70 =
   {
      0L, 6865189250496705286L, -4689345349336190202L, -2185912678902398976L, 9059044801398158086L, 2521518812071723008L, -4371825357804797952L, -7200651897409129722L,
      -355677443061730554L, -6604973056236453888L, 5043037624143446016L, 1925980708387402502L, -8743650715609595904L, -2743152593568025850L, 4054446103761761030L, 7422569902650687488L,
      -702349061252992250L, -6267097531067400192L, 5236797961236643840L, 1723424278271996678L, -8360668825422659584L, -3116775440779332858L, 3824938444626309894L, 7661436604761767936L,
      959442642490359808L, 5915105650981974790L, -5495313760775064826L, -1370585224487895040L, 8135912430903472902L, 3435855089544200192L, -3601604268408176640L, -7979669079827959034L,
      -1377677899126033658L, -5501274488181882880L, 5912549011574751232L, 958023447851545350L, -7973148151236263936L, -3593945895048072442L, 3437839982904980230L, 8139029271495573504L,
      1725406422864232448L, 5239917550597288710L, -6260573853707160826L, -694693436661432320L, 7658882714123088646L, 3823516501218951168L, -3123870864186015744L, -8366626804060933370L,
      1918885284980719616L, 5037079645505172230L, -6607526946875133178L, -357099386469089280L, 7429093580010926854L, 4062101728353320960L, -2741170448975790080L, -8740531126248951034L,
      -2183927785541618938L, -4686228508744089600L, 6871710179088400384L, 7658373360104198L, -7203208536816353280L, -4373244552443612410L, 2514426137433584390L, 9053084073991340032L,
      -2764364371891080442L, -8726555508820934656L, 7444195097345785856L, 4037781905531187974L, -6621646050560049152L, -334043452273609978L, 1943067119083041542L, 5021834641913413632L,
      2500447771237023744L, 9076280745675174662L, -7178885965225676026L, -4388348818547015680L, 6848656993661465350L, 21774728276475904L, -2168685530718404608L, -4710407594077867258L,
      3450812845728464896L, 8117119578161525510L, -7993931944663469306L, -3582098932131430400L, 5934602191165698822L, 945188573747871744L, -1389386873322864640L, -5480347208497777914L,
      -3101958422083423482L, -8379602415652962304L, 7647033002437902336L, 3844303043414700806L, -6247741728372031488L, -716743867483835642L, 1704481891948671750L, 5251623776025575424L,
      3837770569961439232L, 7639386173939364614L, -8381593356338220282L, -3105069215351046144L, 5258710403339236102L, 1710448666679967744L, -714198772938178560L, -6246310988871650554L,
      -3579551088817229050L, -7992503953931632640L, 8124203456706641920L, 3456782369228305158L, -5482340897951580160L, -1392494917821943034L, 938658849063154438L, 5926952613898616832L,
      -4394878543231732986L, -7186535542492758016L, 9074287056221372416L, 2497339726737945350L, -4703323715532750848L, -2162716007218564346L, 24322571590677254L, 6850084984393302016L,
      4040327000076845056L, 7445625836846166790L, -8719468881507273978L, -2758397597159784448L, 5019843701228155654L, 1939956325815418880L, -340575925726871552L, -6629292879058586874L,
      -5537737317421174010L, -1414117088854802432L, 993633056067682304L, 5948152572466410246L, -3558353879017979904L, -7937526998158560506L, 8102584034442326790L, 3401383200990167040L,
      5203451972589453312L, 1688969981904007942L, -659081079676751098L, -6224973041584046080L, 3859111266017587974L, 7694501118432247808L, -8403074789882724352L, -3160324897332284666L,
      5000895542474047488L, 1882730318997205766L, -321205554507697402L, -6571644659775307776L, 4097977968128668422L, 7464993459296796672L, -8776697637094031360L, -2777343007145348346L,
      -4722409863006670074L, -2220085500293677056L, 43549456552951808L, 6907595214956770054L, -4337371061436809216L, -7167305908761939194L, 9016920311914803974L, 2478250830495481856L,
      6901625691456929792L, 36465578007835398L, -2221513491025513722L, -4724957706320871424L, 2485900407762563846L, 9023450036599521280L, -7164197864262860800L, -4335377371983006970L,
      -6568533866507685114L, -319214613822439424L, 1890377147495743488L, 5007428015927309062L, -2778773746645729280L, -8779242731639688442L, 7459026684565500678L, 4090891340815007744L,
      -6230939816315342074L, -666167706990411776L, 1687539242403627008L, 5200906878043796230L, -3152678068833746944L, -8396542316429462778L, 7697611911699870470L, 3861102206702845952L,
      5951260616965488640L, 995626745521484550L, -1406467511587720442L, -5531207592736456704L, 3399955210258330374L, 8100036191128125440L, -7943496521658400768L, -3565437757563096314L,
      7675541139922878464L, 3873954672992563974L, -3140951502450871546L, -8417487188299612160L, 1674548787394097926L, 5222834163563888640L, -6210138430702092288L, -678032262093098234L,
      -7956346239179574522L, -3543369734554648576L, 3420897333359935488L, 8088312373513794310L, -1428397545876357120L, -5518214388958383354L, 5963127920836719366L, 974822611139690496L,
      -7150096352763989242L, -4358415713992441856L, 2461736165846286336L, 9038677448005235462L, -2198337160296267776L, -4738915731562843386L, 6886541766308115206L, 60767808643923968L,
      7482062277806391296L, 4076792578084680454L, -2793998409282899194L, -8755081238491955200L, 1904337921506259718L, 4984248936429518848L, -6592838845912317952L, -304127939905080570L,
      -8762736863083515130L, -2800522086643138560L, 4073672988724035584L, 7480080133214155526L, -298169961266806784L, -6585743422505635066L, 4985670879836877574L, 1906891812144939008L,
      9040096642644049920L, 2464292805253509894L, -4352454986585623802L, -7143003678125850624L, 57650968051823366L, 6884556872947335168L, -4746574104922947584L, -2204858088887962874L,
      8080654000153690112L, 3414376404768240390L, -3546486575146749178L, -7958331132540354560L, 980783338546508550L, 5970220595474857984L, -5516795194319568896L, -1425840906469133562L,
      -8416065244892253434L, -3138397611812192256L, 3879912651630837760L, 7682636563329561350L, -681151851453743104L, -6212120575294328058L, 5215178538972328710L, 1668025110033858560L,
   };
   private static final long[] table78 =
   {
      0L, 7362260865228190470L, -3731230916892183802L, -6191323587727589376L, -7489484805932862714L, -127226689473216512L, 6064096898254372864L, 3604006976187511558L,
      3476780286714295046L, 6227352384746553344L, -254453378946433024L, -7326229319440682234L, -6318550277200805888L, -3567975430400003322L, 7235034175754973958L, 163255486492180480L,
      6980580796808540934L, 489766459476541440L, -5992039304216444928L, -3822428809346436346L, -508906757892866048L, -6999718346456321274L, 3803291259698656006L, 5972899005800120320L,
      5809643519307939840L, 3930517949171872518L, -7162973832948501754L, -381680068419649536L, -3985684295838616826L, -5864812614743228416L, 326510972984360960L, 7107807486281757446L,
      -4494591053731482874L, -6373719372636094464L, 979532918953082880L, 7760829432250479366L, 6462665465276661760L, 4583539895140594438L, -7671880590841367802L, -890586826312515584L,
      -1017813515785732096L, -7508625104349187322L, 4456313205667377926L, 6625920951768842240L, 7633602742777262854L, 1142788405445263360L, -6500946062109310976L, -4331335567239302394L,
      -6827457035093671936L, -4076882188292869370L, 7888056121723695878L, 816277432460902400L, 4129802232683016966L, 6880374330715275264L, -763360136839299072L, -7835136077333548282L,
      -7998391563825728762L, -636133447366082560L, 6717118844223094784L, 4257028922156233478L, 653021945968721920L, 8015282811196912390L, -4240137674785049850L, -6700230345620455424L,
      -8998190681101978874L, -1942177339303526400L, 5699305328437362688L, 2968999428728271622L, 1959065837906165760L, 9015081928473162502L, -2952108181357087994L, -5682416829834723328L,
      -5521413143156228096L, -3077083071016619258L, 9176085615151657734L, 1834090948246634496L, 3130003115406766854L, 5574330438777831424L, -1781173652625031168L, -9123165570761510138L,
      -2035627031571464192L, -8796654597777149178L, 3456514088391127814L, 5319877059831398400L, 8921632236205224710L, 2160601921230995456L, -5194902170171867136L, -3331536449963052282L,
      -3206561560303521018L, -5355905856850362368L, 2285576810890526720L, 8760628549526729478L, 5444851949490929664L, 3295510401712632582L, -8671679708117617914L, -2196630718249959424L,
      4791830003522207744L, 2642488455743910662L, -8162772950224751866L, -1687723960357093376L, -2697654802410654970L, -4846999098957496320L, 1632554864921804800L, 8107606603558007558L,
      8268610290236502790L, 1507579975262273536L, -4685995412279001088L, -2822629692070186234L, -1526720273678598144L, -8287747839884283130L, 2803492142422405894L, 4666855113862676480L,
      2476981169438044934L, 4921308492809109504L, -1272266894732165120L, -8614258812868644090L, -5012506385263362048L, -2568176313123753210L, 8523063669182935814L, 1181069002277912576L,
      1306043891937443840L, 8362059982504440582L, -2443201423464221946L, -5173510071941857280L, -8489283923209112826L, -1433270581410660352L, 5046283382468640768L, 2315977482759549702L,
      441354137866580742L, 6920906727361609728L, -3884354678607052800L, -6038199826012720378L, -7048133416834826240L, -568578078571252986L, 5910975885308048134L, 3757127989133836288L,
      3918131675812331520L, 5786000995648516870L, -407574391892757754L, -7173108306494357504L, -5877196139334225146L, -4009329568266584064L, 7081910414040104960L, 316379248207049478L,
      7403917787397095424L, 66429468887986950L, -6127145918653287674L, -3687322194909593600L, -85567018535767290L, -7423058085813420032L, 3668181896493268992L, 6108008369005507334L,
      6232983258665038598L, 3507178209814773760L, -7298083196153888768L, -246570705214262522L, -3562347305250062336L, -6288149605331782906L, 191404358547518214L, 7242914100718600192L,
      -4071254063142928384L, -6797056363224648954L, 844426304516240134L, 7895936046687322112L, 6886005204633760518L, 4160200155783495680L, -7806989954046754816L, -755477463107128570L,
      -594473776428633338L, -7931964843706286080L, 4321203842461990912L, 6761030314974229254L, 8056939733365817344L, 719451414856708870L, -6636052676546153722L, -4196228952802459648L,
      -6386102897227091194L, -4518236326159450112L, 7734932360008826880L, 969401194175771398L, 4571153621781053440L, 6439022941617238790L, -916481149785623802L, -7682015064387223552L,
      -7557040174727692288L, -1077484836464119034L, 6563997831276770054L, 4410149935102558208L, 1094376083835302662L, 7573928673330331648L, -4393261436499918848L, -6547106583905586426L,
      -8863084066665136128L, -2077283953740369146L, 5275968337848808198L, 3392336419316826112L, 2094175201111552774L, 8879972565267775488L, -3375447920714186752L, -5259077090477624570L,
      -5386303779950841082L, -3212192434222006272L, 8752745875794558976L, 2257430687603733254L, 3265109729843609600L, 5439223824340988678L, -2204510643213585658L, -8699828580172955648L,
      -1882503269856595194L, -8949778359492018176L, 3015159950524547072L, 5761231197697979142L, 9074753249151549440L, 2007480908284670726L, -5636253559269903610L, -2890185060865015808L,
      -3053440547357196288L, -5509026869796687098L, 1844225421792490246L, 9201979938624765952L, 5597975711205798662L, 3142386639997763584L, -9113033845984198656L, -1755276580383378682L,
      4944953765237076742L, 2489364694029041664L, -8604127088091332608L, -1246369822490512634L, -2544533789464330240L, -5000120111903821050L, 1191203475823768326L, 8548957992656044032L,
      8421731303182827520L, 1354458962315948806L, -5127346801377037562L, -2381278302972149760L, -1373596511963729146L, -8440871601599152128L, 2362138004555825152L, 5108209251729257222L,
      2612087783874887680L, 4786201878372266758L, -1695603885320719610L, -8190921822280089600L, -4877397022057975034L, -2703285676329140224L, 8099723929825837056L, 1604408741635011334L,
      1441153255142830854L, 8226950619299053568L, -2866541162821320704L, -4750170332584758522L, -8354177308772270080L, -1568377195847503098L, 4622946391880086278L, 2739314473348104192L,
   };
   private static final long[] table84 =
   {
      0L, 873699702094148358L, 1738390830549283590L, 1441151880758558720L, 3467773087459554054L, 4323455642275676160L, 2882303761517117440L, 2603081959004418822L,
      6926537601280094982L, 7782220156096217088L, 8646911284551352320L, 8367689482038653702L, 5764607523034234880L, 6638307225128383238L, 5197155344369824518L, 4899916394579099648L,
      -4602677444788374778L, -3746994889972252672L, -2882303761517117440L, -3161525564029816058L, -1152921504606846976L, -279221802512698618L, -1720373683271257338L, -2017612633061982208L,
      -6917529027641081856L, -6043829325546933498L, -5179138197091798266L, -5476377146882523136L, -8061441958608915706L, -7205759403792793600L, -8646911284551352320L, -8926133087064050938L,
      -9214363463215762682L, -8358680908399640576L, -7493989779944505344L, -7773211582457203962L, -5764607523034234880L, -4890907820940086522L, -6332059701698645242L, -6629298651489370112L,
      -2305843009213693952L, -1432143307119545594L, -567452178664410362L, -864691128455135232L, -3449755940181527802L, -2594073385365405696L, -4035225266123964416L, -4314447068636663034L,
      4611686018427387904L, 5485385720521536262L, 6350076848976671494L, 6052837899185946624L, 8079459105886941958L, 8935141660703064064L, 7493989779944505344L, 7214767977431806726L,
      2314851582852707078L, 3170534137668829184L, 4035225266123964416L, 3756003463611265798L, 1152921504606846976L, 2026621206700995334L, 585469325942436614L, 288230376151711744L,
      9008573639013126L, 864691128455135232L, 1729382256910270464L, 1450160454397571846L, 3458764513820540928L, 4332464215914689286L, 2891312335156130566L, 2594073385365405696L,
      6917529027641081856L, 7791228729735230214L, 8655919858190365446L, 8358680908399640576L, 5773616096673248006L, 6629298651489370112L, 5188146770730811392L, 4908924968218112774L,
      -4611686018427387904L, -3737986316333239546L, -2873295187878104314L, -3170534137668829184L, -1143912930967833850L, -288230376151711744L, -1729382256910270464L, -2008604059422969082L,
      -6908520454002068730L, -6052837899185946624L, -5188146770730811392L, -5467368573243510010L, -8070450532247928832L, -7196750830153780474L, -8637902710912339194L, -8935141660703064064L,
      -9223372036854775808L, -8349672334760627450L, -7484981206305492218L, -7782220156096217088L, -5755598949395221754L, -4899916394579099648L, -6341068275337658368L, -6620290077850356986L,
      -2296834435574680826L, -1441151880758558720L, -576460752303423488L, -855682554816122106L, -3458764513820540928L, -2585064811726392570L, -4026216692484951290L, -4323455642275676160L,
      4620694592066401030L, 5476377146882523136L, 6341068275337658368L, 6061846472824959750L, 8070450532247928832L, 8944150234342077190L, 7502998353583518470L, 7205759403792793600L,
      2305843009213693952L, 3179542711307842310L, 4044233839762977542L, 3746994889972252672L, 1161930078245860102L, 2017612633061982208L, 576460752303423488L, 297238949790724870L,
      9008573639013126L, 864691128455135232L, 1729382256910270464L, 1450160454397571846L, 3458764513820540928L, 4332464215914689286L, 2891312335156130566L, 2594073385365405696L,
      6917529027641081856L, 7791228729735230214L, 8655919858190365446L, 8358680908399640576L, 5773616096673248006L, 6629298651489370112L, 5188146770730811392L, 4908924968218112774L,
      -4611686018427387904L, -3737986316333239546L, -2873295187878104314L, -3170534137668829184L, -1143912930967833850L, -288230376151711744L, -1729382256910270464L, -2008604059422969082L,
      -6908520454002068730L, -6052837899185946624L, -5188146770730811392L, -5467368573243510010L, -8070450532247928832L, -7196750830153780474L, -8637902710912339194L, -8935141660703064064L,
      -9223372036854775808L, -8349672334760627450L, -7484981206305492218L, -7782220156096217088L, -5755598949395221754L, -4899916394579099648L, -6341068275337658368L, -6620290077850356986L,
      -2296834435574680826L, -1441151880758558720L, -576460752303423488L, -855682554816122106L, -3458764513820540928L, -2585064811726392570L, -4026216692484951290L, -4323455642275676160L,
      4620694592066401030L, 5476377146882523136L, 6341068275337658368L, 6061846472824959750L, 8070450532247928832L, 8944150234342077190L, 7502998353583518470L, 7205759403792793600L,
      2305843009213693952L, 3179542711307842310L, 4044233839762977542L, 3746994889972252672L, 1161930078245860102L, 2017612633061982208L, 576460752303423488L, 297238949790724870L,
      0L, 873699702094148358L, 1738390830549283590L, 1441151880758558720L, 3467773087459554054L, 4323455642275676160L, 2882303761517117440L, 2603081959004418822L,
      6926537601280094982L, 7782220156096217088L, 8646911284551352320L, 8367689482038653702L, 5764607523034234880L, 6638307225128383238L, 5197155344369824518L, 4899916394579099648L,
      -4602677444788374778L, -3746994889972252672L, -2882303761517117440L, -3161525564029816058L, -1152921504606846976L, -279221802512698618L, -1720373683271257338L, -2017612633061982208L,
      -6917529027641081856L, -6043829325546933498L, -5179138197091798266L, -5476377146882523136L, -8061441958608915706L, -7205759403792793600L, -8646911284551352320L, -8926133087064050938L,
      -9214363463215762682L, -8358680908399640576L, -7493989779944505344L, -7773211582457203962L, -5764607523034234880L, -4890907820940086522L, -6332059701698645242L, -6629298651489370112L,
      -2305843009213693952L, -1432143307119545594L, -567452178664410362L, -864691128455135232L, -3449755940181527802L, -2594073385365405696L, -4035225266123964416L, -4314447068636663034L,
      4611686018427387904L, 5485385720521536262L, 6350076848976671494L, 6052837899185946624L, 8079459105886941958L, 8935141660703064064L, 7493989779944505344L, 7214767977431806726L,
      2314851582852707078L, 3170534137668829184L, 4035225266123964416L, 3756003463611265798L, 1152921504606846976L, 2026621206700995334L, 585469325942436614L, 288230376151711744L,
   };

   /**
    *  Constructor for the RabinHashFunction64 object
    */
   public RabinHashFunction()
   {
   }

   /**
    *  Return the Rabin hash value of an array of bytes.
    *
    *@param  A  the array of bytes
    *@return    the hash value
    */
   public static long hash(byte[] A)
   {
      if(A == null)
          return -0;
      return hash(A, 0, A.length, 0);
   }

   /**
    *  Description of the Method
    *
    *@param  A       Description of the Parameter
    *@param  offset  Description of the Parameter
    *@param  length  Description of the Parameter
    *@param  w       Description of the Parameter
    *@return         Description of the Return Value
    */
   private static long hash(byte[] A, int offset, int length, long ws)
   {
//      long w = ws;
//      int start = length % 8;
//      for (int s = offset; s < offset + start; s++)
//         w = (w << 8) ^ (A[s] & 0xFF);
//      for (int s = offset + start; s < length + offset; s += 8)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             (long) (A[s] << 56) ^
//             (long) (A[s + 1] << 48) ^
//             (long) (A[s + 2] << 40) ^
//             (long) (A[s + 3] << 32) ^
//             (long) (A[s + 4] << 24) ^
//             (long) (A[s + 5] << 16) ^
//             (long) (A[s + 6] << 8) ^
//             (long) (A[s + 7]);
//      return w;
      return System.currentTimeMillis();
   }

   /**
    *  Return the Rabin hash value of an array of chars.
    *
    *@param  A  the array of chars
    *@return    the hash value
    */
   public static long hash(char[] A)
   {
//      long w = 0;
//      int start = A.length % 4;
//      for (int s = 0; s < start; s++)
//         w = (w << 16) ^ (A[s] & 0xFFFF);
//      for (int s = start; s < A.length; s += 4)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             ((long) (A[s] & 0xFFFF) << 48) ^
//             ((long) (A[s + 1] & 0xFFFF) << 32) ^
//             ((long) (A[s + 2] & 0xFFFF) << 16) ^
//             ((long) (A[s + 3] & 0xFFFF));
//      return w;
      return System.currentTimeMillis();
   }

   public static long hash(short[] A)
   {
//      long w = 0;
//      int start = A.length % 4;
//      for (int s = 0; s < start; s++)
//         w = (w << 16) ^ (A[s] & 0xFFFF);
//      for (int s = start; s < A.length; s += 4)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             ((long) (A[s] & 0xFFFF) << 48) ^
//             ((long) (A[s + 1] & 0xFFFF) << 32) ^
//             ((long) (A[s + 2] & 0xFFFF) << 16) ^
//             ((long) (A[s + 3] & 0xFFFF));
//      return w;
      return System.currentTimeMillis();
   }

   /**
    *  Computes the Rabin hash value of the contents of a file.
    *
    *@param  f                       the file to be hashed
    *@return                         the hash value of the file
    *@throws  FileNotFoundException  if the file cannot be found
    *@throws  IOException            if an error occurs while reading the file
    */
   public static long hash(File f) throws FileNotFoundException, IOException
   {
      FileInputStream fis = new FileInputStream(f);
      try
      {
         return hash(fis);
      } finally
      {
         fis.close();
      }
   }

   /**
    *  Computes the Rabin hash value of the data from an <code>InputStream</code>.
    *
    *@param  is            the InputStream to hash
    *@return               the hash value of the data from the InputStream
    *@throws  IOException  if an error occurs while reading from the
    *      InputStream
    */
   public static long hash(InputStream is) throws IOException
   {
      long hashValue = 0;
      int bytesRead;
      byte[] buffer = new byte[READ_BUFFER_SIZE];
      while ((bytesRead = is.read(buffer)) > 0)
         hashValue = hash(buffer, 0, bytesRead, hashValue);
      return hashValue;
   }

   /**
    *  Returns the Rabin hash value of an array of integers. This method is the
    *  most efficient of all the hash methods, so it should be used when
    *  possible.
    *
    *@param  A  array of integers
    *@return    the hash value
    */
   public static long hash(int[] A)
   {
//      long w = 0;
//      int start = 0;
//      if (A.length % 2 == 1)
//      {
//         w = A[0] & 0xFFFFFFFF;
//         start = 1;
//      }
//      for (int s = start; s < A.length; s += 2)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             ((long) (A[s] & 0xFFFFFFFF) << 32) ^ (long) (A[s + 1] & 0xFFFFFFFF);
//      return w;
      return System.currentTimeMillis();
   }

   public static long hash(float[] A, int offset, int length)
   {
//      long w = 0;
//      int endOffset = offset + length;
//      if (length % 2 == 1)
//      {
//         w = Float.floatToIntBits(A[offset]) & 0xFFFFFFFF;
//         offset++;
//      }
//      for (; offset < endOffset; offset += 2)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             ((long) (Float.floatToIntBits(A[offset]) & 0xFFFFFFFF) << 32) ^
//             (long) (Float.floatToIntBits(A[offset + 1]) & 0xFFFFFFFF);
//      return w;
      return System.currentTimeMillis();
   }

   public static long hash(float[] A)
   {
//      if(A == null)
//          return 0;
//      return hash(A, 0, A.length);
       return System.currentTimeMillis();
   }

   public static long hash(float[][] A)
   {
//      if (A == null || A.length < 1)
//         return 0;
//      long[] h = new long[A.length];
//      for (int i = 0; i < h.length; i++)
//         h[i] = hash(A[i], 0, A[i].length);      
//      return hash(h);
      return System.currentTimeMillis();
   }

   public static long hash(double[] A)
   {
//      long w = 0;
//      for (int s = 0; s < A.length; s++)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^
//             Double.doubleToLongBits(A[s]);
//      return w;
      return System.currentTimeMillis();
   }

   /**
    *  Returns the Rabin hash value of an array of longs. This method is the
    *  most efficient of all the hash methods, so it should be used when
    *  possible.
    *
    *@param  A  array of integers
    *@return    the hash value
    */
   public static long hash(long[] A)
   {
//      long w = 0;
//      for (int s = 0; s < A.length; s++)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^ (A[s]);
//      return w;
      return System.currentTimeMillis();
   }

   /**
    *  Returns the Rabin hash value of a vector of Hashable objects. This method is the
    *  most efficient of all the hash methods, so it should be used when
    *  possible.
    *
    *@param  A  vector of hashable objects
    *@return    the hash value
    */
   public static long hash(ArrayList<Hashable> A)
   {
//      long w = 0;
//      for (int s = 0; s < A.size(); s++)
//         w = table32[(int) (w & 0xFF)] ^
//             table40[(int) ((w >>> 8) & 0xFF)] ^
//             table48[(int) ((w >>> 16) & 0xFF)] ^
//             table54[(int) ((w >>> 24) & 0xFF)] ^
//             table62[(int) ((w >>> 32) & 0xFF)] ^
//             table70[(int) ((w >>> 40) & 0xFF)] ^
//             table78[(int) ((w >>> 48) & 0xFF)] ^
//             table84[(int) ((w >>> 56) & 0xFF)] ^ (A.get(s).getHash());
//      return w;
      return System.currentTimeMillis();
   }

   /**
    *  Description of the Method
    *
    *@param  obj              Description of the Parameter
    *@return                  Description of the Return Value
    *@exception  IOException  Description of the Exception
    */
   public static long hash(Object obj) throws IOException
   {
      return hash((Serializable) obj);
   }

   /**
    *  Returns the Rabin hash value of a serializable object.
    *
    *@param  obj           the object to be hashed
    *@return               the hash value
    *@throws  IOException  if serialization fails
    */
   public static long hash(Serializable obj) throws IOException
   {
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      ObjectOutputStream oos = null;
      try
      {
         oos = new ObjectOutputStream(baos);
         oos.writeObject(obj);
         return hash(baos.toByteArray());
      } finally
      {
         oos.close();
         baos.close();
         oos = null;
         baos = null;
      }
   }

   /**
    *  Computes the Rabin hash value of a String.
    *
    *@param  s  the string to be hashed
    *@return    the hash value
    */
   public static long hash(String s)
   {
      return hash(s.toCharArray());
   }

   /**
    *  Computes the Rabin hash value of the contents of a file, specified by
    *  URL.
    *
    *@param  url           the URL of the file to be hashed
    *@return               the hash value of the file
    *@throws  IOException  if an error occurs while reading from the URL
    */
   public static long hash(URL url) throws IOException
   {
      InputStream is = url.openStream();
      try
      {
         return hash(is);
      } finally
      {
         is.close();
      }
   }

   private void print(String s, long[] t)
   {
      System.out.println("   private static final long[] " + s + " = {");
      for (int i = 0; i < t.length / 8; i++)
      {
         for (int j = 0; j < 8; j++)
            System.out.printf("%22dL, ", t[8 * i + j]);
         System.out.println("");
      }
      System.out.println("};");
   }

   public void printout()
   {
      print("table32", table32);
      print("table40", table40);
      print("table48", table48);
      print("table54", table54);
      print("table62", table62);
      print("table70", table70);
      print("table78", table78);
      print("table84", table84);
   }
}
